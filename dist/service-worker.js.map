{
  "version": 3,
  "sources": ["../src/libraries/path.ts", "../src/libraries/dexie.js", "../src/utils/index.ts", "../src/database/worker.ts", "../src/service-worker.ts"],
  "sourcesContent": ["/**\r\nMIT License\r\n\r\nCopyright (c) 2015 Thomas Roch\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n */\r\n\r\ntype arrayFormat = \"none\" | \"brackets\" | \"index\";\r\ntype booleanFormat = \"none\" | \"string\" | \"unicode\" | \"empty-true\";\r\ntype nullFormat = \"default\" | \"string\" | \"hidden\";\r\n\r\ninterface IOptions {\r\n\tarrayFormat?: arrayFormat;\r\n\tbooleanFormat?: booleanFormat;\r\n\tnullFormat?: nullFormat;\r\n}\r\n\r\ninterface IFinalOptions {\r\n\tarrayFormat: arrayFormat;\r\n\tbooleanFormat: booleanFormat;\r\n\tnullFormat: nullFormat;\r\n}\r\n\r\nconst makeOptions = (opts: IOptions = {}): IFinalOptions => ({\r\n\tarrayFormat: opts.arrayFormat || \"none\",\r\n\tbooleanFormat: opts.booleanFormat || \"none\",\r\n\tnullFormat: opts.nullFormat || \"default\",\r\n});\r\n\r\nconst encodeValue = (value: any): string => encodeURIComponent(value);\r\n\r\nconst decodeValue = (value: string): string =>\r\n\tdecodeURIComponent(value.replace(/\\+/g, \" \"));\r\n\r\nconst encodeBoolean = (\r\n\tname: string,\r\n\tvalue: boolean,\r\n\topts: IFinalOptions,\r\n): string => {\r\n\tif (opts.booleanFormat === \"empty-true\" && value) {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tlet encodedValue: string;\r\n\r\n\tif (opts.booleanFormat === \"unicode\") {\r\n\t\tencodedValue = value ? \"\u2713\" : \"\u2717\";\r\n\t} else {\r\n\t\tencodedValue = value.toString();\r\n\t}\r\n\r\n\treturn `${name}=${encodedValue}`;\r\n};\r\n\r\nconst encodeNull = (name: string, opts: IFinalOptions): string => {\r\n\tif (opts.nullFormat === \"hidden\") {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tif (opts.nullFormat === \"string\") {\r\n\t\treturn `${name}=null`;\r\n\t}\r\n\r\n\treturn name;\r\n};\r\n\r\ntype nameEncoder = (val: string, index: number) => string;\r\n\r\nconst getNameEncoder = (opts: IFinalOptions): nameEncoder => {\r\n\tif (opts.arrayFormat === \"index\") {\r\n\t\treturn (name: string, index: number): string => `${name}[${index}]`;\r\n\t}\r\n\r\n\tif (opts.arrayFormat === \"brackets\") {\r\n\t\treturn (name: string): string => `${name}[]`;\r\n\t}\r\n\r\n\treturn (name: string): string => name;\r\n};\r\n\r\nconst encodeArray = (name: string, arr: any[], opts: IFinalOptions): string => {\r\n\tconst encodeName = getNameEncoder(opts);\r\n\r\n\treturn arr\r\n\t\t.map((val, index) => `${encodeName(name, index)}=${encodeValue(val)}`)\r\n\t\t.join(\"&\");\r\n};\r\n\r\nconst encode = (name: string, value: any, opts: IFinalOptions): string => {\r\n\tconst encodedName = encodeValue(name);\r\n\r\n\tif (value === null) {\r\n\t\treturn encodeNull(encodedName, opts);\r\n\t}\r\n\r\n\tif (typeof value === \"boolean\") {\r\n\t\treturn encodeBoolean(encodedName, value, opts);\r\n\t}\r\n\r\n\tif (Array.isArray(value)) {\r\n\t\treturn encodeArray(encodedName, value, opts);\r\n\t}\r\n\r\n\treturn `${encodedName}=${encodeValue(value)}`;\r\n};\r\n\r\nconst decode = (value: any, opts: IFinalOptions): boolean | string | null => {\r\n\tif (value === undefined) {\r\n\t\treturn opts.booleanFormat === \"empty-true\" ? true : null;\r\n\t}\r\n\r\n\tif (opts.booleanFormat === \"string\") {\r\n\t\tif (value === \"true\") {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (value === \"false\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tif (opts.nullFormat === \"string\") {\r\n\t\tif (value === \"null\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tconst decodedValue = decodeValue(value);\r\n\r\n\tif (opts.booleanFormat === \"unicode\") {\r\n\t\tif (decodedValue === \"\u2713\") {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (decodedValue === \"\u2717\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn decodedValue;\r\n};\r\n\r\nconst getSearch = (path: string): string => {\r\n\tconst pos = path.indexOf(\"?\");\r\n\r\n\tif (pos === -1) {\r\n\t\treturn path;\r\n\t}\r\n\r\n\treturn path.slice(pos + 1);\r\n};\r\n\r\nconst isSerializable = (val: any): boolean => val !== undefined;\r\n\r\ninterface IParsedName {\r\n\thasBrackets: boolean;\r\n\tname: string;\r\n}\r\n\r\nconst parseName = (name: string): IParsedName => {\r\n\tconst bracketPosition = name.indexOf(\"[\");\r\n\tconst hasBrackets = bracketPosition !== -1;\r\n\r\n\treturn {\r\n\t\thasBrackets,\r\n\t\tname: hasBrackets ? name.slice(0, bracketPosition) : name,\r\n\t};\r\n};\r\n\r\ntype SearchParams = Record<\r\n\tstring,\r\n\tstring | boolean | null | Array<string | boolean | null> | undefined\r\n>;\r\n\r\n/**\r\n * Parse a querystring and return an object of parameters\r\n */\r\nconst parseQueryParams = <T extends Record<string, any> = SearchParams>(\r\n\tpath: string,\r\n\topts?: IOptions,\r\n): T => {\r\n\tconst options = makeOptions(opts);\r\n\r\n\treturn getSearch(path)\r\n\t\t.split(\"&\")\r\n\t\t.reduce<Record<string, any>>((params, param) => {\r\n\t\t\tconst [rawName, value] = param.split(\"=\");\r\n\t\t\tconst { hasBrackets, name } = parseName(rawName);\r\n\t\t\tconst decodedName = decodeValue(name);\r\n\t\t\tconst currentValue = params[name];\r\n\t\t\tconst decodedValue = decode(value, options);\r\n\r\n\t\t\tif (currentValue === undefined) {\r\n\t\t\t\tparams[decodedName] = hasBrackets ? [decodedValue] : decodedValue;\r\n\t\t\t} else {\r\n\t\t\t\tparams[decodedName] = (\r\n\t\t\t\t\tArray.isArray(currentValue) ? currentValue : [currentValue]\r\n\t\t\t\t).concat(decodedValue);\r\n\t\t\t}\r\n\r\n\t\t\treturn params;\r\n\t\t}, {}) as T;\r\n};\r\n\r\n/**\r\n * Build a querystring from an object of parameters\r\n */\r\nconst buildQueryParams = <T extends Record<string, any> = SearchParams>(\r\n\tparams: T,\r\n\topts?: IOptions,\r\n): string => {\r\n\tconst options = makeOptions(opts);\r\n\r\n\treturn Object.keys(params)\r\n\t\t.filter((paramName) => isSerializable(params[paramName]))\r\n\t\t.map((paramName) => encode(paramName, params[paramName], options))\r\n\t\t.filter(Boolean)\r\n\t\t.join(\"&\");\r\n};\r\n\r\n/**\r\n * We encode using encodeURIComponent but we want to\r\n * preserver certain characters which are commonly used\r\n * (sub delimiters and ':')\r\n *\r\n * https://www.ietf.org/rfc/rfc3986.txt\r\n *\r\n * reserved    = gen-delims / sub-delims\r\n *\r\n * gen-delims  = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\r\n *\r\n * sub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\r\n              / \"*\" / \"+\" / \",\" / \";\" / \"=\"\r\n */\r\n\r\nconst excludeSubDelimiters = /[^!$'()*+,;|:]/g;\r\n\r\nexport type URLParamsEncodingType =\r\n\t| \"default\"\r\n\t| \"uri\"\r\n\t| \"uriComponent\"\r\n\t| \"none\"\r\n\t| \"legacy\";\r\n\r\nconst encodeURIComponentExcludingSubDelims = (segment: string): string =>\r\n\tsegment.replace(excludeSubDelimiters, (match) => encodeURIComponent(match));\r\n\r\nconst encodingMethods: Record<\r\n\tURLParamsEncodingType,\r\n\t(param: string) => string\r\n> = {\r\n\tdefault: encodeURIComponentExcludingSubDelims,\r\n\turi: encodeURI,\r\n\turiComponent: encodeURIComponent,\r\n\tnone: (val) => val,\r\n\tlegacy: encodeURI,\r\n};\r\n\r\nconst decodingMethods: Record<\r\n\tURLParamsEncodingType,\r\n\t(param: string) => string\r\n> = {\r\n\tdefault: decodeURIComponent,\r\n\turi: decodeURI,\r\n\turiComponent: decodeURIComponent,\r\n\tnone: (val) => val,\r\n\tlegacy: decodeURIComponent,\r\n};\r\n\r\nconst encodeParam = (\r\n\tparam: string | number | boolean,\r\n\tencoding: URLParamsEncodingType,\r\n\tisSpatParam: boolean,\r\n): string => {\r\n\tconst encoder =\r\n\t\tencodingMethods[encoding] || encodeURIComponentExcludingSubDelims;\r\n\r\n\tif (isSpatParam) {\r\n\t\treturn String(param).split(\"/\").map(encoder).join(\"/\");\r\n\t}\r\n\r\n\treturn encoder(String(param));\r\n};\r\n\r\nconst decodeParam = (param: string, encoding: URLParamsEncodingType): string =>\r\n\t(decodingMethods[encoding] || decodeURIComponent)(param);\r\n\r\nconst defaultOrConstrained = (match: string): string =>\r\n\t`(${match ? match.replace(/(^<|>$)/g, \"\") : \"[a-zA-Z0-9-_.~%':|=+\\\\*@$]+\"})`;\r\n\r\ntype RegExpFactory = (match: any) => RegExp;\r\n\r\ninterface IRule {\r\n\t/* The name of the rule */\r\n\tname: string;\r\n\t/* The regular expression used to find a token in a path definition */\r\n\tpattern: RegExp;\r\n\t/* The derived regular expression to match a path */\r\n\tregex?: RegExp | RegExpFactory;\r\n}\r\n\r\nconst rules: IRule[] = [\r\n\t{\r\n\t\tname: \"url-parameter\",\r\n\t\tpattern: /^:([a-zA-Z0-9-_]*[a-zA-Z0-9]{1})(<(.+?)>)?/,\r\n\t\tregex: (match: RegExpMatchArray) =>\r\n\t\t\tnew RegExp(defaultOrConstrained(match[2])),\r\n\t},\r\n\t{\r\n\t\tname: \"url-parameter-splat\",\r\n\t\tpattern: /^\\*([a-zA-Z0-9-_]*[a-zA-Z0-9]{1})/,\r\n\t\tregex: /([^?]*)/,\r\n\t},\r\n\t{\r\n\t\tname: \"url-parameter-matrix\",\r\n\t\tpattern: /^;([a-zA-Z0-9-_]*[a-zA-Z0-9]{1})(<(.+?)>)?/,\r\n\t\tregex: (match: RegExpMatchArray) =>\r\n\t\t\tnew RegExp(`;${match[1]}=${defaultOrConstrained(match[2])}`),\r\n\t},\r\n\t{\r\n\t\tname: \"query-parameter\",\r\n\t\tpattern: /^(?:\\?|&)(?::)?([a-zA-Z0-9-_]*[a-zA-Z0-9]{1})/,\r\n\t},\r\n\t{\r\n\t\tname: \"delimiter\",\r\n\t\tpattern: /^(\\/|\\?)/,\r\n\t\tregex: (match: RegExpMatchArray) => new RegExp(`\\\\${match[0]}`),\r\n\t},\r\n\t{\r\n\t\tname: \"sub-delimiter\",\r\n\t\tpattern: /^(!|&|-|_|\\.|;)/,\r\n\t\tregex: (match: RegExpMatchArray) => new RegExp(match[0]),\r\n\t},\r\n\t{\r\n\t\tname: \"fragment\",\r\n\t\tpattern: /^([0-9a-zA-Z]+)/,\r\n\t\tregex: (match: RegExpMatchArray) => new RegExp(match[0]),\r\n\t},\r\n];\r\n\r\ninterface Token {\r\n\ttype: string;\r\n\tmatch: string;\r\n\tval: any;\r\n\totherVal: any;\r\n\tregex?: RegExp;\r\n}\r\n\r\nconst tokenise = (str: string, tokens: Token[] = []): Token[] => {\r\n\t// Look for a matching rule\r\n\tconst matched = rules.some((rule) => {\r\n\t\tconst match = str.match(rule.pattern);\r\n\t\tif (!match) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\ttokens.push({\r\n\t\t\ttype: rule.name,\r\n\t\t\tmatch: match[0],\r\n\t\t\tval: match.slice(1, 2),\r\n\t\t\totherVal: match.slice(2),\r\n\t\t\tregex: rule.regex instanceof Function ? rule.regex(match) : rule.regex,\r\n\t\t});\r\n\r\n\t\tif (match[0].length < str.length) {\r\n\t\t\ttokens = tokenise(str.substr(match[0].length), tokens);\r\n\t\t}\r\n\t\treturn true;\r\n\t});\r\n\r\n\t// If no rules matched, throw an error (possible malformed path)\r\n\tif (!matched) {\r\n\t\tthrow new Error(`Could not parse path '${str}'`);\r\n\t}\r\n\r\n\treturn tokens;\r\n};\r\n\r\nconst exists = (val: any) => val !== undefined && val !== null;\r\n\r\nconst optTrailingSlash = (source: string, strictTrailingSlash: boolean) => {\r\n\tif (strictTrailingSlash) {\r\n\t\treturn source;\r\n\t}\r\n\r\n\tif (source === \"\\\\/\") {\r\n\t\treturn source;\r\n\t}\r\n\r\n\treturn `${source.replace(/\\\\\\/$/, \"\")}(?:\\\\/)?`;\r\n};\r\n\r\nconst upToDelimiter = (source: string, delimiter?: boolean) => {\r\n\tif (!delimiter) {\r\n\t\treturn source;\r\n\t}\r\n\r\n\treturn /(\\/)$/.test(source) ? source : `${source}(\\\\/|\\\\?|\\\\.|;|$)`;\r\n};\r\n\r\nconst appendQueryParam = (\r\n\tparams: Record<string, any>,\r\n\tparam: string,\r\n\tval = \"\",\r\n) => {\r\n\tconst existingVal = params[param];\r\n\r\n\tif (existingVal === undefined) {\r\n\t\tparams[param] = val;\r\n\t} else {\r\n\t\tparams[param] = Array.isArray(existingVal)\r\n\t\t\t? existingVal.concat(val)\r\n\t\t\t: [existingVal, val];\r\n\t}\r\n\r\n\treturn params;\r\n};\r\n\r\nexport interface PathOptions {\r\n\t/**\r\n\t * Query parameters buiding and matching options, see\r\n\t * https://github.com/troch/search-params#options\r\n\t */\r\n\tqueryParams?: IOptions;\r\n\t/**\r\n\t * Specifies the method used to encode URL parameters:\r\n\t *   - `'default': `encodeURIComponent` and `decodeURIComponent`\r\n\t *      are used but some characters to encode and decode URL parameters,\r\n\t *      but some characters are preserved when encoding\r\n\t *      (sub-delimiters: `+`, `:`, `'`, `!`, `,`, `;`, `'*'`).\r\n\t *   - `'uriComponent'`: use `encodeURIComponent` and `decodeURIComponent`\r\n\t *      for encoding and decoding URL parameters.\r\n\t *   - `'uri'`: use `encodeURI` and `decodeURI for encoding amd decoding\r\n\t *      URL parameters.\r\n\t *   - `'none'`: no encoding or decoding is performed\r\n\t *   - `'legacy'`: the approach for version 5.x and below (not recoomended)\r\n\t */\r\n\turlParamsEncoding?: URLParamsEncodingType;\r\n}\r\n\r\nexport interface InternalPathOptions {\r\n\tqueryParams?: IOptions;\r\n\turlParamsEncoding: URLParamsEncodingType;\r\n}\r\n\r\nconst defaultOptions: InternalPathOptions = {\r\n\turlParamsEncoding: \"default\",\r\n};\r\n\r\nexport interface PathPartialTestOptions extends PathOptions {\r\n\tcaseSensitive?: boolean;\r\n\tdelimited?: boolean;\r\n}\r\n\r\nexport interface PathTestOptions extends PathOptions {\r\n\tcaseSensitive?: boolean;\r\n\tstrictTrailingSlash?: boolean;\r\n}\r\n\r\nexport interface PathBuildOptions extends PathOptions {\r\n\tignoreConstraints?: boolean;\r\n\tignoreSearch?: boolean;\r\n}\r\n\r\nexport type TestMatch<T extends Record<string, any> = Record<string, any>> =\r\n\tT | null;\r\n\r\nexport class Path<T extends Record<string, any> = Record<string, any>> {\r\n\tpublic static createPath<T extends Record<string, any> = Record<string, any>>(\r\n\t\tpath: string,\r\n\t\toptions?: PathOptions,\r\n\t) {\r\n\t\treturn new Path<T>(path, options);\r\n\t}\r\n\r\n\tpublic path: string;\r\n\tpublic tokens: Token[];\r\n\tpublic hasUrlParams: boolean;\r\n\tpublic hasSpatParam: boolean;\r\n\tpublic hasMatrixParams: boolean;\r\n\tpublic hasQueryParams: boolean;\r\n\tpublic options: InternalPathOptions;\r\n\tpublic spatParams: string[];\r\n\tpublic urlParams: string[];\r\n\tpublic queryParams: string[];\r\n\tpublic params: string[];\r\n\tpublic source: string;\r\n\r\n\tconstructor(path: string, options?: PathOptions) {\r\n\t\tif (!path) {\r\n\t\t\tthrow new Error(\"Missing path in Path constructor\");\r\n\t\t}\r\n\t\tthis.path = path;\r\n\t\tthis.options = {\r\n\t\t\t...defaultOptions,\r\n\t\t\t...options,\r\n\t\t};\r\n\t\tthis.tokens = tokenise(path);\r\n\r\n\t\tthis.hasUrlParams =\r\n\t\t\tthis.tokens.filter((t) => /^url-parameter/.test(t.type)).length > 0;\r\n\t\tthis.hasSpatParam =\r\n\t\t\tthis.tokens.filter((t) => /splat$/.test(t.type)).length > 0;\r\n\t\tthis.hasMatrixParams =\r\n\t\t\tthis.tokens.filter((t) => /matrix$/.test(t.type)).length > 0;\r\n\t\tthis.hasQueryParams =\r\n\t\t\tthis.tokens.filter((t) => /^query-parameter/.test(t.type)).length > 0;\r\n\t\t// Extract named parameters from tokens\r\n\t\tthis.spatParams = this.getParams(\"url-parameter-splat\");\r\n\t\tthis.urlParams = this.getParams(/^url-parameter/);\r\n\t\t// Query params\r\n\t\tthis.queryParams = this.getParams(\"query-parameter\");\r\n\t\t// All params\r\n\t\tthis.params = this.urlParams.concat(this.queryParams);\r\n\t\t// Check if hasQueryParams\r\n\t\t// Regular expressions for url part only (full and partial match)\r\n\t\tthis.source = this.tokens\r\n\t\t\t.filter((t) => t.regex !== undefined)\r\n\t\t\t.map((t) => t.regex!.source)\r\n\t\t\t.join(\"\");\r\n\t}\r\n\r\n\tpublic isQueryParam(name: string): boolean {\r\n\t\treturn this.queryParams.indexOf(name) !== -1;\r\n\t}\r\n\r\n\tpublic isSpatParam(name: string): boolean {\r\n\t\treturn this.spatParams.indexOf(name) !== -1;\r\n\t}\r\n\r\n\tpublic test(path: string, opts?: PathTestOptions): TestMatch<T> {\r\n\t\tconst options = {\r\n\t\t\tcaseSensitive: false,\r\n\t\t\tstrictTrailingSlash: false,\r\n\t\t\t...this.options,\r\n\t\t\t...opts,\r\n\t\t} as const;\r\n\t\t// trailingSlash: falsy => non optional, truthy => optional\r\n\t\tconst source = optTrailingSlash(this.source, options.strictTrailingSlash);\r\n\t\t// Check if exact match\r\n\t\tconst match = this.urlTest(\r\n\t\t\tpath,\r\n\t\t\tsource + (this.hasQueryParams ? \"(\\\\?.*$|$)\" : \"$\"),\r\n\t\t\toptions.caseSensitive,\r\n\t\t\toptions.urlParamsEncoding,\r\n\t\t);\r\n\t\t// If no match, or no query params, no need to go further\r\n\t\tif (!match || !this.hasQueryParams) {\r\n\t\t\treturn match;\r\n\t\t}\r\n\t\t// Extract query params\r\n\t\tconst queryParams = parseQueryParams(path, options.queryParams);\r\n\t\tconst unexpectedQueryParams = Object.keys(queryParams).filter(\r\n\t\t\t(p) => !this.isQueryParam(p),\r\n\t\t);\r\n\r\n\t\tif (unexpectedQueryParams.length === 0) {\r\n\t\t\t// Extend url match\r\n\t\t\tObject.keys(queryParams).forEach(\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t(p) => (match[p] = (queryParams as any)[p]),\r\n\t\t\t);\r\n\r\n\t\t\treturn match;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic partialTest(\r\n\t\tpath: string,\r\n\t\topts?: PathPartialTestOptions,\r\n\t): TestMatch<T> {\r\n\t\tconst options = {\r\n\t\t\tcaseSensitive: false,\r\n\t\t\tdelimited: true,\r\n\t\t\t...this.options,\r\n\t\t\t...opts,\r\n\t\t} as const;\r\n\t\t// Check if partial match (start of given path matches regex)\r\n\t\t// trailingSlash: falsy => non optional, truthy => optional\r\n\t\tconst source = upToDelimiter(this.source, options.delimited);\r\n\t\tconst match = this.urlTest(\r\n\t\t\tpath,\r\n\t\t\tsource,\r\n\t\t\toptions.caseSensitive,\r\n\t\t\toptions.urlParamsEncoding,\r\n\t\t);\r\n\r\n\t\tif (!match) {\r\n\t\t\treturn match;\r\n\t\t}\r\n\r\n\t\tif (!this.hasQueryParams) {\r\n\t\t\treturn match;\r\n\t\t}\r\n\r\n\t\tconst queryParams = parseQueryParams(path, options.queryParams);\r\n\r\n\t\tObject.keys(queryParams)\r\n\t\t\t.filter((p) => this.isQueryParam(p))\r\n\t\t\t.forEach((p) => appendQueryParam(match, p, (queryParams as any)[p]));\r\n\r\n\t\treturn match;\r\n\t}\r\n\r\n\tpublic build(params: T = {} as T, opts?: PathBuildOptions): string {\r\n\t\tconst options = {\r\n\t\t\tignoreConstraints: false,\r\n\t\t\tignoreSearch: false,\r\n\t\t\tqueryParams: {},\r\n\t\t\t...this.options,\r\n\t\t\t...opts,\r\n\t\t} as const;\r\n\t\tconst encodedUrlParams = Object.keys(params)\r\n\t\t\t.filter((p) => !this.isQueryParam(p))\r\n\t\t\t.reduce<Record<string, any>>((acc, key) => {\r\n\t\t\t\tif (!exists(params[key])) {\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst val = params[key];\r\n\t\t\t\tconst isSpatParam = this.isSpatParam(key);\r\n\r\n\t\t\t\tif (typeof val === \"boolean\") {\r\n\t\t\t\t\tacc[key] = val;\r\n\t\t\t\t} else if (Array.isArray(val)) {\r\n\t\t\t\t\tacc[key] = val.map((v) =>\r\n\t\t\t\t\t\tencodeParam(v, options.urlParamsEncoding, isSpatParam),\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tacc[key] = encodeParam(val, options.urlParamsEncoding, isSpatParam);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn acc;\r\n\t\t\t}, {});\r\n\r\n\t\t// Check all params are provided (not search parameters which are optional)\r\n\t\tif (this.urlParams.some((p) => !exists(params[p]))) {\r\n\t\t\tconst missingParameters = this.urlParams.filter(\r\n\t\t\t\t(p) => !exists(params[p]),\r\n\t\t\t);\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Cannot build path: '${this.path}' requires missing parameters { ${missingParameters.join(\", \")} }`,\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Check constraints\r\n\t\tif (!options.ignoreConstraints) {\r\n\t\t\tconst constraintsPassed = this.tokens\r\n\t\t\t\t.filter((t) => /^url-parameter/.test(t.type) && !/-splat$/.test(t.type))\r\n\t\t\t\t.every((t) =>\r\n\t\t\t\t\tnew RegExp(`^${defaultOrConstrained(t.otherVal[0])}$`).test(\r\n\t\t\t\t\t\tencodedUrlParams[t.val],\r\n\t\t\t\t\t),\r\n\t\t\t\t);\r\n\r\n\t\t\tif (!constraintsPassed) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t`Some parameters of '${this.path}' are of invalid format`,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst base = this.tokens\r\n\t\t\t.filter((t) => /^query-parameter/.test(t.type) === false)\r\n\t\t\t.map((t) => {\r\n\t\t\t\tif (t.type === \"url-parameter-matrix\") {\r\n\t\t\t\t\treturn `;${t.val}=${encodedUrlParams[t.val[0]]}`;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn /^url-parameter/.test(t.type)\r\n\t\t\t\t\t? encodedUrlParams[t.val[0]]\r\n\t\t\t\t\t: t.match;\r\n\t\t\t})\r\n\t\t\t.join(\"\");\r\n\r\n\t\tif (options.ignoreSearch) {\r\n\t\t\treturn base;\r\n\t\t}\r\n\r\n\t\tconst searchParams = this.queryParams\r\n\t\t\t.filter((p) => Object.keys(params).indexOf(p) !== -1)\r\n\t\t\t.reduce<Record<string, any>>((sparams, paramName) => {\r\n\t\t\t\tsparams[paramName] = params[paramName];\r\n\t\t\t\treturn sparams;\r\n\t\t\t}, {});\r\n\t\tconst searchPart = buildQueryParams(searchParams, options.queryParams);\r\n\r\n\t\treturn searchPart ? `${base}?${searchPart}` : base;\r\n\t}\r\n\r\n\tprivate getParams(type: string | RegExp): string[] {\r\n\t\tconst predicate =\r\n\t\t\ttype instanceof RegExp\r\n\t\t\t\t? (t: Token) => type.test(t.type)\r\n\t\t\t\t: (t: Token) => t.type === type;\r\n\r\n\t\treturn this.tokens.filter(predicate).map((t) => t.val[0]);\r\n\t}\r\n\r\n\tprivate urlTest(\r\n\t\tpath: string,\r\n\t\tsource: string,\r\n\t\tcaseSensitive: boolean,\r\n\t\turlParamsEncoding: URLParamsEncodingType,\r\n\t): TestMatch<T> {\r\n\t\tconst regex = new RegExp(`^${source}`, caseSensitive ? \"\" : \"i\");\r\n\t\tconst match = path.match(regex);\r\n\t\tif (!match) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (!this.urlParams.length) {\r\n\t\t\treturn {} as T;\r\n\t\t}\r\n\t\t// Reduce named params to key-value pairs\r\n\t\treturn match\r\n\t\t\t.slice(1, this.urlParams.length + 1)\r\n\t\t\t.reduce<Record<string, any>>((params, m, i) => {\r\n\t\t\t\tparams[this.urlParams[i]] = decodeParam(m, urlParamsEncoding);\r\n\t\t\t\treturn params;\r\n\t\t\t}, {}) as T;\r\n\t}\r\n}\r\n\r\nexport default Path;\r\n", "/*\n * Dexie.js - a minimalistic wrapper for IndexedDB\n * ===============================================\n *\n * By David Fahlander, david.fahlander@gmail.com\n *\n * Version 4.0.8, Wed Jul 10 2024\n *\n * https://dexie.org\n *\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\n */\n \nconst _global = typeof globalThis !== 'undefined' ? globalThis :\n    typeof self !== 'undefined' ? self :\n        typeof window !== 'undefined' ? window :\n            global;\n\nconst keys = Object.keys;\nconst isArray = Array.isArray;\nif (typeof Promise !== 'undefined' && !_global.Promise) {\n    _global.Promise = Promise;\n}\nfunction extend(obj, extension) {\n    if (typeof extension !== 'object')\n        return obj;\n    keys(extension).forEach(function (key) {\n        obj[key] = extension[key];\n    });\n    return obj;\n}\nconst getProto = Object.getPrototypeOf;\nconst _hasOwn = {}.hasOwnProperty;\nfunction hasOwn(obj, prop) {\n    return _hasOwn.call(obj, prop);\n}\nfunction props(proto, extension) {\n    if (typeof extension === 'function')\n        extension = extension(getProto(proto));\n    (typeof Reflect === \"undefined\" ? keys : Reflect.ownKeys)(extension).forEach(key => {\n        setProp(proto, key, extension[key]);\n    });\n}\nconst defineProperty = Object.defineProperty;\nfunction setProp(obj, prop, functionOrGetSet, options) {\n    defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, \"get\") && typeof functionOrGetSet.get === 'function' ?\n        { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } :\n        { value: functionOrGetSet, configurable: true, writable: true }, options));\n}\nfunction derive(Child) {\n    return {\n        from: function (Parent) {\n            Child.prototype = Object.create(Parent.prototype);\n            setProp(Child.prototype, \"constructor\", Child);\n            return {\n                extend: props.bind(null, Child.prototype)\n            };\n        }\n    };\n}\nconst getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nfunction getPropertyDescriptor(obj, prop) {\n    const pd = getOwnPropertyDescriptor(obj, prop);\n    let proto;\n    return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);\n}\nconst _slice = [].slice;\nfunction slice(args, start, end) {\n    return _slice.call(args, start, end);\n}\nfunction override(origFunc, overridedFactory) {\n    return overridedFactory(origFunc);\n}\nfunction assert(b) {\n    if (!b)\n        throw new Error(\"Assertion Failed\");\n}\nfunction asap$1(fn) {\n    if (_global.setImmediate)\n        setImmediate(fn);\n    else\n        setTimeout(fn, 0);\n}\nfunction arrayToObject(array, extractor) {\n    return array.reduce((result, item, i) => {\n        var nameAndValue = extractor(item, i);\n        if (nameAndValue)\n            result[nameAndValue[0]] = nameAndValue[1];\n        return result;\n    }, {});\n}\nfunction getByKeyPath(obj, keyPath) {\n    if (typeof keyPath === 'string' && hasOwn(obj, keyPath))\n        return obj[keyPath];\n    if (!keyPath)\n        return obj;\n    if (typeof keyPath !== 'string') {\n        var rv = [];\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\n            var val = getByKeyPath(obj, keyPath[i]);\n            rv.push(val);\n        }\n        return rv;\n    }\n    var period = keyPath.indexOf('.');\n    if (period !== -1) {\n        var innerObj = obj[keyPath.substr(0, period)];\n        return innerObj == null ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));\n    }\n    return undefined;\n}\nfunction setByKeyPath(obj, keyPath, value) {\n    if (!obj || keyPath === undefined)\n        return;\n    if ('isFrozen' in Object && Object.isFrozen(obj))\n        return;\n    if (typeof keyPath !== 'string' && 'length' in keyPath) {\n        assert(typeof value !== 'string' && 'length' in value);\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\n            setByKeyPath(obj, keyPath[i], value[i]);\n        }\n    }\n    else {\n        var period = keyPath.indexOf('.');\n        if (period !== -1) {\n            var currentKeyPath = keyPath.substr(0, period);\n            var remainingKeyPath = keyPath.substr(period + 1);\n            if (remainingKeyPath === \"\")\n                if (value === undefined) {\n                    if (isArray(obj) && !isNaN(parseInt(currentKeyPath)))\n                        obj.splice(currentKeyPath, 1);\n                    else\n                        delete obj[currentKeyPath];\n                }\n                else\n                    obj[currentKeyPath] = value;\n            else {\n                var innerObj = obj[currentKeyPath];\n                if (!innerObj || !hasOwn(obj, currentKeyPath))\n                    innerObj = (obj[currentKeyPath] = {});\n                setByKeyPath(innerObj, remainingKeyPath, value);\n            }\n        }\n        else {\n            if (value === undefined) {\n                if (isArray(obj) && !isNaN(parseInt(keyPath)))\n                    obj.splice(keyPath, 1);\n                else\n                    delete obj[keyPath];\n            }\n            else\n                obj[keyPath] = value;\n        }\n    }\n}\nfunction delByKeyPath(obj, keyPath) {\n    if (typeof keyPath === 'string')\n        setByKeyPath(obj, keyPath, undefined);\n    else if ('length' in keyPath)\n        [].map.call(keyPath, function (kp) {\n            setByKeyPath(obj, kp, undefined);\n        });\n}\nfunction shallowClone(obj) {\n    var rv = {};\n    for (var m in obj) {\n        if (hasOwn(obj, m))\n            rv[m] = obj[m];\n    }\n    return rv;\n}\nconst concat = [].concat;\nfunction flatten(a) {\n    return concat.apply([], a);\n}\nconst intrinsicTypeNames = \"BigUint64Array,BigInt64Array,Array,Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey\"\n    .split(',').concat(flatten([8, 16, 32, 64].map(num => [\"Int\", \"Uint\", \"Float\"].map(t => t + num + \"Array\")))).filter(t => _global[t]);\nconst intrinsicTypes = new Set(intrinsicTypeNames.map(t => _global[t]));\nfunction cloneSimpleObjectTree(o) {\n    const rv = {};\n    for (const k in o)\n        if (hasOwn(o, k)) {\n            const v = o[k];\n            rv[k] = !v || typeof v !== 'object' || intrinsicTypes.has(v.constructor) ? v : cloneSimpleObjectTree(v);\n        }\n    return rv;\n}\nfunction objectIsEmpty(o) {\n    for (const k in o)\n        if (hasOwn(o, k))\n            return false;\n    return true;\n}\nlet circularRefs = null;\nfunction deepClone(any) {\n    circularRefs = new WeakMap();\n    const rv = innerDeepClone(any);\n    circularRefs = null;\n    return rv;\n}\nfunction innerDeepClone(x) {\n    if (!x || typeof x !== 'object')\n        return x;\n    let rv = circularRefs.get(x);\n    if (rv)\n        return rv;\n    if (isArray(x)) {\n        rv = [];\n        circularRefs.set(x, rv);\n        for (var i = 0, l = x.length; i < l; ++i) {\n            rv.push(innerDeepClone(x[i]));\n        }\n    }\n    else if (intrinsicTypes.has(x.constructor)) {\n        rv = x;\n    }\n    else {\n        const proto = getProto(x);\n        rv = proto === Object.prototype ? {} : Object.create(proto);\n        circularRefs.set(x, rv);\n        for (var prop in x) {\n            if (hasOwn(x, prop)) {\n                rv[prop] = innerDeepClone(x[prop]);\n            }\n        }\n    }\n    return rv;\n}\nconst { toString } = {};\nfunction toStringTag(o) {\n    return toString.call(o).slice(8, -1);\n}\nconst iteratorSymbol = typeof Symbol !== 'undefined' ?\n    Symbol.iterator :\n    '@@iterator';\nconst getIteratorOf = typeof iteratorSymbol === \"symbol\" ? function (x) {\n    var i;\n    return x != null && (i = x[iteratorSymbol]) && i.apply(x);\n} : function () { return null; };\nfunction delArrayItem(a, x) {\n    const i = a.indexOf(x);\n    if (i >= 0)\n        a.splice(i, 1);\n    return i >= 0;\n}\nconst NO_CHAR_ARRAY = {};\nfunction getArrayOf(arrayLike) {\n    var i, a, x, it;\n    if (arguments.length === 1) {\n        if (isArray(arrayLike))\n            return arrayLike.slice();\n        if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string')\n            return [arrayLike];\n        if ((it = getIteratorOf(arrayLike))) {\n            a = [];\n            while ((x = it.next()), !x.done)\n                a.push(x.value);\n            return a;\n        }\n        if (arrayLike == null)\n            return [arrayLike];\n        i = arrayLike.length;\n        if (typeof i === 'number') {\n            a = new Array(i);\n            while (i--)\n                a[i] = arrayLike[i];\n            return a;\n        }\n        return [arrayLike];\n    }\n    i = arguments.length;\n    a = new Array(i);\n    while (i--)\n        a[i] = arguments[i];\n    return a;\n}\nconst isAsyncFunction = typeof Symbol !== 'undefined'\n    ? (fn) => fn[Symbol.toStringTag] === 'AsyncFunction'\n    : () => false;\n\nvar dexieErrorNames = [\n    'Modify',\n    'Bulk',\n    'OpenFailed',\n    'VersionChange',\n    'Schema',\n    'Upgrade',\n    'InvalidTable',\n    'MissingAPI',\n    'NoSuchDatabase',\n    'InvalidArgument',\n    'SubTransaction',\n    'Unsupported',\n    'Internal',\n    'DatabaseClosed',\n    'PrematureCommit',\n    'ForeignAwait'\n];\nvar idbDomErrorNames = [\n    'Unknown',\n    'Constraint',\n    'Data',\n    'TransactionInactive',\n    'ReadOnly',\n    'Version',\n    'NotFound',\n    'InvalidState',\n    'InvalidAccess',\n    'Abort',\n    'Timeout',\n    'QuotaExceeded',\n    'Syntax',\n    'DataClone'\n];\nvar errorList = dexieErrorNames.concat(idbDomErrorNames);\nvar defaultTexts = {\n    VersionChanged: \"Database version changed by other database connection\",\n    DatabaseClosed: \"Database has been closed\",\n    Abort: \"Transaction aborted\",\n    TransactionInactive: \"Transaction has already completed or failed\",\n    MissingAPI: \"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb\"\n};\nfunction DexieError(name, msg) {\n    this.name = name;\n    this.message = msg;\n}\nderive(DexieError).from(Error).extend({\n    toString: function () { return this.name + \": \" + this.message; }\n});\nfunction getMultiErrorMessage(msg, failures) {\n    return msg + \". Errors: \" + Object.keys(failures)\n        .map(key => failures[key].toString())\n        .filter((v, i, s) => s.indexOf(v) === i)\n        .join('\\n');\n}\nfunction ModifyError(msg, failures, successCount, failedKeys) {\n    this.failures = failures;\n    this.failedKeys = failedKeys;\n    this.successCount = successCount;\n    this.message = getMultiErrorMessage(msg, failures);\n}\nderive(ModifyError).from(DexieError);\nfunction BulkError(msg, failures) {\n    this.name = \"BulkError\";\n    this.failures = Object.keys(failures).map(pos => failures[pos]);\n    this.failuresByPos = failures;\n    this.message = getMultiErrorMessage(msg, this.failures);\n}\nderive(BulkError).from(DexieError);\nvar errnames = errorList.reduce((obj, name) => (obj[name] = name + \"Error\", obj), {});\nconst BaseException = DexieError;\nvar exceptions = errorList.reduce((obj, name) => {\n    var fullName = name + \"Error\";\n    function DexieError(msgOrInner, inner) {\n        this.name = fullName;\n        if (!msgOrInner) {\n            this.message = defaultTexts[name] || fullName;\n            this.inner = null;\n        }\n        else if (typeof msgOrInner === 'string') {\n            this.message = `${msgOrInner}${!inner ? '' : '\\n ' + inner}`;\n            this.inner = inner || null;\n        }\n        else if (typeof msgOrInner === 'object') {\n            this.message = `${msgOrInner.name} ${msgOrInner.message}`;\n            this.inner = msgOrInner;\n        }\n    }\n    derive(DexieError).from(BaseException);\n    obj[name] = DexieError;\n    return obj;\n}, {});\nexceptions.Syntax = SyntaxError;\nexceptions.Type = TypeError;\nexceptions.Range = RangeError;\nvar exceptionMap = idbDomErrorNames.reduce((obj, name) => {\n    obj[name + \"Error\"] = exceptions[name];\n    return obj;\n}, {});\nfunction mapError(domError, message) {\n    if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])\n        return domError;\n    var rv = new exceptionMap[domError.name](message || domError.message, domError);\n    if (\"stack\" in domError) {\n        setProp(rv, \"stack\", { get: function () {\n                return this.inner.stack;\n            } });\n    }\n    return rv;\n}\nvar fullNameExceptions = errorList.reduce((obj, name) => {\n    if ([\"Syntax\", \"Type\", \"Range\"].indexOf(name) === -1)\n        obj[name + \"Error\"] = exceptions[name];\n    return obj;\n}, {});\nfullNameExceptions.ModifyError = ModifyError;\nfullNameExceptions.DexieError = DexieError;\nfullNameExceptions.BulkError = BulkError;\n\nfunction nop() { }\nfunction mirror(val) { return val; }\nfunction pureFunctionChain(f1, f2) {\n    if (f1 == null || f1 === mirror)\n        return f2;\n    return function (val) {\n        return f2(f1(val));\n    };\n}\nfunction callBoth(on1, on2) {\n    return function () {\n        on1.apply(this, arguments);\n        on2.apply(this, arguments);\n    };\n}\nfunction hookCreatingChain(f1, f2) {\n    if (f1 === nop)\n        return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res !== undefined)\n            arguments[0] = res;\n        var onsuccess = this.onsuccess,\n        onerror = this.onerror;\n        this.onsuccess = null;\n        this.onerror = null;\n        var res2 = f2.apply(this, arguments);\n        if (onsuccess)\n            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror)\n            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n        return res2 !== undefined ? res2 : res;\n    };\n}\nfunction hookDeletingChain(f1, f2) {\n    if (f1 === nop)\n        return f2;\n    return function () {\n        f1.apply(this, arguments);\n        var onsuccess = this.onsuccess,\n        onerror = this.onerror;\n        this.onsuccess = this.onerror = null;\n        f2.apply(this, arguments);\n        if (onsuccess)\n            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror)\n            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n    };\n}\nfunction hookUpdatingChain(f1, f2) {\n    if (f1 === nop)\n        return f2;\n    return function (modifications) {\n        var res = f1.apply(this, arguments);\n        extend(modifications, res);\n        var onsuccess = this.onsuccess,\n        onerror = this.onerror;\n        this.onsuccess = null;\n        this.onerror = null;\n        var res2 = f2.apply(this, arguments);\n        if (onsuccess)\n            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror)\n            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n        return res === undefined ?\n            (res2 === undefined ? undefined : res2) :\n            (extend(res, res2));\n    };\n}\nfunction reverseStoppableEventChain(f1, f2) {\n    if (f1 === nop)\n        return f2;\n    return function () {\n        if (f2.apply(this, arguments) === false)\n            return false;\n        return f1.apply(this, arguments);\n    };\n}\nfunction promisableChain(f1, f2) {\n    if (f1 === nop)\n        return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res && typeof res.then === 'function') {\n            var thiz = this, i = arguments.length, args = new Array(i);\n            while (i--)\n                args[i] = arguments[i];\n            return res.then(function () {\n                return f2.apply(thiz, args);\n            });\n        }\n        return f2.apply(this, arguments);\n    };\n}\n\nvar debug = typeof location !== 'undefined' &&\n    /^(http|https):\\/\\/(localhost|127\\.0\\.0\\.1)/.test(location.href);\nfunction setDebug(value, filter) {\n    debug = value;\n}\n\nvar INTERNAL = {};\nconst ZONE_ECHO_LIMIT = 100, [resolvedNativePromise, nativePromiseProto, resolvedGlobalPromise] = typeof Promise === 'undefined' ?\n    [] :\n    (() => {\n        let globalP = Promise.resolve();\n        if (typeof crypto === 'undefined' || !crypto.subtle)\n            return [globalP, getProto(globalP), globalP];\n        const nativeP = crypto.subtle.digest(\"SHA-512\", new Uint8Array([0]));\n        return [\n            nativeP,\n            getProto(nativeP),\n            globalP\n        ];\n    })(), nativePromiseThen = nativePromiseProto && nativePromiseProto.then;\nconst NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;\nconst patchGlobalPromise = !!resolvedGlobalPromise;\nfunction schedulePhysicalTick() {\n    queueMicrotask(physicalTick);\n}\nvar asap = function (callback, args) {\n    microtickQueue.push([callback, args]);\n    if (needsNewPhysicalTick) {\n        schedulePhysicalTick();\n        needsNewPhysicalTick = false;\n    }\n};\nvar isOutsideMicroTick = true,\nneedsNewPhysicalTick = true,\nunhandledErrors = [],\nrejectingErrors = [],\nrejectionMapper = mirror;\nvar globalPSD = {\n    id: 'global',\n    global: true,\n    ref: 0,\n    unhandleds: [],\n    onunhandled: nop,\n    pgp: false,\n    env: {},\n    finalize: nop\n};\nvar PSD = globalPSD;\nvar microtickQueue = [];\nvar numScheduledCalls = 0;\nvar tickFinalizers = [];\nfunction DexiePromise(fn) {\n    if (typeof this !== 'object')\n        throw new TypeError('Promises must be constructed via new');\n    this._listeners = [];\n    this._lib = false;\n    var psd = (this._PSD = PSD);\n    if (typeof fn !== 'function') {\n        if (fn !== INTERNAL)\n            throw new TypeError('Not a function');\n        this._state = arguments[1];\n        this._value = arguments[2];\n        if (this._state === false)\n            handleRejection(this, this._value);\n        return;\n    }\n    this._state = null;\n    this._value = null;\n    ++psd.ref;\n    executePromiseTask(this, fn);\n}\nconst thenProp = {\n    get: function () {\n        var psd = PSD, microTaskId = totalEchoes;\n        function then(onFulfilled, onRejected) {\n            var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);\n            const cleanup = possibleAwait && !decrementExpectedAwaits();\n            var rv = new DexiePromise((resolve, reject) => {\n                propagateToListener(this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait, cleanup), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait, cleanup), resolve, reject, psd));\n            });\n            if (this._consoleTask)\n                rv._consoleTask = this._consoleTask;\n            return rv;\n        }\n        then.prototype = INTERNAL;\n        return then;\n    },\n    set: function (value) {\n        setProp(this, 'then', value && value.prototype === INTERNAL ?\n            thenProp :\n            {\n                get: function () {\n                    return value;\n                },\n                set: thenProp.set\n            });\n    }\n};\nprops(DexiePromise.prototype, {\n    then: thenProp,\n    _then: function (onFulfilled, onRejected) {\n        propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));\n    },\n    catch: function (onRejected) {\n        if (arguments.length === 1)\n            return this.then(null, onRejected);\n        var type = arguments[0], handler = arguments[1];\n        return typeof type === 'function' ? this.then(null, err =>\n        err instanceof type ? handler(err) : PromiseReject(err))\n            : this.then(null, err =>\n            err && err.name === type ? handler(err) : PromiseReject(err));\n    },\n    finally: function (onFinally) {\n        return this.then(value => {\n            return DexiePromise.resolve(onFinally()).then(() => value);\n        }, err => {\n            return DexiePromise.resolve(onFinally()).then(() => PromiseReject(err));\n        });\n    },\n    timeout: function (ms, msg) {\n        return ms < Infinity ?\n            new DexiePromise((resolve, reject) => {\n                var handle = setTimeout(() => reject(new exceptions.Timeout(msg)), ms);\n                this.then(resolve, reject).finally(clearTimeout.bind(null, handle));\n            }) : this;\n    }\n});\nif (typeof Symbol !== 'undefined' && Symbol.toStringTag)\n    setProp(DexiePromise.prototype, Symbol.toStringTag, 'Dexie.Promise');\nglobalPSD.env = snapShot();\nfunction Listener(onFulfilled, onRejected, resolve, reject, zone) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n    this.resolve = resolve;\n    this.reject = reject;\n    this.psd = zone;\n}\nprops(DexiePromise, {\n    all: function () {\n        var values = getArrayOf.apply(null, arguments)\n            .map(onPossibleParallellAsync);\n        return new DexiePromise(function (resolve, reject) {\n            if (values.length === 0)\n                resolve([]);\n            var remaining = values.length;\n            values.forEach((a, i) => DexiePromise.resolve(a).then(x => {\n                values[i] = x;\n                if (!--remaining)\n                    resolve(values);\n            }, reject));\n        });\n    },\n    resolve: value => {\n        if (value instanceof DexiePromise)\n            return value;\n        if (value && typeof value.then === 'function')\n            return new DexiePromise((resolve, reject) => {\n                value.then(resolve, reject);\n            });\n        var rv = new DexiePromise(INTERNAL, true, value);\n        return rv;\n    },\n    reject: PromiseReject,\n    race: function () {\n        var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);\n        return new DexiePromise((resolve, reject) => {\n            values.map(value => DexiePromise.resolve(value).then(resolve, reject));\n        });\n    },\n    PSD: {\n        get: () => PSD,\n        set: value => PSD = value\n    },\n    totalEchoes: { get: () => totalEchoes },\n    newPSD: newScope,\n    usePSD: usePSD,\n    scheduler: {\n        get: () => asap,\n        set: value => { asap = value; }\n    },\n    rejectionMapper: {\n        get: () => rejectionMapper,\n        set: value => { rejectionMapper = value; }\n    },\n    follow: (fn, zoneProps) => {\n        return new DexiePromise((resolve, reject) => {\n            return newScope((resolve, reject) => {\n                var psd = PSD;\n                psd.unhandleds = [];\n                psd.onunhandled = reject;\n                psd.finalize = callBoth(function () {\n                    run_at_end_of_this_or_next_physical_tick(() => {\n                        this.unhandleds.length === 0 ? resolve() : reject(this.unhandleds[0]);\n                    });\n                }, psd.finalize);\n                fn();\n            }, zoneProps, resolve, reject);\n        });\n    }\n});\nif (NativePromise) {\n    if (NativePromise.allSettled)\n        setProp(DexiePromise, \"allSettled\", function () {\n            const possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);\n            return new DexiePromise(resolve => {\n                if (possiblePromises.length === 0)\n                    resolve([]);\n                let remaining = possiblePromises.length;\n                const results = new Array(remaining);\n                possiblePromises.forEach((p, i) => DexiePromise.resolve(p).then(value => results[i] = { status: \"fulfilled\", value }, reason => results[i] = { status: \"rejected\", reason })\n                    .then(() => --remaining || resolve(results)));\n            });\n        });\n    if (NativePromise.any && typeof AggregateError !== 'undefined')\n        setProp(DexiePromise, \"any\", function () {\n            const possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);\n            return new DexiePromise((resolve, reject) => {\n                if (possiblePromises.length === 0)\n                    reject(new AggregateError([]));\n                let remaining = possiblePromises.length;\n                const failures = new Array(remaining);\n                possiblePromises.forEach((p, i) => DexiePromise.resolve(p).then(value => resolve(value), failure => {\n                    failures[i] = failure;\n                    if (!--remaining)\n                        reject(new AggregateError(failures));\n                }));\n            });\n        });\n}\nfunction executePromiseTask(promise, fn) {\n    try {\n        fn(value => {\n            if (promise._state !== null)\n                return;\n            if (value === promise)\n                throw new TypeError('A promise cannot be resolved with itself.');\n            var shouldExecuteTick = promise._lib && beginMicroTickScope();\n            if (value && typeof value.then === 'function') {\n                executePromiseTask(promise, (resolve, reject) => {\n                    value instanceof DexiePromise ?\n                        value._then(resolve, reject) :\n                        value.then(resolve, reject);\n                });\n            }\n            else {\n                promise._state = true;\n                promise._value = value;\n                propagateAllListeners(promise);\n            }\n            if (shouldExecuteTick)\n                endMicroTickScope();\n        }, handleRejection.bind(null, promise));\n    }\n    catch (ex) {\n        handleRejection(promise, ex);\n    }\n}\nfunction handleRejection(promise, reason) {\n    rejectingErrors.push(reason);\n    if (promise._state !== null)\n        return;\n    var shouldExecuteTick = promise._lib && beginMicroTickScope();\n    reason = rejectionMapper(reason);\n    promise._state = false;\n    promise._value = reason;\n    addPossiblyUnhandledError(promise);\n    propagateAllListeners(promise);\n    if (shouldExecuteTick)\n        endMicroTickScope();\n}\nfunction propagateAllListeners(promise) {\n    var listeners = promise._listeners;\n    promise._listeners = [];\n    for (var i = 0, len = listeners.length; i < len; ++i) {\n        propagateToListener(promise, listeners[i]);\n    }\n    var psd = promise._PSD;\n    --psd.ref || psd.finalize();\n    if (numScheduledCalls === 0) {\n        ++numScheduledCalls;\n        asap(() => {\n            if (--numScheduledCalls === 0)\n                finalizePhysicalTick();\n        }, []);\n    }\n}\nfunction propagateToListener(promise, listener) {\n    if (promise._state === null) {\n        promise._listeners.push(listener);\n        return;\n    }\n    var cb = promise._state ? listener.onFulfilled : listener.onRejected;\n    if (cb === null) {\n        return (promise._state ? listener.resolve : listener.reject)(promise._value);\n    }\n    ++listener.psd.ref;\n    ++numScheduledCalls;\n    asap(callListener, [cb, promise, listener]);\n}\nfunction callListener(cb, promise, listener) {\n    try {\n        var ret, value = promise._value;\n        if (!promise._state && rejectingErrors.length)\n            rejectingErrors = [];\n        ret = debug && promise._consoleTask ? promise._consoleTask.run(() => cb(value)) : cb(value);\n        if (!promise._state && rejectingErrors.indexOf(value) === -1) {\n            markErrorAsHandled(promise);\n        }\n        listener.resolve(ret);\n    }\n    catch (e) {\n        listener.reject(e);\n    }\n    finally {\n        if (--numScheduledCalls === 0)\n            finalizePhysicalTick();\n        --listener.psd.ref || listener.psd.finalize();\n    }\n}\nfunction physicalTick() {\n    usePSD(globalPSD, () => {\n        beginMicroTickScope() && endMicroTickScope();\n    });\n}\nfunction beginMicroTickScope() {\n    var wasRootExec = isOutsideMicroTick;\n    isOutsideMicroTick = false;\n    needsNewPhysicalTick = false;\n    return wasRootExec;\n}\nfunction endMicroTickScope() {\n    var callbacks, i, l;\n    do {\n        while (microtickQueue.length > 0) {\n            callbacks = microtickQueue;\n            microtickQueue = [];\n            l = callbacks.length;\n            for (i = 0; i < l; ++i) {\n                var item = callbacks[i];\n                item[0].apply(null, item[1]);\n            }\n        }\n    } while (microtickQueue.length > 0);\n    isOutsideMicroTick = true;\n    needsNewPhysicalTick = true;\n}\nfunction finalizePhysicalTick() {\n    var unhandledErrs = unhandledErrors;\n    unhandledErrors = [];\n    unhandledErrs.forEach(p => {\n        p._PSD.onunhandled.call(null, p._value, p);\n    });\n    var finalizers = tickFinalizers.slice(0);\n    var i = finalizers.length;\n    while (i)\n        finalizers[--i]();\n}\nfunction run_at_end_of_this_or_next_physical_tick(fn) {\n    function finalizer() {\n        fn();\n        tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);\n    }\n    tickFinalizers.push(finalizer);\n    ++numScheduledCalls;\n    asap(() => {\n        if (--numScheduledCalls === 0)\n            finalizePhysicalTick();\n    }, []);\n}\nfunction addPossiblyUnhandledError(promise) {\n    if (!unhandledErrors.some(p => p._value === promise._value))\n        unhandledErrors.push(promise);\n}\nfunction markErrorAsHandled(promise) {\n    var i = unhandledErrors.length;\n    while (i)\n        if (unhandledErrors[--i]._value === promise._value) {\n            unhandledErrors.splice(i, 1);\n            return;\n        }\n}\nfunction PromiseReject(reason) {\n    return new DexiePromise(INTERNAL, false, reason);\n}\nfunction wrap(fn, errorCatcher) {\n    var psd = PSD;\n    return function () {\n        var wasRootExec = beginMicroTickScope(), outerScope = PSD;\n        try {\n            switchToZone(psd, true);\n            return fn.apply(this, arguments);\n        }\n        catch (e) {\n            errorCatcher && errorCatcher(e);\n        }\n        finally {\n            switchToZone(outerScope, false);\n            if (wasRootExec)\n                endMicroTickScope();\n        }\n    };\n}\nconst task = { awaits: 0, echoes: 0, id: 0 };\nvar taskCounter = 0;\nvar zoneStack = [];\nvar zoneEchoes = 0;\nvar totalEchoes = 0;\nvar zone_id_counter = 0;\nfunction newScope(fn, props, a1, a2) {\n    var parent = PSD, psd = Object.create(parent);\n    psd.parent = parent;\n    psd.ref = 0;\n    psd.global = false;\n    psd.id = ++zone_id_counter;\n    globalPSD.env;\n    psd.env = patchGlobalPromise ? {\n        Promise: DexiePromise,\n        PromiseProp: { value: DexiePromise, configurable: true, writable: true },\n        all: DexiePromise.all,\n        race: DexiePromise.race,\n        allSettled: DexiePromise.allSettled,\n        any: DexiePromise.any,\n        resolve: DexiePromise.resolve,\n        reject: DexiePromise.reject,\n    } : {};\n    if (props)\n        extend(psd, props);\n    ++parent.ref;\n    psd.finalize = function () {\n        --this.parent.ref || this.parent.finalize();\n    };\n    var rv = usePSD(psd, fn, a1, a2);\n    if (psd.ref === 0)\n        psd.finalize();\n    return rv;\n}\nfunction incrementExpectedAwaits() {\n    if (!task.id)\n        task.id = ++taskCounter;\n    ++task.awaits;\n    task.echoes += ZONE_ECHO_LIMIT;\n    return task.id;\n}\nfunction decrementExpectedAwaits() {\n    if (!task.awaits)\n        return false;\n    if (--task.awaits === 0)\n        task.id = 0;\n    task.echoes = task.awaits * ZONE_ECHO_LIMIT;\n    return true;\n}\nif (('' + nativePromiseThen).indexOf('[native code]') === -1) {\n    incrementExpectedAwaits = decrementExpectedAwaits = nop;\n}\nfunction onPossibleParallellAsync(possiblePromise) {\n    if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {\n        incrementExpectedAwaits();\n        return possiblePromise.then(x => {\n            decrementExpectedAwaits();\n            return x;\n        }, e => {\n            decrementExpectedAwaits();\n            return rejection(e);\n        });\n    }\n    return possiblePromise;\n}\nfunction zoneEnterEcho(targetZone) {\n    ++totalEchoes;\n    if (!task.echoes || --task.echoes === 0) {\n        task.echoes = task.awaits = task.id = 0;\n    }\n    zoneStack.push(PSD);\n    switchToZone(targetZone, true);\n}\nfunction zoneLeaveEcho() {\n    var zone = zoneStack[zoneStack.length - 1];\n    zoneStack.pop();\n    switchToZone(zone, false);\n}\nfunction switchToZone(targetZone, bEnteringZone) {\n    var currentZone = PSD;\n    if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {\n        queueMicrotask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);\n    }\n    if (targetZone === PSD)\n        return;\n    PSD = targetZone;\n    if (currentZone === globalPSD)\n        globalPSD.env = snapShot();\n    if (patchGlobalPromise) {\n        var GlobalPromise = globalPSD.env.Promise;\n        var targetEnv = targetZone.env;\n        if (currentZone.global || targetZone.global) {\n            Object.defineProperty(_global, 'Promise', targetEnv.PromiseProp);\n            GlobalPromise.all = targetEnv.all;\n            GlobalPromise.race = targetEnv.race;\n            GlobalPromise.resolve = targetEnv.resolve;\n            GlobalPromise.reject = targetEnv.reject;\n            if (targetEnv.allSettled)\n                GlobalPromise.allSettled = targetEnv.allSettled;\n            if (targetEnv.any)\n                GlobalPromise.any = targetEnv.any;\n        }\n    }\n}\nfunction snapShot() {\n    var GlobalPromise = _global.Promise;\n    return patchGlobalPromise ? {\n        Promise: GlobalPromise,\n        PromiseProp: Object.getOwnPropertyDescriptor(_global, \"Promise\"),\n        all: GlobalPromise.all,\n        race: GlobalPromise.race,\n        allSettled: GlobalPromise.allSettled,\n        any: GlobalPromise.any,\n        resolve: GlobalPromise.resolve,\n        reject: GlobalPromise.reject,\n    } : {};\n}\nfunction usePSD(psd, fn, a1, a2, a3) {\n    var outerScope = PSD;\n    try {\n        switchToZone(psd, true);\n        return fn(a1, a2, a3);\n    }\n    finally {\n        switchToZone(outerScope, false);\n    }\n}\nfunction nativeAwaitCompatibleWrap(fn, zone, possibleAwait, cleanup) {\n    return typeof fn !== 'function' ? fn : function () {\n        var outerZone = PSD;\n        if (possibleAwait)\n            incrementExpectedAwaits();\n        switchToZone(zone, true);\n        try {\n            return fn.apply(this, arguments);\n        }\n        finally {\n            switchToZone(outerZone, false);\n            if (cleanup)\n                queueMicrotask(decrementExpectedAwaits);\n        }\n    };\n}\nfunction execInGlobalContext(cb) {\n    if (Promise === NativePromise && task.echoes === 0) {\n        if (zoneEchoes === 0) {\n            cb();\n        }\n        else {\n            enqueueNativeMicroTask(cb);\n        }\n    }\n    else {\n        setTimeout(cb, 0);\n    }\n}\nvar rejection = DexiePromise.reject;\n\nfunction tempTransaction(db, mode, storeNames, fn) {\n    if (!db.idbdb || (!db._state.openComplete && (!PSD.letThrough && !db._vip))) {\n        if (db._state.openComplete) {\n            return rejection(new exceptions.DatabaseClosed(db._state.dbOpenError));\n        }\n        if (!db._state.isBeingOpened) {\n            if (!db._state.autoOpen)\n                return rejection(new exceptions.DatabaseClosed());\n            db.open().catch(nop);\n        }\n        return db._state.dbReadyPromise.then(() => tempTransaction(db, mode, storeNames, fn));\n    }\n    else {\n        var trans = db._createTransaction(mode, storeNames, db._dbSchema);\n        try {\n            trans.create();\n            db._state.PR1398_maxLoop = 3;\n        }\n        catch (ex) {\n            if (ex.name === errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {\n                console.warn('Dexie: Need to reopen db');\n                db.close({ disableAutoOpen: false });\n                return db.open().then(() => tempTransaction(db, mode, storeNames, fn));\n            }\n            return rejection(ex);\n        }\n        return trans._promise(mode, (resolve, reject) => {\n            return newScope(() => {\n                PSD.trans = trans;\n                return fn(resolve, reject, trans);\n            });\n        }).then(result => {\n            if (mode === 'readwrite')\n                try {\n                    trans.idbtrans.commit();\n                }\n                catch { }\n            return mode === 'readonly' ? result : trans._completion.then(() => result);\n        });\n    }\n}\n\nconst DEXIE_VERSION = '4.0.8';\nconst maxString = String.fromCharCode(65535);\nconst minKey = -Infinity;\nconst INVALID_KEY_ARGUMENT = \"Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.\";\nconst STRING_EXPECTED = \"String expected.\";\nconst connections = [];\nconst DBNAMES_DB = '__dbnames';\nconst READONLY = 'readonly';\nconst READWRITE = 'readwrite';\n\nfunction combine(filter1, filter2) {\n    return filter1 ?\n        filter2 ?\n            function () { return filter1.apply(this, arguments) && filter2.apply(this, arguments); } :\n            filter1 :\n        filter2;\n}\n\nconst AnyRange = {\n    type: 3 ,\n    lower: -Infinity,\n    lowerOpen: false,\n    upper: [[]],\n    upperOpen: false\n};\n\nfunction workaroundForUndefinedPrimKey(keyPath) {\n    return typeof keyPath === \"string\" && !/\\./.test(keyPath)\n        ? (obj) => {\n            if (obj[keyPath] === undefined && (keyPath in obj)) {\n                obj = deepClone(obj);\n                delete obj[keyPath];\n            }\n            return obj;\n        }\n        : (obj) => obj;\n}\n\nfunction Entity() {\n    throw exceptions.Type();\n}\n\nfunction cmp(a, b) {\n    try {\n        const ta = type(a);\n        const tb = type(b);\n        if (ta !== tb) {\n            if (ta === 'Array')\n                return 1;\n            if (tb === 'Array')\n                return -1;\n            if (ta === 'binary')\n                return 1;\n            if (tb === 'binary')\n                return -1;\n            if (ta === 'string')\n                return 1;\n            if (tb === 'string')\n                return -1;\n            if (ta === 'Date')\n                return 1;\n            if (tb !== 'Date')\n                return NaN;\n            return -1;\n        }\n        switch (ta) {\n            case 'number':\n            case 'Date':\n            case 'string':\n                return a > b ? 1 : a < b ? -1 : 0;\n            case 'binary': {\n                return compareUint8Arrays(getUint8Array(a), getUint8Array(b));\n            }\n            case 'Array':\n                return compareArrays(a, b);\n        }\n    }\n    catch { }\n    return NaN;\n}\nfunction compareArrays(a, b) {\n    const al = a.length;\n    const bl = b.length;\n    const l = al < bl ? al : bl;\n    for (let i = 0; i < l; ++i) {\n        const res = cmp(a[i], b[i]);\n        if (res !== 0)\n            return res;\n    }\n    return al === bl ? 0 : al < bl ? -1 : 1;\n}\nfunction compareUint8Arrays(a, b) {\n    const al = a.length;\n    const bl = b.length;\n    const l = al < bl ? al : bl;\n    for (let i = 0; i < l; ++i) {\n        if (a[i] !== b[i])\n            return a[i] < b[i] ? -1 : 1;\n    }\n    return al === bl ? 0 : al < bl ? -1 : 1;\n}\nfunction type(x) {\n    const t = typeof x;\n    if (t !== 'object')\n        return t;\n    if (ArrayBuffer.isView(x))\n        return 'binary';\n    const tsTag = toStringTag(x);\n    return tsTag === 'ArrayBuffer' ? 'binary' : tsTag;\n}\nfunction getUint8Array(a) {\n    if (a instanceof Uint8Array)\n        return a;\n    if (ArrayBuffer.isView(a))\n        return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n    return new Uint8Array(a);\n}\n\nclass Table {\n    _trans(mode, fn, writeLocked) {\n        const trans = this._tx || PSD.trans;\n        const tableName = this.name;\n        const task = debug && typeof console !== 'undefined' && console.createTask && console.createTask(`Dexie: ${mode === 'readonly' ? 'read' : 'write'} ${this.name}`);\n        function checkTableInTransaction(resolve, reject, trans) {\n            if (!trans.schema[tableName])\n                throw new exceptions.NotFound(\"Table \" + tableName + \" not part of transaction\");\n            return fn(trans.idbtrans, trans);\n        }\n        const wasRootExec = beginMicroTickScope();\n        try {\n            let p = trans && trans.db._novip === this.db._novip ?\n                trans === PSD.trans ?\n                    trans._promise(mode, checkTableInTransaction, writeLocked) :\n                    newScope(() => trans._promise(mode, checkTableInTransaction, writeLocked), { trans: trans, transless: PSD.transless || PSD }) :\n                tempTransaction(this.db, mode, [this.name], checkTableInTransaction);\n            if (task) {\n                p._consoleTask = task;\n                p = p.catch(err => {\n                    console.trace(err);\n                    return rejection(err);\n                });\n            }\n            return p;\n        }\n        finally {\n            if (wasRootExec)\n                endMicroTickScope();\n        }\n    }\n    get(keyOrCrit, cb) {\n        if (keyOrCrit && keyOrCrit.constructor === Object)\n            return this.where(keyOrCrit).first(cb);\n        if (keyOrCrit == null)\n            return rejection(new exceptions.Type(`Invalid argument to Table.get()`));\n        return this._trans('readonly', (trans) => {\n            return this.core.get({ trans, key: keyOrCrit })\n                .then(res => this.hook.reading.fire(res));\n        }).then(cb);\n    }\n    where(indexOrCrit) {\n        if (typeof indexOrCrit === 'string')\n            return new this.db.WhereClause(this, indexOrCrit);\n        if (isArray(indexOrCrit))\n            return new this.db.WhereClause(this, `[${indexOrCrit.join('+')}]`);\n        const keyPaths = keys(indexOrCrit);\n        if (keyPaths.length === 1)\n            return this\n                .where(keyPaths[0])\n                .equals(indexOrCrit[keyPaths[0]]);\n        const compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(ix => {\n            if (ix.compound &&\n                keyPaths.every(keyPath => ix.keyPath.indexOf(keyPath) >= 0)) {\n                for (let i = 0; i < keyPaths.length; ++i) {\n                    if (keyPaths.indexOf(ix.keyPath[i]) === -1)\n                        return false;\n                }\n                return true;\n            }\n            return false;\n        }).sort((a, b) => a.keyPath.length - b.keyPath.length)[0];\n        if (compoundIndex && this.db._maxKey !== maxString) {\n            const keyPathsInValidOrder = compoundIndex.keyPath.slice(0, keyPaths.length);\n            return this\n                .where(keyPathsInValidOrder)\n                .equals(keyPathsInValidOrder.map(kp => indexOrCrit[kp]));\n        }\n        if (!compoundIndex && debug)\n            console.warn(`The query ${JSON.stringify(indexOrCrit)} on ${this.name} would benefit from a ` +\n                `compound index [${keyPaths.join('+')}]`);\n        const { idxByName } = this.schema;\n        const idb = this.db._deps.indexedDB;\n        function equals(a, b) {\n            return idb.cmp(a, b) === 0;\n        }\n        const [idx, filterFunction] = keyPaths.reduce(([prevIndex, prevFilterFn], keyPath) => {\n            const index = idxByName[keyPath];\n            const value = indexOrCrit[keyPath];\n            return [\n                prevIndex || index,\n                prevIndex || !index ?\n                    combine(prevFilterFn, index && index.multi ?\n                        x => {\n                            const prop = getByKeyPath(x, keyPath);\n                            return isArray(prop) && prop.some(item => equals(value, item));\n                        } : x => equals(value, getByKeyPath(x, keyPath)))\n                    : prevFilterFn\n            ];\n        }, [null, null]);\n        return idx ?\n            this.where(idx.name).equals(indexOrCrit[idx.keyPath])\n                .filter(filterFunction) :\n            compoundIndex ?\n                this.filter(filterFunction) :\n                this.where(keyPaths).equals('');\n    }\n    filter(filterFunction) {\n        return this.toCollection().and(filterFunction);\n    }\n    count(thenShortcut) {\n        return this.toCollection().count(thenShortcut);\n    }\n    offset(offset) {\n        return this.toCollection().offset(offset);\n    }\n    limit(numRows) {\n        return this.toCollection().limit(numRows);\n    }\n    each(callback) {\n        return this.toCollection().each(callback);\n    }\n    toArray(thenShortcut) {\n        return this.toCollection().toArray(thenShortcut);\n    }\n    toCollection() {\n        return new this.db.Collection(new this.db.WhereClause(this));\n    }\n    orderBy(index) {\n        return new this.db.Collection(new this.db.WhereClause(this, isArray(index) ?\n            `[${index.join('+')}]` :\n            index));\n    }\n    reverse() {\n        return this.toCollection().reverse();\n    }\n    mapToClass(constructor) {\n        const { db, name: tableName } = this;\n        this.schema.mappedClass = constructor;\n        if (constructor.prototype instanceof Entity) {\n            constructor = class extends constructor {\n                get db() { return db; }\n                table() { return tableName; }\n            };\n        }\n        const inheritedProps = new Set();\n        for (let proto = constructor.prototype; proto; proto = getProto(proto)) {\n            Object.getOwnPropertyNames(proto).forEach(propName => inheritedProps.add(propName));\n        }\n        const readHook = (obj) => {\n            if (!obj)\n                return obj;\n            const res = Object.create(constructor.prototype);\n            for (let m in obj)\n                if (!inheritedProps.has(m))\n                    try {\n                        res[m] = obj[m];\n                    }\n                    catch (_) { }\n            return res;\n        };\n        if (this.schema.readHook) {\n            this.hook.reading.unsubscribe(this.schema.readHook);\n        }\n        this.schema.readHook = readHook;\n        this.hook(\"reading\", readHook);\n        return constructor;\n    }\n    defineClass() {\n        function Class(content) {\n            extend(this, content);\n        }\n        return this.mapToClass(Class);\n    }\n    add(obj, key) {\n        const { auto, keyPath } = this.schema.primKey;\n        let objToAdd = obj;\n        if (keyPath && auto) {\n            objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);\n        }\n        return this._trans('readwrite', trans => {\n            return this.core.mutate({ trans, type: 'add', keys: key != null ? [key] : null, values: [objToAdd] });\n        }).then(res => res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult)\n            .then(lastResult => {\n            if (keyPath) {\n                try {\n                    setByKeyPath(obj, keyPath, lastResult);\n                }\n                catch (_) { }\n            }\n            return lastResult;\n        });\n    }\n    update(keyOrObject, modifications) {\n        if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {\n            const key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);\n            if (key === undefined)\n                return rejection(new exceptions.InvalidArgument(\"Given object does not contain its primary key\"));\n            return this.where(\":id\").equals(key).modify(modifications);\n        }\n        else {\n            return this.where(\":id\").equals(keyOrObject).modify(modifications);\n        }\n    }\n    put(obj, key) {\n        const { auto, keyPath } = this.schema.primKey;\n        let objToAdd = obj;\n        if (keyPath && auto) {\n            objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);\n        }\n        return this._trans('readwrite', trans => this.core.mutate({ trans, type: 'put', values: [objToAdd], keys: key != null ? [key] : null }))\n            .then(res => res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult)\n            .then(lastResult => {\n            if (keyPath) {\n                try {\n                    setByKeyPath(obj, keyPath, lastResult);\n                }\n                catch (_) { }\n            }\n            return lastResult;\n        });\n    }\n    delete(key) {\n        return this._trans('readwrite', trans => this.core.mutate({ trans, type: 'delete', keys: [key] }))\n            .then(res => res.numFailures ? DexiePromise.reject(res.failures[0]) : undefined);\n    }\n    clear() {\n        return this._trans('readwrite', trans => this.core.mutate({ trans, type: 'deleteRange', range: AnyRange }))\n            .then(res => res.numFailures ? DexiePromise.reject(res.failures[0]) : undefined);\n    }\n    bulkGet(keys) {\n        return this._trans('readonly', trans => {\n            return this.core.getMany({\n                keys,\n                trans\n            }).then(result => result.map(res => this.hook.reading.fire(res)));\n        });\n    }\n    bulkAdd(objects, keysOrOptions, options) {\n        const keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;\n        options = options || (keys ? undefined : keysOrOptions);\n        const wantResults = options ? options.allKeys : undefined;\n        return this._trans('readwrite', trans => {\n            const { auto, keyPath } = this.schema.primKey;\n            if (keyPath && keys)\n                throw new exceptions.InvalidArgument(\"bulkAdd(): keys argument invalid on tables with inbound keys\");\n            if (keys && keys.length !== objects.length)\n                throw new exceptions.InvalidArgument(\"Arguments objects and keys must have the same length\");\n            const numObjects = objects.length;\n            let objectsToAdd = keyPath && auto ?\n                objects.map(workaroundForUndefinedPrimKey(keyPath)) :\n                objects;\n            return this.core.mutate({ trans, type: 'add', keys: keys, values: objectsToAdd, wantResults })\n                .then(({ numFailures, results, lastResult, failures }) => {\n                const result = wantResults ? results : lastResult;\n                if (numFailures === 0)\n                    return result;\n                throw new BulkError(`${this.name}.bulkAdd(): ${numFailures} of ${numObjects} operations failed`, failures);\n            });\n        });\n    }\n    bulkPut(objects, keysOrOptions, options) {\n        const keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;\n        options = options || (keys ? undefined : keysOrOptions);\n        const wantResults = options ? options.allKeys : undefined;\n        return this._trans('readwrite', trans => {\n            const { auto, keyPath } = this.schema.primKey;\n            if (keyPath && keys)\n                throw new exceptions.InvalidArgument(\"bulkPut(): keys argument invalid on tables with inbound keys\");\n            if (keys && keys.length !== objects.length)\n                throw new exceptions.InvalidArgument(\"Arguments objects and keys must have the same length\");\n            const numObjects = objects.length;\n            let objectsToPut = keyPath && auto ?\n                objects.map(workaroundForUndefinedPrimKey(keyPath)) :\n                objects;\n            return this.core.mutate({ trans, type: 'put', keys: keys, values: objectsToPut, wantResults })\n                .then(({ numFailures, results, lastResult, failures }) => {\n                const result = wantResults ? results : lastResult;\n                if (numFailures === 0)\n                    return result;\n                throw new BulkError(`${this.name}.bulkPut(): ${numFailures} of ${numObjects} operations failed`, failures);\n            });\n        });\n    }\n    bulkUpdate(keysAndChanges) {\n        const coreTable = this.core;\n        const keys = keysAndChanges.map((entry) => entry.key);\n        const changeSpecs = keysAndChanges.map((entry) => entry.changes);\n        const offsetMap = [];\n        return this._trans('readwrite', (trans) => {\n            return coreTable.getMany({ trans, keys, cache: 'clone' }).then((objs) => {\n                const resultKeys = [];\n                const resultObjs = [];\n                keysAndChanges.forEach(({ key, changes }, idx) => {\n                    const obj = objs[idx];\n                    if (obj) {\n                        for (const keyPath of Object.keys(changes)) {\n                            const value = changes[keyPath];\n                            if (keyPath === this.schema.primKey.keyPath) {\n                                if (cmp(value, key) !== 0) {\n                                    throw new exceptions.Constraint(`Cannot update primary key in bulkUpdate()`);\n                                }\n                            }\n                            else {\n                                setByKeyPath(obj, keyPath, value);\n                            }\n                        }\n                        offsetMap.push(idx);\n                        resultKeys.push(key);\n                        resultObjs.push(obj);\n                    }\n                });\n                const numEntries = resultKeys.length;\n                return coreTable\n                    .mutate({\n                    trans,\n                    type: 'put',\n                    keys: resultKeys,\n                    values: resultObjs,\n                    updates: {\n                        keys,\n                        changeSpecs\n                    }\n                })\n                    .then(({ numFailures, failures }) => {\n                    if (numFailures === 0)\n                        return numEntries;\n                    for (const offset of Object.keys(failures)) {\n                        const mappedOffset = offsetMap[Number(offset)];\n                        if (mappedOffset != null) {\n                            const failure = failures[offset];\n                            delete failures[offset];\n                            failures[mappedOffset] = failure;\n                        }\n                    }\n                    throw new BulkError(`${this.name}.bulkUpdate(): ${numFailures} of ${numEntries} operations failed`, failures);\n                });\n            });\n        });\n    }\n    bulkDelete(keys) {\n        const numKeys = keys.length;\n        return this._trans('readwrite', trans => {\n            return this.core.mutate({ trans, type: 'delete', keys: keys });\n        }).then(({ numFailures, lastResult, failures }) => {\n            if (numFailures === 0)\n                return lastResult;\n            throw new BulkError(`${this.name}.bulkDelete(): ${numFailures} of ${numKeys} operations failed`, failures);\n        });\n    }\n}\n\nfunction Events(ctx) {\n    var evs = {};\n    var rv = function (eventName, subscriber) {\n        if (subscriber) {\n            var i = arguments.length, args = new Array(i - 1);\n            while (--i)\n                args[i - 1] = arguments[i];\n            evs[eventName].subscribe.apply(null, args);\n            return ctx;\n        }\n        else if (typeof (eventName) === 'string') {\n            return evs[eventName];\n        }\n    };\n    rv.addEventType = add;\n    for (var i = 1, l = arguments.length; i < l; ++i) {\n        add(arguments[i]);\n    }\n    return rv;\n    function add(eventName, chainFunction, defaultFunction) {\n        if (typeof eventName === 'object')\n            return addConfiguredEvents(eventName);\n        if (!chainFunction)\n            chainFunction = reverseStoppableEventChain;\n        if (!defaultFunction)\n            defaultFunction = nop;\n        var context = {\n            subscribers: [],\n            fire: defaultFunction,\n            subscribe: function (cb) {\n                if (context.subscribers.indexOf(cb) === -1) {\n                    context.subscribers.push(cb);\n                    context.fire = chainFunction(context.fire, cb);\n                }\n            },\n            unsubscribe: function (cb) {\n                context.subscribers = context.subscribers.filter(function (fn) { return fn !== cb; });\n                context.fire = context.subscribers.reduce(chainFunction, defaultFunction);\n            }\n        };\n        evs[eventName] = rv[eventName] = context;\n        return context;\n    }\n    function addConfiguredEvents(cfg) {\n        keys(cfg).forEach(function (eventName) {\n            var args = cfg[eventName];\n            if (isArray(args)) {\n                add(eventName, cfg[eventName][0], cfg[eventName][1]);\n            }\n            else if (args === 'asap') {\n                var context = add(eventName, mirror, function fire() {\n                    var i = arguments.length, args = new Array(i);\n                    while (i--)\n                        args[i] = arguments[i];\n                    context.subscribers.forEach(function (fn) {\n                        asap$1(function fireEvent() {\n                            fn.apply(null, args);\n                        });\n                    });\n                });\n            }\n            else\n                throw new exceptions.InvalidArgument(\"Invalid event config\");\n        });\n    }\n}\n\nfunction makeClassConstructor(prototype, constructor) {\n    derive(constructor).from({ prototype });\n    return constructor;\n}\n\nfunction createTableConstructor(db) {\n    return makeClassConstructor(Table.prototype, function Table(name, tableSchema, trans) {\n        this.db = db;\n        this._tx = trans;\n        this.name = name;\n        this.schema = tableSchema;\n        this.hook = db._allTables[name] ? db._allTables[name].hook : Events(null, {\n            \"creating\": [hookCreatingChain, nop],\n            \"reading\": [pureFunctionChain, mirror],\n            \"updating\": [hookUpdatingChain, nop],\n            \"deleting\": [hookDeletingChain, nop]\n        });\n    });\n}\n\nfunction isPlainKeyRange(ctx, ignoreLimitFilter) {\n    return !(ctx.filter || ctx.algorithm || ctx.or) &&\n        (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);\n}\nfunction addFilter(ctx, fn) {\n    ctx.filter = combine(ctx.filter, fn);\n}\nfunction addReplayFilter(ctx, factory, isLimitFilter) {\n    var curr = ctx.replayFilter;\n    ctx.replayFilter = curr ? () => combine(curr(), factory()) : factory;\n    ctx.justLimit = isLimitFilter && !curr;\n}\nfunction addMatchFilter(ctx, fn) {\n    ctx.isMatch = combine(ctx.isMatch, fn);\n}\nfunction getIndexOrStore(ctx, coreSchema) {\n    if (ctx.isPrimKey)\n        return coreSchema.primaryKey;\n    const index = coreSchema.getIndexByKeyPath(ctx.index);\n    if (!index)\n        throw new exceptions.Schema(\"KeyPath \" + ctx.index + \" on object store \" + coreSchema.name + \" is not indexed\");\n    return index;\n}\nfunction openCursor(ctx, coreTable, trans) {\n    const index = getIndexOrStore(ctx, coreTable.schema);\n    return coreTable.openCursor({\n        trans,\n        values: !ctx.keysOnly,\n        reverse: ctx.dir === 'prev',\n        unique: !!ctx.unique,\n        query: {\n            index,\n            range: ctx.range\n        }\n    });\n}\nfunction iter(ctx, fn, coreTrans, coreTable) {\n    const filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;\n    if (!ctx.or) {\n        return iterate(openCursor(ctx, coreTable, coreTrans), combine(ctx.algorithm, filter), fn, !ctx.keysOnly && ctx.valueMapper);\n    }\n    else {\n        const set = {};\n        const union = (item, cursor, advance) => {\n            if (!filter || filter(cursor, advance, result => cursor.stop(result), err => cursor.fail(err))) {\n                var primaryKey = cursor.primaryKey;\n                var key = '' + primaryKey;\n                if (key === '[object ArrayBuffer]')\n                    key = '' + new Uint8Array(primaryKey);\n                if (!hasOwn(set, key)) {\n                    set[key] = true;\n                    fn(item, cursor, advance);\n                }\n            }\n        };\n        return Promise.all([\n            ctx.or._iterate(union, coreTrans),\n            iterate(openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)\n        ]);\n    }\n}\nfunction iterate(cursorPromise, filter, fn, valueMapper) {\n    var mappedFn = valueMapper ? (x, c, a) => fn(valueMapper(x), c, a) : fn;\n    var wrappedFn = wrap(mappedFn);\n    return cursorPromise.then(cursor => {\n        if (cursor) {\n            return cursor.start(() => {\n                var c = () => cursor.continue();\n                if (!filter || filter(cursor, advancer => c = advancer, val => { cursor.stop(val); c = nop; }, e => { cursor.fail(e); c = nop; }))\n                    wrappedFn(cursor.value, cursor, advancer => c = advancer);\n                c();\n            });\n        }\n    });\n}\n\nconst PropModSymbol = Symbol();\nclass PropModification {\n    execute(value) {\n        if (this.add !== undefined) {\n            const term = this.add;\n            if (isArray(term)) {\n                return [...(isArray(value) ? value : []), ...term].sort();\n            }\n            if (typeof term === 'number')\n                return (Number(value) || 0) + term;\n            if (typeof term === 'bigint') {\n                try {\n                    return BigInt(value) + term;\n                }\n                catch {\n                    return BigInt(0) + term;\n                }\n            }\n            throw new TypeError(`Invalid term ${term}`);\n        }\n        if (this.remove !== undefined) {\n            const subtrahend = this.remove;\n            if (isArray(subtrahend)) {\n                return isArray(value) ? value.filter(item => !subtrahend.includes(item)).sort() : [];\n            }\n            if (typeof subtrahend === 'number')\n                return Number(value) - subtrahend;\n            if (typeof subtrahend === 'bigint') {\n                try {\n                    return BigInt(value) - subtrahend;\n                }\n                catch {\n                    return BigInt(0) - subtrahend;\n                }\n            }\n            throw new TypeError(`Invalid subtrahend ${subtrahend}`);\n        }\n        const prefixToReplace = this.replacePrefix?.[0];\n        if (prefixToReplace && typeof value === 'string' && value.startsWith(prefixToReplace)) {\n            return this.replacePrefix[1] + value.substring(prefixToReplace.length);\n        }\n        return value;\n    }\n    constructor(spec) {\n        Object.assign(this, spec);\n    }\n}\n\nclass Collection {\n    _read(fn, cb) {\n        var ctx = this._ctx;\n        return ctx.error ?\n            ctx.table._trans(null, rejection.bind(null, ctx.error)) :\n            ctx.table._trans('readonly', fn).then(cb);\n    }\n    _write(fn) {\n        var ctx = this._ctx;\n        return ctx.error ?\n            ctx.table._trans(null, rejection.bind(null, ctx.error)) :\n            ctx.table._trans('readwrite', fn, \"locked\");\n    }\n    _addAlgorithm(fn) {\n        var ctx = this._ctx;\n        ctx.algorithm = combine(ctx.algorithm, fn);\n    }\n    _iterate(fn, coreTrans) {\n        return iter(this._ctx, fn, coreTrans, this._ctx.table.core);\n    }\n    clone(props) {\n        var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);\n        if (props)\n            extend(ctx, props);\n        rv._ctx = ctx;\n        return rv;\n    }\n    raw() {\n        this._ctx.valueMapper = null;\n        return this;\n    }\n    each(fn) {\n        var ctx = this._ctx;\n        return this._read(trans => iter(ctx, fn, trans, ctx.table.core));\n    }\n    count(cb) {\n        return this._read(trans => {\n            const ctx = this._ctx;\n            const coreTable = ctx.table.core;\n            if (isPlainKeyRange(ctx, true)) {\n                return coreTable.count({\n                    trans,\n                    query: {\n                        index: getIndexOrStore(ctx, coreTable.schema),\n                        range: ctx.range\n                    }\n                }).then(count => Math.min(count, ctx.limit));\n            }\n            else {\n                var count = 0;\n                return iter(ctx, () => { ++count; return false; }, trans, coreTable)\n                    .then(() => count);\n            }\n        }).then(cb);\n    }\n    sortBy(keyPath, cb) {\n        const parts = keyPath.split('.').reverse(), lastPart = parts[0], lastIndex = parts.length - 1;\n        function getval(obj, i) {\n            if (i)\n                return getval(obj[parts[i]], i - 1);\n            return obj[lastPart];\n        }\n        var order = this._ctx.dir === \"next\" ? 1 : -1;\n        function sorter(a, b) {\n            var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);\n            return aVal < bVal ? -order : aVal > bVal ? order : 0;\n        }\n        return this.toArray(function (a) {\n            return a.sort(sorter);\n        }).then(cb);\n    }\n    toArray(cb) {\n        return this._read(trans => {\n            var ctx = this._ctx;\n            if (ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\n                const { valueMapper } = ctx;\n                const index = getIndexOrStore(ctx, ctx.table.core.schema);\n                return ctx.table.core.query({\n                    trans,\n                    limit: ctx.limit,\n                    values: true,\n                    query: {\n                        index,\n                        range: ctx.range\n                    }\n                }).then(({ result }) => valueMapper ? result.map(valueMapper) : result);\n            }\n            else {\n                const a = [];\n                return iter(ctx, item => a.push(item), trans, ctx.table.core).then(() => a);\n            }\n        }, cb);\n    }\n    offset(offset) {\n        var ctx = this._ctx;\n        if (offset <= 0)\n            return this;\n        ctx.offset += offset;\n        if (isPlainKeyRange(ctx)) {\n            addReplayFilter(ctx, () => {\n                var offsetLeft = offset;\n                return (cursor, advance) => {\n                    if (offsetLeft === 0)\n                        return true;\n                    if (offsetLeft === 1) {\n                        --offsetLeft;\n                        return false;\n                    }\n                    advance(() => {\n                        cursor.advance(offsetLeft);\n                        offsetLeft = 0;\n                    });\n                    return false;\n                };\n            });\n        }\n        else {\n            addReplayFilter(ctx, () => {\n                var offsetLeft = offset;\n                return () => (--offsetLeft < 0);\n            });\n        }\n        return this;\n    }\n    limit(numRows) {\n        this._ctx.limit = Math.min(this._ctx.limit, numRows);\n        addReplayFilter(this._ctx, () => {\n            var rowsLeft = numRows;\n            return function (cursor, advance, resolve) {\n                if (--rowsLeft <= 0)\n                    advance(resolve);\n                return rowsLeft >= 0;\n            };\n        }, true);\n        return this;\n    }\n    until(filterFunction, bIncludeStopEntry) {\n        addFilter(this._ctx, function (cursor, advance, resolve) {\n            if (filterFunction(cursor.value)) {\n                advance(resolve);\n                return bIncludeStopEntry;\n            }\n            else {\n                return true;\n            }\n        });\n        return this;\n    }\n    first(cb) {\n        return this.limit(1).toArray(function (a) { return a[0]; }).then(cb);\n    }\n    last(cb) {\n        return this.reverse().first(cb);\n    }\n    filter(filterFunction) {\n        addFilter(this._ctx, function (cursor) {\n            return filterFunction(cursor.value);\n        });\n        addMatchFilter(this._ctx, filterFunction);\n        return this;\n    }\n    and(filter) {\n        return this.filter(filter);\n    }\n    or(indexName) {\n        return new this.db.WhereClause(this._ctx.table, indexName, this);\n    }\n    reverse() {\n        this._ctx.dir = (this._ctx.dir === \"prev\" ? \"next\" : \"prev\");\n        if (this._ondirectionchange)\n            this._ondirectionchange(this._ctx.dir);\n        return this;\n    }\n    desc() {\n        return this.reverse();\n    }\n    eachKey(cb) {\n        var ctx = this._ctx;\n        ctx.keysOnly = !ctx.isMatch;\n        return this.each(function (val, cursor) { cb(cursor.key, cursor); });\n    }\n    eachUniqueKey(cb) {\n        this._ctx.unique = \"unique\";\n        return this.eachKey(cb);\n    }\n    eachPrimaryKey(cb) {\n        var ctx = this._ctx;\n        ctx.keysOnly = !ctx.isMatch;\n        return this.each(function (val, cursor) { cb(cursor.primaryKey, cursor); });\n    }\n    keys(cb) {\n        var ctx = this._ctx;\n        ctx.keysOnly = !ctx.isMatch;\n        var a = [];\n        return this.each(function (item, cursor) {\n            a.push(cursor.key);\n        }).then(function () {\n            return a;\n        }).then(cb);\n    }\n    primaryKeys(cb) {\n        var ctx = this._ctx;\n        if (ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\n            return this._read(trans => {\n                var index = getIndexOrStore(ctx, ctx.table.core.schema);\n                return ctx.table.core.query({\n                    trans,\n                    values: false,\n                    limit: ctx.limit,\n                    query: {\n                        index,\n                        range: ctx.range\n                    }\n                });\n            }).then(({ result }) => result).then(cb);\n        }\n        ctx.keysOnly = !ctx.isMatch;\n        var a = [];\n        return this.each(function (item, cursor) {\n            a.push(cursor.primaryKey);\n        }).then(function () {\n            return a;\n        }).then(cb);\n    }\n    uniqueKeys(cb) {\n        this._ctx.unique = \"unique\";\n        return this.keys(cb);\n    }\n    firstKey(cb) {\n        return this.limit(1).keys(function (a) { return a[0]; }).then(cb);\n    }\n    lastKey(cb) {\n        return this.reverse().firstKey(cb);\n    }\n    distinct() {\n        var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];\n        if (!idx || !idx.multi)\n            return this;\n        var set = {};\n        addFilter(this._ctx, function (cursor) {\n            var strKey = cursor.primaryKey.toString();\n            var found = hasOwn(set, strKey);\n            set[strKey] = true;\n            return !found;\n        });\n        return this;\n    }\n    modify(changes) {\n        var ctx = this._ctx;\n        return this._write(trans => {\n            var modifyer;\n            if (typeof changes === 'function') {\n                modifyer = changes;\n            }\n            else {\n                var keyPaths = keys(changes);\n                var numKeys = keyPaths.length;\n                modifyer = function (item) {\n                    let anythingModified = false;\n                    for (let i = 0; i < numKeys; ++i) {\n                        let keyPath = keyPaths[i];\n                        let val = changes[keyPath];\n                        let origVal = getByKeyPath(item, keyPath);\n                        if (val instanceof PropModification) {\n                            setByKeyPath(item, keyPath, val.execute(origVal));\n                            anythingModified = true;\n                        }\n                        else if (origVal !== val) {\n                            setByKeyPath(item, keyPath, val);\n                            anythingModified = true;\n                        }\n                    }\n                    return anythingModified;\n                };\n            }\n            const coreTable = ctx.table.core;\n            const { outbound, extractKey } = coreTable.schema.primaryKey;\n            const limit = this.db._options.modifyChunkSize || 200;\n            const totalFailures = [];\n            let successCount = 0;\n            const failedKeys = [];\n            const applyMutateResult = (expectedCount, res) => {\n                const { failures, numFailures } = res;\n                successCount += expectedCount - numFailures;\n                for (let pos of keys(failures)) {\n                    totalFailures.push(failures[pos]);\n                }\n            };\n            return this.clone().primaryKeys().then(keys => {\n                const criteria = isPlainKeyRange(ctx) &&\n                    ctx.limit === Infinity &&\n                    (typeof changes !== 'function' || changes === deleteCallback) && {\n                    index: ctx.index,\n                    range: ctx.range\n                };\n                const nextChunk = (offset) => {\n                    const count = Math.min(limit, keys.length - offset);\n                    return coreTable.getMany({\n                        trans,\n                        keys: keys.slice(offset, offset + count),\n                        cache: \"immutable\"\n                    }).then(values => {\n                        const addValues = [];\n                        const putValues = [];\n                        const putKeys = outbound ? [] : null;\n                        const deleteKeys = [];\n                        for (let i = 0; i < count; ++i) {\n                            const origValue = values[i];\n                            const ctx = {\n                                value: deepClone(origValue),\n                                primKey: keys[offset + i]\n                            };\n                            if (modifyer.call(ctx, ctx.value, ctx) !== false) {\n                                if (ctx.value == null) {\n                                    deleteKeys.push(keys[offset + i]);\n                                }\n                                else if (!outbound && cmp(extractKey(origValue), extractKey(ctx.value)) !== 0) {\n                                    deleteKeys.push(keys[offset + i]);\n                                    addValues.push(ctx.value);\n                                }\n                                else {\n                                    putValues.push(ctx.value);\n                                    if (outbound)\n                                        putKeys.push(keys[offset + i]);\n                                }\n                            }\n                        }\n                        return Promise.resolve(addValues.length > 0 &&\n                            coreTable.mutate({ trans, type: 'add', values: addValues })\n                                .then(res => {\n                                for (let pos in res.failures) {\n                                    deleteKeys.splice(parseInt(pos), 1);\n                                }\n                                applyMutateResult(addValues.length, res);\n                            })).then(() => (putValues.length > 0 || (criteria && typeof changes === 'object')) &&\n                            coreTable.mutate({\n                                trans,\n                                type: 'put',\n                                keys: putKeys,\n                                values: putValues,\n                                criteria,\n                                changeSpec: typeof changes !== 'function'\n                                    && changes,\n                                isAdditionalChunk: offset > 0\n                            }).then(res => applyMutateResult(putValues.length, res))).then(() => (deleteKeys.length > 0 || (criteria && changes === deleteCallback)) &&\n                            coreTable.mutate({\n                                trans,\n                                type: 'delete',\n                                keys: deleteKeys,\n                                criteria,\n                                isAdditionalChunk: offset > 0\n                            }).then(res => applyMutateResult(deleteKeys.length, res))).then(() => {\n                            return keys.length > offset + count && nextChunk(offset + limit);\n                        });\n                    });\n                };\n                return nextChunk(0).then(() => {\n                    if (totalFailures.length > 0)\n                        throw new ModifyError(\"Error modifying one or more objects\", totalFailures, successCount, failedKeys);\n                    return keys.length;\n                });\n            });\n        });\n    }\n    delete() {\n        var ctx = this._ctx, range = ctx.range;\n        if (isPlainKeyRange(ctx) &&\n            (ctx.isPrimKey || range.type === 3 ))\n         {\n            return this._write(trans => {\n                const { primaryKey } = ctx.table.core.schema;\n                const coreRange = range;\n                return ctx.table.core.count({ trans, query: { index: primaryKey, range: coreRange } }).then(count => {\n                    return ctx.table.core.mutate({ trans, type: 'deleteRange', range: coreRange })\n                        .then(({ failures, lastResult, results, numFailures }) => {\n                        if (numFailures)\n                            throw new ModifyError(\"Could not delete some values\", Object.keys(failures).map(pos => failures[pos]), count - numFailures);\n                        return count - numFailures;\n                    });\n                });\n            });\n        }\n        return this.modify(deleteCallback);\n    }\n}\nconst deleteCallback = (value, ctx) => ctx.value = null;\n\nfunction createCollectionConstructor(db) {\n    return makeClassConstructor(Collection.prototype, function Collection(whereClause, keyRangeGenerator) {\n        this.db = db;\n        let keyRange = AnyRange, error = null;\n        if (keyRangeGenerator)\n            try {\n                keyRange = keyRangeGenerator();\n            }\n            catch (ex) {\n                error = ex;\n            }\n        const whereCtx = whereClause._ctx;\n        const table = whereCtx.table;\n        const readingHook = table.hook.reading.fire;\n        this._ctx = {\n            table: table,\n            index: whereCtx.index,\n            isPrimKey: (!whereCtx.index || (table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name)),\n            range: keyRange,\n            keysOnly: false,\n            dir: \"next\",\n            unique: \"\",\n            algorithm: null,\n            filter: null,\n            replayFilter: null,\n            justLimit: true,\n            isMatch: null,\n            offset: 0,\n            limit: Infinity,\n            error: error,\n            or: whereCtx.or,\n            valueMapper: readingHook !== mirror ? readingHook : null\n        };\n    });\n}\n\nfunction simpleCompare(a, b) {\n    return a < b ? -1 : a === b ? 0 : 1;\n}\nfunction simpleCompareReverse(a, b) {\n    return a > b ? -1 : a === b ? 0 : 1;\n}\n\nfunction fail(collectionOrWhereClause, err, T) {\n    var collection = collectionOrWhereClause instanceof WhereClause ?\n        new collectionOrWhereClause.Collection(collectionOrWhereClause) :\n        collectionOrWhereClause;\n    collection._ctx.error = T ? new T(err) : new TypeError(err);\n    return collection;\n}\nfunction emptyCollection(whereClause) {\n    return new whereClause.Collection(whereClause, () => rangeEqual(\"\")).limit(0);\n}\nfunction upperFactory(dir) {\n    return dir === \"next\" ?\n        (s) => s.toUpperCase() :\n        (s) => s.toLowerCase();\n}\nfunction lowerFactory(dir) {\n    return dir === \"next\" ?\n        (s) => s.toLowerCase() :\n        (s) => s.toUpperCase();\n}\nfunction nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {\n    var length = Math.min(key.length, lowerNeedle.length);\n    var llp = -1;\n    for (var i = 0; i < length; ++i) {\n        var lwrKeyChar = lowerKey[i];\n        if (lwrKeyChar !== lowerNeedle[i]) {\n            if (cmp(key[i], upperNeedle[i]) < 0)\n                return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);\n            if (cmp(key[i], lowerNeedle[i]) < 0)\n                return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);\n            if (llp >= 0)\n                return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);\n            return null;\n        }\n        if (cmp(key[i], lwrKeyChar) < 0)\n            llp = i;\n    }\n    if (length < lowerNeedle.length && dir === \"next\")\n        return key + upperNeedle.substr(key.length);\n    if (length < key.length && dir === \"prev\")\n        return key.substr(0, upperNeedle.length);\n    return (llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1));\n}\nfunction addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {\n    var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;\n    if (!needles.every(s => typeof s === 'string')) {\n        return fail(whereClause, STRING_EXPECTED);\n    }\n    function initDirection(dir) {\n        upper = upperFactory(dir);\n        lower = lowerFactory(dir);\n        compare = (dir === \"next\" ? simpleCompare : simpleCompareReverse);\n        var needleBounds = needles.map(function (needle) {\n            return { lower: lower(needle), upper: upper(needle) };\n        }).sort(function (a, b) {\n            return compare(a.lower, b.lower);\n        });\n        upperNeedles = needleBounds.map(function (nb) { return nb.upper; });\n        lowerNeedles = needleBounds.map(function (nb) { return nb.lower; });\n        direction = dir;\n        nextKeySuffix = (dir === \"next\" ? \"\" : suffix);\n    }\n    initDirection(\"next\");\n    var c = new whereClause.Collection(whereClause, () => createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix));\n    c._ondirectionchange = function (direction) {\n        initDirection(direction);\n    };\n    var firstPossibleNeedle = 0;\n    c._addAlgorithm(function (cursor, advance, resolve) {\n        var key = cursor.key;\n        if (typeof key !== 'string')\n            return false;\n        var lowerKey = lower(key);\n        if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {\n            return true;\n        }\n        else {\n            var lowestPossibleCasing = null;\n            for (var i = firstPossibleNeedle; i < needlesLen; ++i) {\n                var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);\n                if (casing === null && lowestPossibleCasing === null)\n                    firstPossibleNeedle = i + 1;\n                else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {\n                    lowestPossibleCasing = casing;\n                }\n            }\n            if (lowestPossibleCasing !== null) {\n                advance(function () { cursor.continue(lowestPossibleCasing + nextKeySuffix); });\n            }\n            else {\n                advance(resolve);\n            }\n            return false;\n        }\n    });\n    return c;\n}\nfunction createRange(lower, upper, lowerOpen, upperOpen) {\n    return {\n        type: 2 ,\n        lower,\n        upper,\n        lowerOpen,\n        upperOpen\n    };\n}\nfunction rangeEqual(value) {\n    return {\n        type: 1 ,\n        lower: value,\n        upper: value\n    };\n}\n\nclass WhereClause {\n    get Collection() {\n        return this._ctx.table.db.Collection;\n    }\n    between(lower, upper, includeLower, includeUpper) {\n        includeLower = includeLower !== false;\n        includeUpper = includeUpper === true;\n        try {\n            if ((this._cmp(lower, upper) > 0) ||\n                (this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)))\n                return emptyCollection(this);\n            return new this.Collection(this, () => createRange(lower, upper, !includeLower, !includeUpper));\n        }\n        catch (e) {\n            return fail(this, INVALID_KEY_ARGUMENT);\n        }\n    }\n    equals(value) {\n        if (value == null)\n            return fail(this, INVALID_KEY_ARGUMENT);\n        return new this.Collection(this, () => rangeEqual(value));\n    }\n    above(value) {\n        if (value == null)\n            return fail(this, INVALID_KEY_ARGUMENT);\n        return new this.Collection(this, () => createRange(value, undefined, true));\n    }\n    aboveOrEqual(value) {\n        if (value == null)\n            return fail(this, INVALID_KEY_ARGUMENT);\n        return new this.Collection(this, () => createRange(value, undefined, false));\n    }\n    below(value) {\n        if (value == null)\n            return fail(this, INVALID_KEY_ARGUMENT);\n        return new this.Collection(this, () => createRange(undefined, value, false, true));\n    }\n    belowOrEqual(value) {\n        if (value == null)\n            return fail(this, INVALID_KEY_ARGUMENT);\n        return new this.Collection(this, () => createRange(undefined, value));\n    }\n    startsWith(str) {\n        if (typeof str !== 'string')\n            return fail(this, STRING_EXPECTED);\n        return this.between(str, str + maxString, true, true);\n    }\n    startsWithIgnoreCase(str) {\n        if (str === \"\")\n            return this.startsWith(str);\n        return addIgnoreCaseAlgorithm(this, (x, a) => x.indexOf(a[0]) === 0, [str], maxString);\n    }\n    equalsIgnoreCase(str) {\n        return addIgnoreCaseAlgorithm(this, (x, a) => x === a[0], [str], \"\");\n    }\n    anyOfIgnoreCase() {\n        var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n        if (set.length === 0)\n            return emptyCollection(this);\n        return addIgnoreCaseAlgorithm(this, (x, a) => a.indexOf(x) !== -1, set, \"\");\n    }\n    startsWithAnyOfIgnoreCase() {\n        var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n        if (set.length === 0)\n            return emptyCollection(this);\n        return addIgnoreCaseAlgorithm(this, (x, a) => a.some(n => x.indexOf(n) === 0), set, maxString);\n    }\n    anyOf() {\n        const set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n        let compare = this._cmp;\n        try {\n            set.sort(compare);\n        }\n        catch (e) {\n            return fail(this, INVALID_KEY_ARGUMENT);\n        }\n        if (set.length === 0)\n            return emptyCollection(this);\n        const c = new this.Collection(this, () => createRange(set[0], set[set.length - 1]));\n        c._ondirectionchange = direction => {\n            compare = (direction === \"next\" ?\n                this._ascending :\n                this._descending);\n            set.sort(compare);\n        };\n        let i = 0;\n        c._addAlgorithm((cursor, advance, resolve) => {\n            const key = cursor.key;\n            while (compare(key, set[i]) > 0) {\n                ++i;\n                if (i === set.length) {\n                    advance(resolve);\n                    return false;\n                }\n            }\n            if (compare(key, set[i]) === 0) {\n                return true;\n            }\n            else {\n                advance(() => { cursor.continue(set[i]); });\n                return false;\n            }\n        });\n        return c;\n    }\n    notEqual(value) {\n        return this.inAnyRange([[minKey, value], [value, this.db._maxKey]], { includeLowers: false, includeUppers: false });\n    }\n    noneOf() {\n        const set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n        if (set.length === 0)\n            return new this.Collection(this);\n        try {\n            set.sort(this._ascending);\n        }\n        catch (e) {\n            return fail(this, INVALID_KEY_ARGUMENT);\n        }\n        const ranges = set.reduce((res, val) => res ?\n            res.concat([[res[res.length - 1][1], val]]) :\n            [[minKey, val]], null);\n        ranges.push([set[set.length - 1], this.db._maxKey]);\n        return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });\n    }\n    inAnyRange(ranges, options) {\n        const cmp = this._cmp, ascending = this._ascending, descending = this._descending, min = this._min, max = this._max;\n        if (ranges.length === 0)\n            return emptyCollection(this);\n        if (!ranges.every(range => range[0] !== undefined &&\n            range[1] !== undefined &&\n            ascending(range[0], range[1]) <= 0)) {\n            return fail(this, \"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower\", exceptions.InvalidArgument);\n        }\n        const includeLowers = !options || options.includeLowers !== false;\n        const includeUppers = options && options.includeUppers === true;\n        function addRange(ranges, newRange) {\n            let i = 0, l = ranges.length;\n            for (; i < l; ++i) {\n                const range = ranges[i];\n                if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {\n                    range[0] = min(range[0], newRange[0]);\n                    range[1] = max(range[1], newRange[1]);\n                    break;\n                }\n            }\n            if (i === l)\n                ranges.push(newRange);\n            return ranges;\n        }\n        let sortDirection = ascending;\n        function rangeSorter(a, b) { return sortDirection(a[0], b[0]); }\n        let set;\n        try {\n            set = ranges.reduce(addRange, []);\n            set.sort(rangeSorter);\n        }\n        catch (ex) {\n            return fail(this, INVALID_KEY_ARGUMENT);\n        }\n        let rangePos = 0;\n        const keyIsBeyondCurrentEntry = includeUppers ?\n            key => ascending(key, set[rangePos][1]) > 0 :\n            key => ascending(key, set[rangePos][1]) >= 0;\n        const keyIsBeforeCurrentEntry = includeLowers ?\n            key => descending(key, set[rangePos][0]) > 0 :\n            key => descending(key, set[rangePos][0]) >= 0;\n        function keyWithinCurrentRange(key) {\n            return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);\n        }\n        let checkKey = keyIsBeyondCurrentEntry;\n        const c = new this.Collection(this, () => createRange(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers));\n        c._ondirectionchange = direction => {\n            if (direction === \"next\") {\n                checkKey = keyIsBeyondCurrentEntry;\n                sortDirection = ascending;\n            }\n            else {\n                checkKey = keyIsBeforeCurrentEntry;\n                sortDirection = descending;\n            }\n            set.sort(rangeSorter);\n        };\n        c._addAlgorithm((cursor, advance, resolve) => {\n            var key = cursor.key;\n            while (checkKey(key)) {\n                ++rangePos;\n                if (rangePos === set.length) {\n                    advance(resolve);\n                    return false;\n                }\n            }\n            if (keyWithinCurrentRange(key)) {\n                return true;\n            }\n            else if (this._cmp(key, set[rangePos][1]) === 0 || this._cmp(key, set[rangePos][0]) === 0) {\n                return false;\n            }\n            else {\n                advance(() => {\n                    if (sortDirection === ascending)\n                        cursor.continue(set[rangePos][0]);\n                    else\n                        cursor.continue(set[rangePos][1]);\n                });\n                return false;\n            }\n        });\n        return c;\n    }\n    startsWithAnyOf() {\n        const set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n        if (!set.every(s => typeof s === 'string')) {\n            return fail(this, \"startsWithAnyOf() only works with strings\");\n        }\n        if (set.length === 0)\n            return emptyCollection(this);\n        return this.inAnyRange(set.map((str) => [str, str + maxString]));\n    }\n}\n\nfunction createWhereClauseConstructor(db) {\n    return makeClassConstructor(WhereClause.prototype, function WhereClause(table, index, orCollection) {\n        this.db = db;\n        this._ctx = {\n            table: table,\n            index: index === \":id\" ? null : index,\n            or: orCollection\n        };\n        this._cmp = this._ascending = cmp;\n        this._descending = (a, b) => cmp(b, a);\n        this._max = (a, b) => cmp(a, b) > 0 ? a : b;\n        this._min = (a, b) => cmp(a, b) < 0 ? a : b;\n        this._IDBKeyRange = db._deps.IDBKeyRange;\n        if (!this._IDBKeyRange)\n            throw new exceptions.MissingAPI();\n    });\n}\n\nfunction eventRejectHandler(reject) {\n    return wrap(function (event) {\n        preventDefault(event);\n        reject(event.target.error);\n        return false;\n    });\n}\nfunction preventDefault(event) {\n    if (event.stopPropagation)\n        event.stopPropagation();\n    if (event.preventDefault)\n        event.preventDefault();\n}\n\nconst DEXIE_STORAGE_MUTATED_EVENT_NAME = 'storagemutated';\nconst STORAGE_MUTATED_DOM_EVENT_NAME = 'x-storagemutated-1';\nconst globalEvents = Events(null, DEXIE_STORAGE_MUTATED_EVENT_NAME);\n\nclass Transaction {\n    _lock() {\n        assert(!PSD.global);\n        ++this._reculock;\n        if (this._reculock === 1 && !PSD.global)\n            PSD.lockOwnerFor = this;\n        return this;\n    }\n    _unlock() {\n        assert(!PSD.global);\n        if (--this._reculock === 0) {\n            if (!PSD.global)\n                PSD.lockOwnerFor = null;\n            while (this._blockedFuncs.length > 0 && !this._locked()) {\n                var fnAndPSD = this._blockedFuncs.shift();\n                try {\n                    usePSD(fnAndPSD[1], fnAndPSD[0]);\n                }\n                catch (e) { }\n            }\n        }\n        return this;\n    }\n    _locked() {\n        return this._reculock && PSD.lockOwnerFor !== this;\n    }\n    create(idbtrans) {\n        if (!this.mode)\n            return this;\n        const idbdb = this.db.idbdb;\n        const dbOpenError = this.db._state.dbOpenError;\n        assert(!this.idbtrans);\n        if (!idbtrans && !idbdb) {\n            switch (dbOpenError && dbOpenError.name) {\n                case \"DatabaseClosedError\":\n                    throw new exceptions.DatabaseClosed(dbOpenError);\n                case \"MissingAPIError\":\n                    throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);\n                default:\n                    throw new exceptions.OpenFailed(dbOpenError);\n            }\n        }\n        if (!this.active)\n            throw new exceptions.TransactionInactive();\n        assert(this._completion._state === null);\n        idbtrans = this.idbtrans = idbtrans ||\n            (this.db.core\n                ? this.db.core.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability })\n                : idbdb.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability }));\n        idbtrans.onerror = wrap(ev => {\n            preventDefault(ev);\n            this._reject(idbtrans.error);\n        });\n        idbtrans.onabort = wrap(ev => {\n            preventDefault(ev);\n            this.active && this._reject(new exceptions.Abort(idbtrans.error));\n            this.active = false;\n            this.on(\"abort\").fire(ev);\n        });\n        idbtrans.oncomplete = wrap(() => {\n            this.active = false;\n            this._resolve();\n            if ('mutatedParts' in idbtrans) {\n                globalEvents.storagemutated.fire(idbtrans[\"mutatedParts\"]);\n            }\n        });\n        return this;\n    }\n    _promise(mode, fn, bWriteLock) {\n        if (mode === 'readwrite' && this.mode !== 'readwrite')\n            return rejection(new exceptions.ReadOnly(\"Transaction is readonly\"));\n        if (!this.active)\n            return rejection(new exceptions.TransactionInactive());\n        if (this._locked()) {\n            return new DexiePromise((resolve, reject) => {\n                this._blockedFuncs.push([() => {\n                        this._promise(mode, fn, bWriteLock).then(resolve, reject);\n                    }, PSD]);\n            });\n        }\n        else if (bWriteLock) {\n            return newScope(() => {\n                var p = new DexiePromise((resolve, reject) => {\n                    this._lock();\n                    const rv = fn(resolve, reject, this);\n                    if (rv && rv.then)\n                        rv.then(resolve, reject);\n                });\n                p.finally(() => this._unlock());\n                p._lib = true;\n                return p;\n            });\n        }\n        else {\n            var p = new DexiePromise((resolve, reject) => {\n                var rv = fn(resolve, reject, this);\n                if (rv && rv.then)\n                    rv.then(resolve, reject);\n            });\n            p._lib = true;\n            return p;\n        }\n    }\n    _root() {\n        return this.parent ? this.parent._root() : this;\n    }\n    waitFor(promiseLike) {\n        var root = this._root();\n        const promise = DexiePromise.resolve(promiseLike);\n        if (root._waitingFor) {\n            root._waitingFor = root._waitingFor.then(() => promise);\n        }\n        else {\n            root._waitingFor = promise;\n            root._waitingQueue = [];\n            var store = root.idbtrans.objectStore(root.storeNames[0]);\n            (function spin() {\n                ++root._spinCount;\n                while (root._waitingQueue.length)\n                    (root._waitingQueue.shift())();\n                if (root._waitingFor)\n                    store.get(-Infinity).onsuccess = spin;\n            }());\n        }\n        var currentWaitPromise = root._waitingFor;\n        return new DexiePromise((resolve, reject) => {\n            promise.then(res => root._waitingQueue.push(wrap(resolve.bind(null, res))), err => root._waitingQueue.push(wrap(reject.bind(null, err)))).finally(() => {\n                if (root._waitingFor === currentWaitPromise) {\n                    root._waitingFor = null;\n                }\n            });\n        });\n    }\n    abort() {\n        if (this.active) {\n            this.active = false;\n            if (this.idbtrans)\n                this.idbtrans.abort();\n            this._reject(new exceptions.Abort());\n        }\n    }\n    table(tableName) {\n        const memoizedTables = (this._memoizedTables || (this._memoizedTables = {}));\n        if (hasOwn(memoizedTables, tableName))\n            return memoizedTables[tableName];\n        const tableSchema = this.schema[tableName];\n        if (!tableSchema) {\n            throw new exceptions.NotFound(\"Table \" + tableName + \" not part of transaction\");\n        }\n        const transactionBoundTable = new this.db.Table(tableName, tableSchema, this);\n        transactionBoundTable.core = this.db.core.table(tableName);\n        memoizedTables[tableName] = transactionBoundTable;\n        return transactionBoundTable;\n    }\n}\n\nfunction createTransactionConstructor(db) {\n    return makeClassConstructor(Transaction.prototype, function Transaction(mode, storeNames, dbschema, chromeTransactionDurability, parent) {\n        this.db = db;\n        this.mode = mode;\n        this.storeNames = storeNames;\n        this.schema = dbschema;\n        this.chromeTransactionDurability = chromeTransactionDurability;\n        this.idbtrans = null;\n        this.on = Events(this, \"complete\", \"error\", \"abort\");\n        this.parent = parent || null;\n        this.active = true;\n        this._reculock = 0;\n        this._blockedFuncs = [];\n        this._resolve = null;\n        this._reject = null;\n        this._waitingFor = null;\n        this._waitingQueue = null;\n        this._spinCount = 0;\n        this._completion = new DexiePromise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        this._completion.then(() => {\n            this.active = false;\n            this.on.complete.fire();\n        }, e => {\n            var wasActive = this.active;\n            this.active = false;\n            this.on.error.fire(e);\n            this.parent ?\n                this.parent._reject(e) :\n                wasActive && this.idbtrans && this.idbtrans.abort();\n            return rejection(e);\n        });\n    });\n}\n\nfunction createIndexSpec(name, keyPath, unique, multi, auto, compound, isPrimKey) {\n    return {\n        name,\n        keyPath,\n        unique,\n        multi,\n        auto,\n        compound,\n        src: (unique && !isPrimKey ? '&' : '') + (multi ? '*' : '') + (auto ? \"++\" : \"\") + nameFromKeyPath(keyPath)\n    };\n}\nfunction nameFromKeyPath(keyPath) {\n    return typeof keyPath === 'string' ?\n        keyPath :\n        keyPath ? ('[' + [].join.call(keyPath, '+') + ']') : \"\";\n}\n\nfunction createTableSchema(name, primKey, indexes) {\n    return {\n        name,\n        primKey,\n        indexes,\n        mappedClass: null,\n        idxByName: arrayToObject(indexes, index => [index.name, index])\n    };\n}\n\nfunction safariMultiStoreFix(storeNames) {\n    return storeNames.length === 1 ? storeNames[0] : storeNames;\n}\nlet getMaxKey = (IdbKeyRange) => {\n    try {\n        IdbKeyRange.only([[]]);\n        getMaxKey = () => [[]];\n        return [[]];\n    }\n    catch (e) {\n        getMaxKey = () => maxString;\n        return maxString;\n    }\n};\n\nfunction getKeyExtractor(keyPath) {\n    if (keyPath == null) {\n        return () => undefined;\n    }\n    else if (typeof keyPath === 'string') {\n        return getSinglePathKeyExtractor(keyPath);\n    }\n    else {\n        return obj => getByKeyPath(obj, keyPath);\n    }\n}\nfunction getSinglePathKeyExtractor(keyPath) {\n    const split = keyPath.split('.');\n    if (split.length === 1) {\n        return obj => obj[keyPath];\n    }\n    else {\n        return obj => getByKeyPath(obj, keyPath);\n    }\n}\n\nfunction arrayify(arrayLike) {\n    return [].slice.call(arrayLike);\n}\nlet _id_counter = 0;\nfunction getKeyPathAlias(keyPath) {\n    return keyPath == null ?\n        \":id\" :\n        typeof keyPath === 'string' ?\n            keyPath :\n            `[${keyPath.join('+')}]`;\n}\nfunction createDBCore(db, IdbKeyRange, tmpTrans) {\n    function extractSchema(db, trans) {\n        const tables = arrayify(db.objectStoreNames);\n        return {\n            schema: {\n                name: db.name,\n                tables: tables.map(table => trans.objectStore(table)).map(store => {\n                    const { keyPath, autoIncrement } = store;\n                    const compound = isArray(keyPath);\n                    const outbound = keyPath == null;\n                    const indexByKeyPath = {};\n                    const result = {\n                        name: store.name,\n                        primaryKey: {\n                            name: null,\n                            isPrimaryKey: true,\n                            outbound,\n                            compound,\n                            keyPath,\n                            autoIncrement,\n                            unique: true,\n                            extractKey: getKeyExtractor(keyPath)\n                        },\n                        indexes: arrayify(store.indexNames).map(indexName => store.index(indexName))\n                            .map(index => {\n                            const { name, unique, multiEntry, keyPath } = index;\n                            const compound = isArray(keyPath);\n                            const result = {\n                                name,\n                                compound,\n                                keyPath,\n                                unique,\n                                multiEntry,\n                                extractKey: getKeyExtractor(keyPath)\n                            };\n                            indexByKeyPath[getKeyPathAlias(keyPath)] = result;\n                            return result;\n                        }),\n                        getIndexByKeyPath: (keyPath) => indexByKeyPath[getKeyPathAlias(keyPath)]\n                    };\n                    indexByKeyPath[\":id\"] = result.primaryKey;\n                    if (keyPath != null) {\n                        indexByKeyPath[getKeyPathAlias(keyPath)] = result.primaryKey;\n                    }\n                    return result;\n                })\n            },\n            hasGetAll: tables.length > 0 && ('getAll' in trans.objectStore(tables[0])) &&\n                !(typeof navigator !== 'undefined' && /Safari/.test(navigator.userAgent) &&\n                    !/(Chrome\\/|Edge\\/)/.test(navigator.userAgent) &&\n                    [].concat(navigator.userAgent.match(/Safari\\/(\\d*)/))[1] < 604)\n        };\n    }\n    function makeIDBKeyRange(range) {\n        if (range.type === 3 )\n            return null;\n        if (range.type === 4 )\n            throw new Error(\"Cannot convert never type to IDBKeyRange\");\n        const { lower, upper, lowerOpen, upperOpen } = range;\n        const idbRange = lower === undefined ?\n            upper === undefined ?\n                null :\n                IdbKeyRange.upperBound(upper, !!upperOpen) :\n            upper === undefined ?\n                IdbKeyRange.lowerBound(lower, !!lowerOpen) :\n                IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);\n        return idbRange;\n    }\n    function createDbCoreTable(tableSchema) {\n        const tableName = tableSchema.name;\n        function mutate({ trans, type, keys, values, range }) {\n            return new Promise((resolve, reject) => {\n                resolve = wrap(resolve);\n                const store = trans.objectStore(tableName);\n                const outbound = store.keyPath == null;\n                const isAddOrPut = type === \"put\" || type === \"add\";\n                if (!isAddOrPut && type !== 'delete' && type !== 'deleteRange')\n                    throw new Error(\"Invalid operation type: \" + type);\n                const { length } = keys || values || { length: 1 };\n                if (keys && values && keys.length !== values.length) {\n                    throw new Error(\"Given keys array must have same length as given values array.\");\n                }\n                if (length === 0)\n                    return resolve({ numFailures: 0, failures: {}, results: [], lastResult: undefined });\n                let req;\n                const reqs = [];\n                const failures = [];\n                let numFailures = 0;\n                const errorHandler = event => {\n                    ++numFailures;\n                    preventDefault(event);\n                };\n                if (type === 'deleteRange') {\n                    if (range.type === 4 )\n                        return resolve({ numFailures, failures, results: [], lastResult: undefined });\n                    if (range.type === 3 )\n                        reqs.push(req = store.clear());\n                    else\n                        reqs.push(req = store.delete(makeIDBKeyRange(range)));\n                }\n                else {\n                    const [args1, args2] = isAddOrPut ?\n                        outbound ?\n                            [values, keys] :\n                            [values, null] :\n                        [keys, null];\n                    if (isAddOrPut) {\n                        for (let i = 0; i < length; ++i) {\n                            reqs.push(req = (args2 && args2[i] !== undefined ?\n                                store[type](args1[i], args2[i]) :\n                                store[type](args1[i])));\n                            req.onerror = errorHandler;\n                        }\n                    }\n                    else {\n                        for (let i = 0; i < length; ++i) {\n                            reqs.push(req = store[type](args1[i]));\n                            req.onerror = errorHandler;\n                        }\n                    }\n                }\n                const done = event => {\n                    const lastResult = event.target.result;\n                    reqs.forEach((req, i) => req.error != null && (failures[i] = req.error));\n                    resolve({\n                        numFailures,\n                        failures,\n                        results: type === \"delete\" ? keys : reqs.map(req => req.result),\n                        lastResult\n                    });\n                };\n                req.onerror = event => {\n                    errorHandler(event);\n                    done(event);\n                };\n                req.onsuccess = done;\n            });\n        }\n        function openCursor({ trans, values, query, reverse, unique }) {\n            return new Promise((resolve, reject) => {\n                resolve = wrap(resolve);\n                const { index, range } = query;\n                const store = trans.objectStore(tableName);\n                const source = index.isPrimaryKey ?\n                    store :\n                    store.index(index.name);\n                const direction = reverse ?\n                    unique ?\n                        \"prevunique\" :\n                        \"prev\" :\n                    unique ?\n                        \"nextunique\" :\n                        \"next\";\n                const req = values || !('openKeyCursor' in source) ?\n                    source.openCursor(makeIDBKeyRange(range), direction) :\n                    source.openKeyCursor(makeIDBKeyRange(range), direction);\n                req.onerror = eventRejectHandler(reject);\n                req.onsuccess = wrap(ev => {\n                    const cursor = req.result;\n                    if (!cursor) {\n                        resolve(null);\n                        return;\n                    }\n                    cursor.___id = ++_id_counter;\n                    cursor.done = false;\n                    const _cursorContinue = cursor.continue.bind(cursor);\n                    let _cursorContinuePrimaryKey = cursor.continuePrimaryKey;\n                    if (_cursorContinuePrimaryKey)\n                        _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor);\n                    const _cursorAdvance = cursor.advance.bind(cursor);\n                    const doThrowCursorIsNotStarted = () => { throw new Error(\"Cursor not started\"); };\n                    const doThrowCursorIsStopped = () => { throw new Error(\"Cursor not stopped\"); };\n                    cursor.trans = trans;\n                    cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsNotStarted;\n                    cursor.fail = wrap(reject);\n                    cursor.next = function () {\n                        let gotOne = 1;\n                        return this.start(() => gotOne-- ? this.continue() : this.stop()).then(() => this);\n                    };\n                    cursor.start = (callback) => {\n                        const iterationPromise = new Promise((resolveIteration, rejectIteration) => {\n                            resolveIteration = wrap(resolveIteration);\n                            req.onerror = eventRejectHandler(rejectIteration);\n                            cursor.fail = rejectIteration;\n                            cursor.stop = value => {\n                                cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsStopped;\n                                resolveIteration(value);\n                            };\n                        });\n                        const guardedCallback = () => {\n                            if (req.result) {\n                                try {\n                                    callback();\n                                }\n                                catch (err) {\n                                    cursor.fail(err);\n                                }\n                            }\n                            else {\n                                cursor.done = true;\n                                cursor.start = () => { throw new Error(\"Cursor behind last entry\"); };\n                                cursor.stop();\n                            }\n                        };\n                        req.onsuccess = wrap(ev => {\n                            req.onsuccess = guardedCallback;\n                            guardedCallback();\n                        });\n                        cursor.continue = _cursorContinue;\n                        cursor.continuePrimaryKey = _cursorContinuePrimaryKey;\n                        cursor.advance = _cursorAdvance;\n                        guardedCallback();\n                        return iterationPromise;\n                    };\n                    resolve(cursor);\n                }, reject);\n            });\n        }\n        function query(hasGetAll) {\n            return (request) => {\n                return new Promise((resolve, reject) => {\n                    resolve = wrap(resolve);\n                    const { trans, values, limit, query } = request;\n                    const nonInfinitLimit = limit === Infinity ? undefined : limit;\n                    const { index, range } = query;\n                    const store = trans.objectStore(tableName);\n                    const source = index.isPrimaryKey ? store : store.index(index.name);\n                    const idbKeyRange = makeIDBKeyRange(range);\n                    if (limit === 0)\n                        return resolve({ result: [] });\n                    if (hasGetAll) {\n                        const req = values ?\n                            source.getAll(idbKeyRange, nonInfinitLimit) :\n                            source.getAllKeys(idbKeyRange, nonInfinitLimit);\n                        req.onsuccess = event => resolve({ result: event.target.result });\n                        req.onerror = eventRejectHandler(reject);\n                    }\n                    else {\n                        let count = 0;\n                        const req = values || !('openKeyCursor' in source) ?\n                            source.openCursor(idbKeyRange) :\n                            source.openKeyCursor(idbKeyRange);\n                        const result = [];\n                        req.onsuccess = event => {\n                            const cursor = req.result;\n                            if (!cursor)\n                                return resolve({ result });\n                            result.push(values ? cursor.value : cursor.primaryKey);\n                            if (++count === limit)\n                                return resolve({ result });\n                            cursor.continue();\n                        };\n                        req.onerror = eventRejectHandler(reject);\n                    }\n                });\n            };\n        }\n        return {\n            name: tableName,\n            schema: tableSchema,\n            mutate,\n            getMany({ trans, keys }) {\n                return new Promise((resolve, reject) => {\n                    resolve = wrap(resolve);\n                    const store = trans.objectStore(tableName);\n                    const length = keys.length;\n                    const result = new Array(length);\n                    let keyCount = 0;\n                    let callbackCount = 0;\n                    let req;\n                    const successHandler = event => {\n                        const req = event.target;\n                        if ((result[req._pos] = req.result) != null)\n                            ;\n                        if (++callbackCount === keyCount)\n                            resolve(result);\n                    };\n                    const errorHandler = eventRejectHandler(reject);\n                    for (let i = 0; i < length; ++i) {\n                        const key = keys[i];\n                        if (key != null) {\n                            req = store.get(keys[i]);\n                            req._pos = i;\n                            req.onsuccess = successHandler;\n                            req.onerror = errorHandler;\n                            ++keyCount;\n                        }\n                    }\n                    if (keyCount === 0)\n                        resolve(result);\n                });\n            },\n            get({ trans, key }) {\n                return new Promise((resolve, reject) => {\n                    resolve = wrap(resolve);\n                    const store = trans.objectStore(tableName);\n                    const req = store.get(key);\n                    req.onsuccess = event => resolve(event.target.result);\n                    req.onerror = eventRejectHandler(reject);\n                });\n            },\n            query: query(hasGetAll),\n            openCursor,\n            count({ query, trans }) {\n                const { index, range } = query;\n                return new Promise((resolve, reject) => {\n                    const store = trans.objectStore(tableName);\n                    const source = index.isPrimaryKey ? store : store.index(index.name);\n                    const idbKeyRange = makeIDBKeyRange(range);\n                    const req = idbKeyRange ? source.count(idbKeyRange) : source.count();\n                    req.onsuccess = wrap(ev => resolve(ev.target.result));\n                    req.onerror = eventRejectHandler(reject);\n                });\n            }\n        };\n    }\n    const { schema, hasGetAll } = extractSchema(db, tmpTrans);\n    const tables = schema.tables.map(tableSchema => createDbCoreTable(tableSchema));\n    const tableMap = {};\n    tables.forEach(table => tableMap[table.name] = table);\n    return {\n        stack: \"dbcore\",\n        transaction: db.transaction.bind(db),\n        table(name) {\n            const result = tableMap[name];\n            if (!result)\n                throw new Error(`Table '${name}' not found`);\n            return tableMap[name];\n        },\n        MIN_KEY: -Infinity,\n        MAX_KEY: getMaxKey(IdbKeyRange),\n        schema\n    };\n}\n\nfunction createMiddlewareStack(stackImpl, middlewares) {\n    return middlewares.reduce((down, { create }) => ({ ...down, ...create(down) }), stackImpl);\n}\nfunction createMiddlewareStacks(middlewares, idbdb, { IDBKeyRange, indexedDB }, tmpTrans) {\n    const dbcore = createMiddlewareStack(createDBCore(idbdb, IDBKeyRange, tmpTrans), middlewares.dbcore);\n    return {\n        dbcore\n    };\n}\nfunction generateMiddlewareStacks(db, tmpTrans) {\n    const idbdb = tmpTrans.db;\n    const stacks = createMiddlewareStacks(db._middlewares, idbdb, db._deps, tmpTrans);\n    db.core = stacks.dbcore;\n    db.tables.forEach(table => {\n        const tableName = table.name;\n        if (db.core.schema.tables.some(tbl => tbl.name === tableName)) {\n            table.core = db.core.table(tableName);\n            if (db[tableName] instanceof db.Table) {\n                db[tableName].core = table.core;\n            }\n        }\n    });\n}\n\nfunction setApiOnPlace(db, objs, tableNames, dbschema) {\n    tableNames.forEach(tableName => {\n        const schema = dbschema[tableName];\n        objs.forEach(obj => {\n            const propDesc = getPropertyDescriptor(obj, tableName);\n            if (!propDesc || (\"value\" in propDesc && propDesc.value === undefined)) {\n                if (obj === db.Transaction.prototype || obj instanceof db.Transaction) {\n                    setProp(obj, tableName, {\n                        get() { return this.table(tableName); },\n                        set(value) {\n                            defineProperty(this, tableName, { value, writable: true, configurable: true, enumerable: true });\n                        }\n                    });\n                }\n                else {\n                    obj[tableName] = new db.Table(tableName, schema);\n                }\n            }\n        });\n    });\n}\nfunction removeTablesApi(db, objs) {\n    objs.forEach(obj => {\n        for (let key in obj) {\n            if (obj[key] instanceof db.Table)\n                delete obj[key];\n        }\n    });\n}\nfunction lowerVersionFirst(a, b) {\n    return a._cfg.version - b._cfg.version;\n}\nfunction runUpgraders(db, oldVersion, idbUpgradeTrans, reject) {\n    const globalSchema = db._dbSchema;\n    if (idbUpgradeTrans.objectStoreNames.contains('$meta') && !globalSchema.$meta) {\n        globalSchema.$meta = createTableSchema(\"$meta\", parseIndexSyntax(\"\")[0], []);\n        db._storeNames.push('$meta');\n    }\n    const trans = db._createTransaction('readwrite', db._storeNames, globalSchema);\n    trans.create(idbUpgradeTrans);\n    trans._completion.catch(reject);\n    const rejectTransaction = trans._reject.bind(trans);\n    const transless = PSD.transless || PSD;\n    newScope(() => {\n        PSD.trans = trans;\n        PSD.transless = transless;\n        if (oldVersion === 0) {\n            keys(globalSchema).forEach(tableName => {\n                createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);\n            });\n            generateMiddlewareStacks(db, idbUpgradeTrans);\n            DexiePromise.follow(() => db.on.populate.fire(trans)).catch(rejectTransaction);\n        }\n        else {\n            generateMiddlewareStacks(db, idbUpgradeTrans);\n            return getExistingVersion(db, trans, oldVersion)\n                .then(oldVersion => updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans))\n                .catch(rejectTransaction);\n        }\n    });\n}\nfunction patchCurrentVersion(db, idbUpgradeTrans) {\n    createMissingTables(db._dbSchema, idbUpgradeTrans);\n    if (idbUpgradeTrans.db.version % 10 === 0 && !idbUpgradeTrans.objectStoreNames.contains('$meta')) {\n        idbUpgradeTrans.db.createObjectStore('$meta').add(Math.ceil((idbUpgradeTrans.db.version / 10) - 1), 'version');\n    }\n    const globalSchema = buildGlobalSchema(db, db.idbdb, idbUpgradeTrans);\n    adjustToExistingIndexNames(db, db._dbSchema, idbUpgradeTrans);\n    const diff = getSchemaDiff(globalSchema, db._dbSchema);\n    for (const tableChange of diff.change) {\n        if (tableChange.change.length || tableChange.recreate) {\n            console.warn(`Unable to patch indexes of table ${tableChange.name} because it has changes on the type of index or primary key.`);\n            return;\n        }\n        const store = idbUpgradeTrans.objectStore(tableChange.name);\n        tableChange.add.forEach(idx => {\n            if (debug)\n                console.debug(`Dexie upgrade patch: Creating missing index ${tableChange.name}.${idx.src}`);\n            addIndex(store, idx);\n        });\n    }\n}\nfunction getExistingVersion(db, trans, oldVersion) {\n    if (trans.storeNames.includes('$meta')) {\n        return trans.table('$meta').get('version').then(metaVersion => {\n            return metaVersion != null ? metaVersion : oldVersion;\n        });\n    }\n    else {\n        return DexiePromise.resolve(oldVersion);\n    }\n}\nfunction updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans) {\n    const queue = [];\n    const versions = db._versions;\n    let globalSchema = db._dbSchema = buildGlobalSchema(db, db.idbdb, idbUpgradeTrans);\n    const versToRun = versions.filter(v => v._cfg.version >= oldVersion);\n    if (versToRun.length === 0) {\n        return DexiePromise.resolve();\n    }\n    versToRun.forEach(version => {\n        queue.push(() => {\n            const oldSchema = globalSchema;\n            const newSchema = version._cfg.dbschema;\n            adjustToExistingIndexNames(db, oldSchema, idbUpgradeTrans);\n            adjustToExistingIndexNames(db, newSchema, idbUpgradeTrans);\n            globalSchema = db._dbSchema = newSchema;\n            const diff = getSchemaDiff(oldSchema, newSchema);\n            diff.add.forEach(tuple => {\n                createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);\n            });\n            diff.change.forEach(change => {\n                if (change.recreate) {\n                    throw new exceptions.Upgrade(\"Not yet support for changing primary key\");\n                }\n                else {\n                    const store = idbUpgradeTrans.objectStore(change.name);\n                    change.add.forEach(idx => addIndex(store, idx));\n                    change.change.forEach(idx => {\n                        store.deleteIndex(idx.name);\n                        addIndex(store, idx);\n                    });\n                    change.del.forEach(idxName => store.deleteIndex(idxName));\n                }\n            });\n            const contentUpgrade = version._cfg.contentUpgrade;\n            if (contentUpgrade && version._cfg.version > oldVersion) {\n                generateMiddlewareStacks(db, idbUpgradeTrans);\n                trans._memoizedTables = {};\n                let upgradeSchema = shallowClone(newSchema);\n                diff.del.forEach(table => {\n                    upgradeSchema[table] = oldSchema[table];\n                });\n                removeTablesApi(db, [db.Transaction.prototype]);\n                setApiOnPlace(db, [db.Transaction.prototype], keys(upgradeSchema), upgradeSchema);\n                trans.schema = upgradeSchema;\n                const contentUpgradeIsAsync = isAsyncFunction(contentUpgrade);\n                if (contentUpgradeIsAsync) {\n                    incrementExpectedAwaits();\n                }\n                let returnValue;\n                const promiseFollowed = DexiePromise.follow(() => {\n                    returnValue = contentUpgrade(trans);\n                    if (returnValue) {\n                        if (contentUpgradeIsAsync) {\n                            var decrementor = decrementExpectedAwaits.bind(null, null);\n                            returnValue.then(decrementor, decrementor);\n                        }\n                    }\n                });\n                return (returnValue && typeof returnValue.then === 'function' ?\n                    DexiePromise.resolve(returnValue) : promiseFollowed.then(() => returnValue));\n            }\n        });\n        queue.push(idbtrans => {\n            const newSchema = version._cfg.dbschema;\n            deleteRemovedTables(newSchema, idbtrans);\n            removeTablesApi(db, [db.Transaction.prototype]);\n            setApiOnPlace(db, [db.Transaction.prototype], db._storeNames, db._dbSchema);\n            trans.schema = db._dbSchema;\n        });\n        queue.push(idbtrans => {\n            if (db.idbdb.objectStoreNames.contains('$meta')) {\n                if (Math.ceil(db.idbdb.version / 10) === version._cfg.version) {\n                    db.idbdb.deleteObjectStore('$meta');\n                    delete db._dbSchema.$meta;\n                    db._storeNames = db._storeNames.filter(name => name !== '$meta');\n                }\n                else {\n                    idbtrans.objectStore('$meta').put(version._cfg.version, 'version');\n                }\n            }\n        });\n    });\n    function runQueue() {\n        return queue.length ? DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) :\n            DexiePromise.resolve();\n    }\n    return runQueue().then(() => {\n        createMissingTables(globalSchema, idbUpgradeTrans);\n    });\n}\nfunction getSchemaDiff(oldSchema, newSchema) {\n    const diff = {\n        del: [],\n        add: [],\n        change: []\n    };\n    let table;\n    for (table in oldSchema) {\n        if (!newSchema[table])\n            diff.del.push(table);\n    }\n    for (table in newSchema) {\n        const oldDef = oldSchema[table], newDef = newSchema[table];\n        if (!oldDef) {\n            diff.add.push([table, newDef]);\n        }\n        else {\n            const change = {\n                name: table,\n                def: newDef,\n                recreate: false,\n                del: [],\n                add: [],\n                change: []\n            };\n            if ((\n            '' + (oldDef.primKey.keyPath || '')) !== ('' + (newDef.primKey.keyPath || '')) ||\n                (oldDef.primKey.auto !== newDef.primKey.auto)) {\n                change.recreate = true;\n                diff.change.push(change);\n            }\n            else {\n                const oldIndexes = oldDef.idxByName;\n                const newIndexes = newDef.idxByName;\n                let idxName;\n                for (idxName in oldIndexes) {\n                    if (!newIndexes[idxName])\n                        change.del.push(idxName);\n                }\n                for (idxName in newIndexes) {\n                    const oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];\n                    if (!oldIdx)\n                        change.add.push(newIdx);\n                    else if (oldIdx.src !== newIdx.src)\n                        change.change.push(newIdx);\n                }\n                if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {\n                    diff.change.push(change);\n                }\n            }\n        }\n    }\n    return diff;\n}\nfunction createTable(idbtrans, tableName, primKey, indexes) {\n    const store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ?\n        { keyPath: primKey.keyPath, autoIncrement: primKey.auto } :\n        { autoIncrement: primKey.auto });\n    indexes.forEach(idx => addIndex(store, idx));\n    return store;\n}\nfunction createMissingTables(newSchema, idbtrans) {\n    keys(newSchema).forEach(tableName => {\n        if (!idbtrans.db.objectStoreNames.contains(tableName)) {\n            if (debug)\n                console.debug('Dexie: Creating missing table', tableName);\n            createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);\n        }\n    });\n}\nfunction deleteRemovedTables(newSchema, idbtrans) {\n    [].slice.call(idbtrans.db.objectStoreNames).forEach(storeName => newSchema[storeName] == null && idbtrans.db.deleteObjectStore(storeName));\n}\nfunction addIndex(store, idx) {\n    store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });\n}\nfunction buildGlobalSchema(db, idbdb, tmpTrans) {\n    const globalSchema = {};\n    const dbStoreNames = slice(idbdb.objectStoreNames, 0);\n    dbStoreNames.forEach(storeName => {\n        const store = tmpTrans.objectStore(storeName);\n        let keyPath = store.keyPath;\n        const primKey = createIndexSpec(nameFromKeyPath(keyPath), keyPath || \"\", true, false, !!store.autoIncrement, keyPath && typeof keyPath !== \"string\", true);\n        const indexes = [];\n        for (let j = 0; j < store.indexNames.length; ++j) {\n            const idbindex = store.index(store.indexNames[j]);\n            keyPath = idbindex.keyPath;\n            var index = createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== \"string\", false);\n            indexes.push(index);\n        }\n        globalSchema[storeName] = createTableSchema(storeName, primKey, indexes);\n    });\n    return globalSchema;\n}\nfunction readGlobalSchema(db, idbdb, tmpTrans) {\n    db.verno = idbdb.version / 10;\n    const globalSchema = db._dbSchema = buildGlobalSchema(db, idbdb, tmpTrans);\n    db._storeNames = slice(idbdb.objectStoreNames, 0);\n    setApiOnPlace(db, [db._allTables], keys(globalSchema), globalSchema);\n}\nfunction verifyInstalledSchema(db, tmpTrans) {\n    const installedSchema = buildGlobalSchema(db, db.idbdb, tmpTrans);\n    const diff = getSchemaDiff(installedSchema, db._dbSchema);\n    return !(diff.add.length || diff.change.some(ch => ch.add.length || ch.change.length));\n}\nfunction adjustToExistingIndexNames(db, schema, idbtrans) {\n    const storeNames = idbtrans.db.objectStoreNames;\n    for (let i = 0; i < storeNames.length; ++i) {\n        const storeName = storeNames[i];\n        const store = idbtrans.objectStore(storeName);\n        db._hasGetAll = 'getAll' in store;\n        for (let j = 0; j < store.indexNames.length; ++j) {\n            const indexName = store.indexNames[j];\n            const keyPath = store.index(indexName).keyPath;\n            const dexieName = typeof keyPath === 'string' ? keyPath : \"[\" + slice(keyPath).join('+') + \"]\";\n            if (schema[storeName]) {\n                const indexSpec = schema[storeName].idxByName[dexieName];\n                if (indexSpec) {\n                    indexSpec.name = indexName;\n                    delete schema[storeName].idxByName[dexieName];\n                    schema[storeName].idxByName[indexName] = indexSpec;\n                }\n            }\n        }\n    }\n    if (typeof navigator !== 'undefined' && /Safari/.test(navigator.userAgent) &&\n        !/(Chrome\\/|Edge\\/)/.test(navigator.userAgent) &&\n        _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope &&\n        [].concat(navigator.userAgent.match(/Safari\\/(\\d*)/))[1] < 604) {\n        db._hasGetAll = false;\n    }\n}\nfunction parseIndexSyntax(primKeyAndIndexes) {\n    return primKeyAndIndexes.split(',').map((index, indexNum) => {\n        index = index.trim();\n        const name = index.replace(/([&*]|\\+\\+)/g, \"\");\n        const keyPath = /^\\[/.test(name) ? name.match(/^\\[(.*)\\]$/)[1].split('+') : name;\n        return createIndexSpec(name, keyPath || null, /\\&/.test(index), /\\*/.test(index), /\\+\\+/.test(index), isArray(keyPath), indexNum === 0);\n    });\n}\n\nclass Version {\n    _parseStoresSpec(stores, outSchema) {\n        keys(stores).forEach(tableName => {\n            if (stores[tableName] !== null) {\n                var indexes = parseIndexSyntax(stores[tableName]);\n                var primKey = indexes.shift();\n                primKey.unique = true;\n                if (primKey.multi)\n                    throw new exceptions.Schema(\"Primary key cannot be multi-valued\");\n                indexes.forEach(idx => {\n                    if (idx.auto)\n                        throw new exceptions.Schema(\"Only primary key can be marked as autoIncrement (++)\");\n                    if (!idx.keyPath)\n                        throw new exceptions.Schema(\"Index must have a name and cannot be an empty string\");\n                });\n                outSchema[tableName] = createTableSchema(tableName, primKey, indexes);\n            }\n        });\n    }\n    stores(stores) {\n        const db = this.db;\n        this._cfg.storesSource = this._cfg.storesSource ?\n            extend(this._cfg.storesSource, stores) :\n            stores;\n        const versions = db._versions;\n        const storesSpec = {};\n        let dbschema = {};\n        versions.forEach(version => {\n            extend(storesSpec, version._cfg.storesSource);\n            dbschema = (version._cfg.dbschema = {});\n            version._parseStoresSpec(storesSpec, dbschema);\n        });\n        db._dbSchema = dbschema;\n        removeTablesApi(db, [db._allTables, db, db.Transaction.prototype]);\n        setApiOnPlace(db, [db._allTables, db, db.Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);\n        db._storeNames = keys(dbschema);\n        return this;\n    }\n    upgrade(upgradeFunction) {\n        this._cfg.contentUpgrade = promisableChain(this._cfg.contentUpgrade || nop, upgradeFunction);\n        return this;\n    }\n}\n\nfunction createVersionConstructor(db) {\n    return makeClassConstructor(Version.prototype, function Version(versionNumber) {\n        this.db = db;\n        this._cfg = {\n            version: versionNumber,\n            storesSource: null,\n            dbschema: {},\n            tables: {},\n            contentUpgrade: null\n        };\n    });\n}\n\nfunction getDbNamesTable(indexedDB, IDBKeyRange) {\n    let dbNamesDB = indexedDB[\"_dbNamesDB\"];\n    if (!dbNamesDB) {\n        dbNamesDB = indexedDB[\"_dbNamesDB\"] = new Dexie$1(DBNAMES_DB, {\n            addons: [],\n            indexedDB,\n            IDBKeyRange,\n        });\n        dbNamesDB.version(1).stores({ dbnames: \"name\" });\n    }\n    return dbNamesDB.table(\"dbnames\");\n}\nfunction hasDatabasesNative(indexedDB) {\n    return indexedDB && typeof indexedDB.databases === \"function\";\n}\nfunction getDatabaseNames({ indexedDB, IDBKeyRange, }) {\n    return hasDatabasesNative(indexedDB)\n        ? Promise.resolve(indexedDB.databases()).then((infos) => infos\n            .map((info) => info.name)\n            .filter((name) => name !== DBNAMES_DB))\n        : getDbNamesTable(indexedDB, IDBKeyRange).toCollection().primaryKeys();\n}\nfunction _onDatabaseCreated({ indexedDB, IDBKeyRange }, name) {\n    !hasDatabasesNative(indexedDB) &&\n        name !== DBNAMES_DB &&\n        getDbNamesTable(indexedDB, IDBKeyRange).put({ name }).catch(nop);\n}\nfunction _onDatabaseDeleted({ indexedDB, IDBKeyRange }, name) {\n    !hasDatabasesNative(indexedDB) &&\n        name !== DBNAMES_DB &&\n        getDbNamesTable(indexedDB, IDBKeyRange).delete(name).catch(nop);\n}\n\nfunction vip(fn) {\n    return newScope(function () {\n        PSD.letThrough = true;\n        return fn();\n    });\n}\n\nfunction idbReady() {\n    var isSafari = !navigator.userAgentData &&\n        /Safari\\//.test(navigator.userAgent) &&\n        !/Chrom(e|ium)\\//.test(navigator.userAgent);\n    if (!isSafari || !indexedDB.databases)\n        return Promise.resolve();\n    var intervalId;\n    return new Promise(function (resolve) {\n        var tryIdb = function () { return indexedDB.databases().finally(resolve); };\n        intervalId = setInterval(tryIdb, 100);\n        tryIdb();\n    }).finally(function () { return clearInterval(intervalId); });\n}\n\nfunction isEmptyRange(node) {\n    return !(\"from\" in node);\n}\nconst RangeSet = function (fromOrTree, to) {\n    if (this) {\n        extend(this, arguments.length ? { d: 1, from: fromOrTree, to: arguments.length > 1 ? to : fromOrTree } : { d: 0 });\n    }\n    else {\n        const rv = new RangeSet();\n        if (fromOrTree && (\"d\" in fromOrTree)) {\n            extend(rv, fromOrTree);\n        }\n        return rv;\n    }\n};\nprops(RangeSet.prototype, {\n    add(rangeSet) {\n        mergeRanges(this, rangeSet);\n        return this;\n    },\n    addKey(key) {\n        addRange(this, key, key);\n        return this;\n    },\n    addKeys(keys) {\n        keys.forEach(key => addRange(this, key, key));\n        return this;\n    },\n    hasKey(key) {\n        const node = getRangeSetIterator(this).next(key).value;\n        return node && cmp(node.from, key) <= 0 && cmp(node.to, key) >= 0;\n    },\n    [iteratorSymbol]() {\n        return getRangeSetIterator(this);\n    }\n});\nfunction addRange(target, from, to) {\n    const diff = cmp(from, to);\n    if (isNaN(diff))\n        return;\n    if (diff > 0)\n        throw RangeError();\n    if (isEmptyRange(target))\n        return extend(target, { from, to, d: 1 });\n    const left = target.l;\n    const right = target.r;\n    if (cmp(to, target.from) < 0) {\n        left\n            ? addRange(left, from, to)\n            : (target.l = { from, to, d: 1, l: null, r: null });\n        return rebalance(target);\n    }\n    if (cmp(from, target.to) > 0) {\n        right\n            ? addRange(right, from, to)\n            : (target.r = { from, to, d: 1, l: null, r: null });\n        return rebalance(target);\n    }\n    if (cmp(from, target.from) < 0) {\n        target.from = from;\n        target.l = null;\n        target.d = right ? right.d + 1 : 1;\n    }\n    if (cmp(to, target.to) > 0) {\n        target.to = to;\n        target.r = null;\n        target.d = target.l ? target.l.d + 1 : 1;\n    }\n    const rightWasCutOff = !target.r;\n    if (left && !target.l) {\n        mergeRanges(target, left);\n    }\n    if (right && rightWasCutOff) {\n        mergeRanges(target, right);\n    }\n}\nfunction mergeRanges(target, newSet) {\n    function _addRangeSet(target, { from, to, l, r }) {\n        addRange(target, from, to);\n        if (l)\n            _addRangeSet(target, l);\n        if (r)\n            _addRangeSet(target, r);\n    }\n    if (!isEmptyRange(newSet))\n        _addRangeSet(target, newSet);\n}\nfunction rangesOverlap(rangeSet1, rangeSet2) {\n    const i1 = getRangeSetIterator(rangeSet2);\n    let nextResult1 = i1.next();\n    if (nextResult1.done)\n        return false;\n    let a = nextResult1.value;\n    const i2 = getRangeSetIterator(rangeSet1);\n    let nextResult2 = i2.next(a.from);\n    let b = nextResult2.value;\n    while (!nextResult1.done && !nextResult2.done) {\n        if (cmp(b.from, a.to) <= 0 && cmp(b.to, a.from) >= 0)\n            return true;\n        cmp(a.from, b.from) < 0\n            ? (a = (nextResult1 = i1.next(b.from)).value)\n            : (b = (nextResult2 = i2.next(a.from)).value);\n    }\n    return false;\n}\nfunction getRangeSetIterator(node) {\n    let state = isEmptyRange(node) ? null : { s: 0, n: node };\n    return {\n        next(key) {\n            const keyProvided = arguments.length > 0;\n            while (state) {\n                switch (state.s) {\n                    case 0:\n                        state.s = 1;\n                        if (keyProvided) {\n                            while (state.n.l && cmp(key, state.n.from) < 0)\n                                state = { up: state, n: state.n.l, s: 1 };\n                        }\n                        else {\n                            while (state.n.l)\n                                state = { up: state, n: state.n.l, s: 1 };\n                        }\n                    case 1:\n                        state.s = 2;\n                        if (!keyProvided || cmp(key, state.n.to) <= 0)\n                            return { value: state.n, done: false };\n                    case 2:\n                        if (state.n.r) {\n                            state.s = 3;\n                            state = { up: state, n: state.n.r, s: 0 };\n                            continue;\n                        }\n                    case 3:\n                        state = state.up;\n                }\n            }\n            return { done: true };\n        },\n    };\n}\nfunction rebalance(target) {\n    const diff = (target.r?.d || 0) - (target.l?.d || 0);\n    const r = diff > 1 ? \"r\" : diff < -1 ? \"l\" : \"\";\n    if (r) {\n        const l = r === \"r\" ? \"l\" : \"r\";\n        const rootClone = { ...target };\n        const oldRootRight = target[r];\n        target.from = oldRootRight.from;\n        target.to = oldRootRight.to;\n        target[r] = oldRootRight[r];\n        rootClone[r] = oldRootRight[l];\n        target[l] = rootClone;\n        rootClone.d = computeDepth(rootClone);\n    }\n    target.d = computeDepth(target);\n}\nfunction computeDepth({ r, l }) {\n    return (r ? (l ? Math.max(r.d, l.d) : r.d) : l ? l.d : 0) + 1;\n}\n\nfunction extendObservabilitySet(target, newSet) {\n    keys(newSet).forEach(part => {\n        if (target[part])\n            mergeRanges(target[part], newSet[part]);\n        else\n            target[part] = cloneSimpleObjectTree(newSet[part]);\n    });\n    return target;\n}\n\nfunction obsSetsOverlap(os1, os2) {\n    return os1.all || os2.all || Object.keys(os1).some((key) => os2[key] && rangesOverlap(os2[key], os1[key]));\n}\n\nconst cache = {};\n\nlet unsignaledParts = {};\nlet isTaskEnqueued = false;\nfunction signalSubscribersLazily(part, optimistic = false) {\n    extendObservabilitySet(unsignaledParts, part);\n    if (!isTaskEnqueued) {\n        isTaskEnqueued = true;\n        setTimeout(() => {\n            isTaskEnqueued = false;\n            const parts = unsignaledParts;\n            unsignaledParts = {};\n            signalSubscribersNow(parts, false);\n        }, 0);\n    }\n}\nfunction signalSubscribersNow(updatedParts, deleteAffectedCacheEntries = false) {\n    const queriesToSignal = new Set();\n    if (updatedParts.all) {\n        for (const tblCache of Object.values(cache)) {\n            collectTableSubscribers(tblCache, updatedParts, queriesToSignal, deleteAffectedCacheEntries);\n        }\n    }\n    else {\n        for (const key in updatedParts) {\n            const parts = /^idb\\:\\/\\/(.*)\\/(.*)\\//.exec(key);\n            if (parts) {\n                const [, dbName, tableName] = parts;\n                const tblCache = cache[`idb://${dbName}/${tableName}`];\n                if (tblCache)\n                    collectTableSubscribers(tblCache, updatedParts, queriesToSignal, deleteAffectedCacheEntries);\n            }\n        }\n    }\n    queriesToSignal.forEach((requery) => requery());\n}\nfunction collectTableSubscribers(tblCache, updatedParts, outQueriesToSignal, deleteAffectedCacheEntries) {\n    const updatedEntryLists = [];\n    for (const [indexName, entries] of Object.entries(tblCache.queries.query)) {\n        const filteredEntries = [];\n        for (const entry of entries) {\n            if (obsSetsOverlap(updatedParts, entry.obsSet)) {\n                entry.subscribers.forEach((requery) => outQueriesToSignal.add(requery));\n            }\n            else if (deleteAffectedCacheEntries) {\n                filteredEntries.push(entry);\n            }\n        }\n        if (deleteAffectedCacheEntries)\n            updatedEntryLists.push([indexName, filteredEntries]);\n    }\n    if (deleteAffectedCacheEntries) {\n        for (const [indexName, filteredEntries] of updatedEntryLists) {\n            tblCache.queries.query[indexName] = filteredEntries;\n        }\n    }\n}\n\nfunction dexieOpen(db) {\n    const state = db._state;\n    const { indexedDB } = db._deps;\n    if (state.isBeingOpened || db.idbdb)\n        return state.dbReadyPromise.then(() => state.dbOpenError ?\n            rejection(state.dbOpenError) :\n            db);\n    state.isBeingOpened = true;\n    state.dbOpenError = null;\n    state.openComplete = false;\n    const openCanceller = state.openCanceller;\n    let nativeVerToOpen = Math.round(db.verno * 10);\n    let schemaPatchMode = false;\n    function throwIfCancelled() {\n        if (state.openCanceller !== openCanceller)\n            throw new exceptions.DatabaseClosed('db.open() was cancelled');\n    }\n    let resolveDbReady = state.dbReadyResolve,\n    upgradeTransaction = null, wasCreated = false;\n    const tryOpenDB = () => new DexiePromise((resolve, reject) => {\n        throwIfCancelled();\n        if (!indexedDB)\n            throw new exceptions.MissingAPI();\n        const dbName = db.name;\n        const req = state.autoSchema || !nativeVerToOpen ?\n            indexedDB.open(dbName) :\n            indexedDB.open(dbName, nativeVerToOpen);\n        if (!req)\n            throw new exceptions.MissingAPI();\n        req.onerror = eventRejectHandler(reject);\n        req.onblocked = wrap(db._fireOnBlocked);\n        req.onupgradeneeded = wrap(e => {\n            upgradeTransaction = req.transaction;\n            if (state.autoSchema && !db._options.allowEmptyDB) {\n                req.onerror = preventDefault;\n                upgradeTransaction.abort();\n                req.result.close();\n                const delreq = indexedDB.deleteDatabase(dbName);\n                delreq.onsuccess = delreq.onerror = wrap(() => {\n                    reject(new exceptions.NoSuchDatabase(`Database ${dbName} doesnt exist`));\n                });\n            }\n            else {\n                upgradeTransaction.onerror = eventRejectHandler(reject);\n                const oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;\n                wasCreated = oldVer < 1;\n                db.idbdb = req.result;\n                if (schemaPatchMode) {\n                    patchCurrentVersion(db, upgradeTransaction);\n                }\n                runUpgraders(db, oldVer / 10, upgradeTransaction, reject);\n            }\n        }, reject);\n        req.onsuccess = wrap(() => {\n            upgradeTransaction = null;\n            const idbdb = db.idbdb = req.result;\n            const objectStoreNames = slice(idbdb.objectStoreNames);\n            if (objectStoreNames.length > 0)\n                try {\n                    const tmpTrans = idbdb.transaction(safariMultiStoreFix(objectStoreNames), 'readonly');\n                    if (state.autoSchema)\n                        readGlobalSchema(db, idbdb, tmpTrans);\n                    else {\n                        adjustToExistingIndexNames(db, db._dbSchema, tmpTrans);\n                        if (!verifyInstalledSchema(db, tmpTrans) && !schemaPatchMode) {\n                            console.warn(`Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Dexie will add missing parts and increment native version number to workaround this.`);\n                            idbdb.close();\n                            nativeVerToOpen = idbdb.version + 1;\n                            schemaPatchMode = true;\n                            return resolve(tryOpenDB());\n                        }\n                    }\n                    generateMiddlewareStacks(db, tmpTrans);\n                }\n                catch (e) {\n                }\n            connections.push(db);\n            idbdb.onversionchange = wrap(ev => {\n                state.vcFired = true;\n                db.on(\"versionchange\").fire(ev);\n            });\n            idbdb.onclose = wrap(ev => {\n                db.on(\"close\").fire(ev);\n            });\n            if (wasCreated)\n                _onDatabaseCreated(db._deps, dbName);\n            resolve();\n        }, reject);\n    }).catch(err => {\n        switch (err?.name) {\n            case \"UnknownError\":\n                if (state.PR1398_maxLoop > 0) {\n                    state.PR1398_maxLoop--;\n                    console.warn('Dexie: Workaround for Chrome UnknownError on open()');\n                    return tryOpenDB();\n                }\n                break;\n            case \"VersionError\":\n                if (nativeVerToOpen > 0) {\n                    nativeVerToOpen = 0;\n                    return tryOpenDB();\n                }\n                break;\n        }\n        return DexiePromise.reject(err);\n    });\n    return DexiePromise.race([\n        openCanceller,\n        (typeof navigator === 'undefined' ? DexiePromise.resolve() : idbReady()).then(tryOpenDB)\n    ]).then(() => {\n        throwIfCancelled();\n        state.onReadyBeingFired = [];\n        return DexiePromise.resolve(vip(() => db.on.ready.fire(db.vip))).then(function fireRemainders() {\n            if (state.onReadyBeingFired.length > 0) {\n                let remainders = state.onReadyBeingFired.reduce(promisableChain, nop);\n                state.onReadyBeingFired = [];\n                return DexiePromise.resolve(vip(() => remainders(db.vip))).then(fireRemainders);\n            }\n        });\n    }).finally(() => {\n        if (state.openCanceller === openCanceller) {\n            state.onReadyBeingFired = null;\n            state.isBeingOpened = false;\n        }\n    }).catch(err => {\n        state.dbOpenError = err;\n        try {\n            upgradeTransaction && upgradeTransaction.abort();\n        }\n        catch { }\n        if (openCanceller === state.openCanceller) {\n            db._close();\n        }\n        return rejection(err);\n    }).finally(() => {\n        state.openComplete = true;\n        resolveDbReady();\n    }).then(() => {\n        if (wasCreated) {\n            const everything = {};\n            db.tables.forEach(table => {\n                table.schema.indexes.forEach(idx => {\n                    if (idx.name)\n                        everything[`idb://${db.name}/${table.name}/${idx.name}`] = new RangeSet(-Infinity, [[[]]]);\n                });\n                everything[`idb://${db.name}/${table.name}/`] = everything[`idb://${db.name}/${table.name}/:dels`] = new RangeSet(-Infinity, [[[]]]);\n            });\n            globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME).fire(everything);\n            signalSubscribersNow(everything, true);\n        }\n        return db;\n    });\n}\n\nfunction awaitIterator(iterator) {\n    var callNext = result => iterator.next(result), doThrow = error => iterator.throw(error), onSuccess = step(callNext), onError = step(doThrow);\n    function step(getNext) {\n        return (val) => {\n            var next = getNext(val), value = next.value;\n            return next.done ? value :\n                (!value || typeof value.then !== 'function' ?\n                    isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) :\n                    value.then(onSuccess, onError));\n        };\n    }\n    return step(callNext)();\n}\n\nfunction extractTransactionArgs(mode, _tableArgs_, scopeFunc) {\n    var i = arguments.length;\n    if (i < 2)\n        throw new exceptions.InvalidArgument(\"Too few arguments\");\n    var args = new Array(i - 1);\n    while (--i)\n        args[i - 1] = arguments[i];\n    scopeFunc = args.pop();\n    var tables = flatten(args);\n    return [mode, tables, scopeFunc];\n}\nfunction enterTransactionScope(db, mode, storeNames, parentTransaction, scopeFunc) {\n    return DexiePromise.resolve().then(() => {\n        const transless = PSD.transless || PSD;\n        const trans = db._createTransaction(mode, storeNames, db._dbSchema, parentTransaction);\n        trans.explicit = true;\n        const zoneProps = {\n            trans: trans,\n            transless: transless\n        };\n        if (parentTransaction) {\n            trans.idbtrans = parentTransaction.idbtrans;\n        }\n        else {\n            try {\n                trans.create();\n                trans.idbtrans._explicit = true;\n                db._state.PR1398_maxLoop = 3;\n            }\n            catch (ex) {\n                if (ex.name === errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {\n                    console.warn('Dexie: Need to reopen db');\n                    db.close({ disableAutoOpen: false });\n                    return db.open().then(() => enterTransactionScope(db, mode, storeNames, null, scopeFunc));\n                }\n                return rejection(ex);\n            }\n        }\n        const scopeFuncIsAsync = isAsyncFunction(scopeFunc);\n        if (scopeFuncIsAsync) {\n            incrementExpectedAwaits();\n        }\n        let returnValue;\n        const promiseFollowed = DexiePromise.follow(() => {\n            returnValue = scopeFunc.call(trans, trans);\n            if (returnValue) {\n                if (scopeFuncIsAsync) {\n                    var decrementor = decrementExpectedAwaits.bind(null, null);\n                    returnValue.then(decrementor, decrementor);\n                }\n                else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {\n                    returnValue = awaitIterator(returnValue);\n                }\n            }\n        }, zoneProps);\n        return (returnValue && typeof returnValue.then === 'function' ?\n            DexiePromise.resolve(returnValue).then(x => trans.active ?\n                x\n                : rejection(new exceptions.PrematureCommit(\"Transaction committed too early. See http://bit.ly/2kdckMn\")))\n            : promiseFollowed.then(() => returnValue)).then(x => {\n            if (parentTransaction)\n                trans._resolve();\n            return trans._completion.then(() => x);\n        }).catch(e => {\n            trans._reject(e);\n            return rejection(e);\n        });\n    });\n}\n\nfunction pad(a, value, count) {\n    const result = isArray(a) ? a.slice() : [a];\n    for (let i = 0; i < count; ++i)\n        result.push(value);\n    return result;\n}\nfunction createVirtualIndexMiddleware(down) {\n    return {\n        ...down,\n        table(tableName) {\n            const table = down.table(tableName);\n            const { schema } = table;\n            const indexLookup = {};\n            const allVirtualIndexes = [];\n            function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {\n                const keyPathAlias = getKeyPathAlias(keyPath);\n                const indexList = (indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || []);\n                const keyLength = keyPath == null ? 0 : typeof keyPath === 'string' ? 1 : keyPath.length;\n                const isVirtual = keyTail > 0;\n                const virtualIndex = {\n                    ...lowLevelIndex,\n                    name: isVirtual\n                        ? `${keyPathAlias}(virtual-from:${lowLevelIndex.name})`\n                        : lowLevelIndex.name,\n                    lowLevelIndex,\n                    isVirtual,\n                    keyTail,\n                    keyLength,\n                    extractKey: getKeyExtractor(keyPath),\n                    unique: !isVirtual && lowLevelIndex.unique\n                };\n                indexList.push(virtualIndex);\n                if (!virtualIndex.isPrimaryKey) {\n                    allVirtualIndexes.push(virtualIndex);\n                }\n                if (keyLength > 1) {\n                    const virtualKeyPath = keyLength === 2 ?\n                        keyPath[0] :\n                        keyPath.slice(0, keyLength - 1);\n                    addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);\n                }\n                indexList.sort((a, b) => a.keyTail - b.keyTail);\n                return virtualIndex;\n            }\n            const primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);\n            indexLookup[\":id\"] = [primaryKey];\n            for (const index of schema.indexes) {\n                addVirtualIndexes(index.keyPath, 0, index);\n            }\n            function findBestIndex(keyPath) {\n                const result = indexLookup[getKeyPathAlias(keyPath)];\n                return result && result[0];\n            }\n            function translateRange(range, keyTail) {\n                return {\n                    type: range.type === 1  ?\n                        2  :\n                        range.type,\n                    lower: pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),\n                    lowerOpen: true,\n                    upper: pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),\n                    upperOpen: true\n                };\n            }\n            function translateRequest(req) {\n                const index = req.query.index;\n                return index.isVirtual ? {\n                    ...req,\n                    query: {\n                        index: index.lowLevelIndex,\n                        range: translateRange(req.query.range, index.keyTail)\n                    }\n                } : req;\n            }\n            const result = {\n                ...table,\n                schema: {\n                    ...schema,\n                    primaryKey,\n                    indexes: allVirtualIndexes,\n                    getIndexByKeyPath: findBestIndex\n                },\n                count(req) {\n                    return table.count(translateRequest(req));\n                },\n                query(req) {\n                    return table.query(translateRequest(req));\n                },\n                openCursor(req) {\n                    const { keyTail, isVirtual, keyLength } = req.query.index;\n                    if (!isVirtual)\n                        return table.openCursor(req);\n                    function createVirtualCursor(cursor) {\n                        function _continue(key) {\n                            key != null ?\n                                cursor.continue(pad(key, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) :\n                                req.unique ?\n                                    cursor.continue(cursor.key.slice(0, keyLength)\n                                        .concat(req.reverse\n                                        ? down.MIN_KEY\n                                        : down.MAX_KEY, keyTail)) :\n                                    cursor.continue();\n                        }\n                        const virtualCursor = Object.create(cursor, {\n                            continue: { value: _continue },\n                            continuePrimaryKey: {\n                                value(key, primaryKey) {\n                                    cursor.continuePrimaryKey(pad(key, down.MAX_KEY, keyTail), primaryKey);\n                                }\n                            },\n                            primaryKey: {\n                                get() {\n                                    return cursor.primaryKey;\n                                }\n                            },\n                            key: {\n                                get() {\n                                    const key = cursor.key;\n                                    return keyLength === 1 ?\n                                        key[0] :\n                                        key.slice(0, keyLength);\n                                }\n                            },\n                            value: {\n                                get() {\n                                    return cursor.value;\n                                }\n                            }\n                        });\n                        return virtualCursor;\n                    }\n                    return table.openCursor(translateRequest(req))\n                        .then(cursor => cursor && createVirtualCursor(cursor));\n                }\n            };\n            return result;\n        }\n    };\n}\nconst virtualIndexMiddleware = {\n    stack: \"dbcore\",\n    name: \"VirtualIndexMiddleware\",\n    level: 1,\n    create: createVirtualIndexMiddleware\n};\n\nfunction getObjectDiff(a, b, rv, prfx) {\n    rv = rv || {};\n    prfx = prfx || '';\n    keys(a).forEach((prop) => {\n        if (!hasOwn(b, prop)) {\n            rv[prfx + prop] = undefined;\n        }\n        else {\n            var ap = a[prop], bp = b[prop];\n            if (typeof ap === 'object' && typeof bp === 'object' && ap && bp) {\n                const apTypeName = toStringTag(ap);\n                const bpTypeName = toStringTag(bp);\n                if (apTypeName !== bpTypeName) {\n                    rv[prfx + prop] = b[prop];\n                }\n                else if (apTypeName === 'Object') {\n                    getObjectDiff(ap, bp, rv, prfx + prop + '.');\n                }\n                else if (ap !== bp) {\n                    rv[prfx + prop] = b[prop];\n                }\n            }\n            else if (ap !== bp)\n                rv[prfx + prop] = b[prop];\n        }\n    });\n    keys(b).forEach((prop) => {\n        if (!hasOwn(a, prop)) {\n            rv[prfx + prop] = b[prop];\n        }\n    });\n    return rv;\n}\n\nfunction getEffectiveKeys(primaryKey, req) {\n    if (req.type === 'delete')\n        return req.keys;\n    return req.keys || req.values.map(primaryKey.extractKey);\n}\n\nconst hooksMiddleware = {\n    stack: \"dbcore\",\n    name: \"HooksMiddleware\",\n    level: 2,\n    create: (downCore) => ({\n        ...downCore,\n        table(tableName) {\n            const downTable = downCore.table(tableName);\n            const { primaryKey } = downTable.schema;\n            const tableMiddleware = {\n                ...downTable,\n                mutate(req) {\n                    const dxTrans = PSD.trans;\n                    const { deleting, creating, updating } = dxTrans.table(tableName).hook;\n                    switch (req.type) {\n                        case 'add':\n                            if (creating.fire === nop)\n                                break;\n                            return dxTrans._promise('readwrite', () => addPutOrDelete(req), true);\n                        case 'put':\n                            if (creating.fire === nop && updating.fire === nop)\n                                break;\n                            return dxTrans._promise('readwrite', () => addPutOrDelete(req), true);\n                        case 'delete':\n                            if (deleting.fire === nop)\n                                break;\n                            return dxTrans._promise('readwrite', () => addPutOrDelete(req), true);\n                        case 'deleteRange':\n                            if (deleting.fire === nop)\n                                break;\n                            return dxTrans._promise('readwrite', () => deleteRange(req), true);\n                    }\n                    return downTable.mutate(req);\n                    function addPutOrDelete(req) {\n                        const dxTrans = PSD.trans;\n                        const keys = req.keys || getEffectiveKeys(primaryKey, req);\n                        if (!keys)\n                            throw new Error(\"Keys missing\");\n                        req = req.type === 'add' || req.type === 'put' ?\n                            { ...req, keys } :\n                            { ...req };\n                        if (req.type !== 'delete')\n                            req.values = [...req.values];\n                        if (req.keys)\n                            req.keys = [...req.keys];\n                        return getExistingValues(downTable, req, keys).then(existingValues => {\n                            const contexts = keys.map((key, i) => {\n                                const existingValue = existingValues[i];\n                                const ctx = { onerror: null, onsuccess: null };\n                                if (req.type === 'delete') {\n                                    deleting.fire.call(ctx, key, existingValue, dxTrans);\n                                }\n                                else if (req.type === 'add' || existingValue === undefined) {\n                                    const generatedPrimaryKey = creating.fire.call(ctx, key, req.values[i], dxTrans);\n                                    if (key == null && generatedPrimaryKey != null) {\n                                        key = generatedPrimaryKey;\n                                        req.keys[i] = key;\n                                        if (!primaryKey.outbound) {\n                                            setByKeyPath(req.values[i], primaryKey.keyPath, key);\n                                        }\n                                    }\n                                }\n                                else {\n                                    const objectDiff = getObjectDiff(existingValue, req.values[i]);\n                                    const additionalChanges = updating.fire.call(ctx, objectDiff, key, existingValue, dxTrans);\n                                    if (additionalChanges) {\n                                        const requestedValue = req.values[i];\n                                        Object.keys(additionalChanges).forEach(keyPath => {\n                                            if (hasOwn(requestedValue, keyPath)) {\n                                                requestedValue[keyPath] = additionalChanges[keyPath];\n                                            }\n                                            else {\n                                                setByKeyPath(requestedValue, keyPath, additionalChanges[keyPath]);\n                                            }\n                                        });\n                                    }\n                                }\n                                return ctx;\n                            });\n                            return downTable.mutate(req).then(({ failures, results, numFailures, lastResult }) => {\n                                for (let i = 0; i < keys.length; ++i) {\n                                    const primKey = results ? results[i] : keys[i];\n                                    const ctx = contexts[i];\n                                    if (primKey == null) {\n                                        ctx.onerror && ctx.onerror(failures[i]);\n                                    }\n                                    else {\n                                        ctx.onsuccess && ctx.onsuccess(req.type === 'put' && existingValues[i] ?\n                                            req.values[i] :\n                                            primKey\n                                        );\n                                    }\n                                }\n                                return { failures, results, numFailures, lastResult };\n                            }).catch(error => {\n                                contexts.forEach(ctx => ctx.onerror && ctx.onerror(error));\n                                return Promise.reject(error);\n                            });\n                        });\n                    }\n                    function deleteRange(req) {\n                        return deleteNextChunk(req.trans, req.range, 10000);\n                    }\n                    function deleteNextChunk(trans, range, limit) {\n                        return downTable.query({ trans, values: false, query: { index: primaryKey, range }, limit })\n                            .then(({ result }) => {\n                            return addPutOrDelete({ type: 'delete', keys: result, trans }).then(res => {\n                                if (res.numFailures > 0)\n                                    return Promise.reject(res.failures[0]);\n                                if (result.length < limit) {\n                                    return { failures: [], numFailures: 0, lastResult: undefined };\n                                }\n                                else {\n                                    return deleteNextChunk(trans, { ...range, lower: result[result.length - 1], lowerOpen: true }, limit);\n                                }\n                            });\n                        });\n                    }\n                }\n            };\n            return tableMiddleware;\n        },\n    })\n};\nfunction getExistingValues(table, req, effectiveKeys) {\n    return req.type === \"add\"\n        ? Promise.resolve([])\n        : table.getMany({ trans: req.trans, keys: effectiveKeys, cache: \"immutable\" });\n}\n\nfunction getFromTransactionCache(keys, cache, clone) {\n    try {\n        if (!cache)\n            return null;\n        if (cache.keys.length < keys.length)\n            return null;\n        const result = [];\n        for (let i = 0, j = 0; i < cache.keys.length && j < keys.length; ++i) {\n            if (cmp(cache.keys[i], keys[j]) !== 0)\n                continue;\n            result.push(clone ? deepClone(cache.values[i]) : cache.values[i]);\n            ++j;\n        }\n        return result.length === keys.length ? result : null;\n    }\n    catch {\n        return null;\n    }\n}\nconst cacheExistingValuesMiddleware = {\n    stack: \"dbcore\",\n    level: -1,\n    create: (core) => {\n        return {\n            table: (tableName) => {\n                const table = core.table(tableName);\n                return {\n                    ...table,\n                    getMany: (req) => {\n                        if (!req.cache) {\n                            return table.getMany(req);\n                        }\n                        const cachedResult = getFromTransactionCache(req.keys, req.trans[\"_cache\"], req.cache === \"clone\");\n                        if (cachedResult) {\n                            return DexiePromise.resolve(cachedResult);\n                        }\n                        return table.getMany(req).then((res) => {\n                            req.trans[\"_cache\"] = {\n                                keys: req.keys,\n                                values: req.cache === \"clone\" ? deepClone(res) : res,\n                            };\n                            return res;\n                        });\n                    },\n                    mutate: (req) => {\n                        if (req.type !== \"add\")\n                            req.trans[\"_cache\"] = null;\n                        return table.mutate(req);\n                    },\n                };\n            },\n        };\n    },\n};\n\nfunction isCachableContext(ctx, table) {\n    return (ctx.trans.mode === 'readonly' &&\n        !!ctx.subscr &&\n        !ctx.trans.explicit &&\n        ctx.trans.db._options.cache !== 'disabled' &&\n        !table.schema.primaryKey.outbound);\n}\n\nfunction isCachableRequest(type, req) {\n    switch (type) {\n        case 'query':\n            return req.values && !req.unique;\n        case 'get':\n            return false;\n        case 'getMany':\n            return false;\n        case 'count':\n            return false;\n        case 'openCursor':\n            return false;\n    }\n}\n\nconst observabilityMiddleware = {\n    stack: \"dbcore\",\n    level: 0,\n    name: \"Observability\",\n    create: (core) => {\n        const dbName = core.schema.name;\n        const FULL_RANGE = new RangeSet(core.MIN_KEY, core.MAX_KEY);\n        return {\n            ...core,\n            transaction: (stores, mode, options) => {\n                if (PSD.subscr && mode !== 'readonly') {\n                    throw new exceptions.ReadOnly(`Readwrite transaction in liveQuery context. Querier source: ${PSD.querier}`);\n                }\n                return core.transaction(stores, mode, options);\n            },\n            table: (tableName) => {\n                const table = core.table(tableName);\n                const { schema } = table;\n                const { primaryKey, indexes } = schema;\n                const { extractKey, outbound } = primaryKey;\n                const indexesWithAutoIncPK = primaryKey.autoIncrement && indexes.filter((index) => index.compound && index.keyPath.includes(primaryKey.keyPath));\n                const tableClone = {\n                    ...table,\n                    mutate: (req) => {\n                        const trans = req.trans;\n                        const mutatedParts = req.mutatedParts || (req.mutatedParts = {});\n                        const getRangeSet = (indexName) => {\n                            const part = `idb://${dbName}/${tableName}/${indexName}`;\n                            return (mutatedParts[part] ||\n                                (mutatedParts[part] = new RangeSet()));\n                        };\n                        const pkRangeSet = getRangeSet(\"\");\n                        const delsRangeSet = getRangeSet(\":dels\");\n                        const { type } = req;\n                        let [keys, newObjs] = req.type === \"deleteRange\"\n                            ? [req.range]\n                            : req.type === \"delete\"\n                                ? [req.keys]\n                                : req.values.length < 50\n                                    ? [getEffectiveKeys(primaryKey, req).filter(id => id), req.values]\n                                    : [];\n                        const oldCache = req.trans[\"_cache\"];\n                        if (isArray(keys)) {\n                            pkRangeSet.addKeys(keys);\n                            const oldObjs = type === 'delete' || keys.length === newObjs.length ? getFromTransactionCache(keys, oldCache) : null;\n                            if (!oldObjs) {\n                                delsRangeSet.addKeys(keys);\n                            }\n                            if (oldObjs || newObjs) {\n                                trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs);\n                            }\n                        }\n                        else if (keys) {\n                            const range = { from: keys.lower, to: keys.upper };\n                            delsRangeSet.add(range);\n                            pkRangeSet.add(range);\n                        }\n                        else {\n                            pkRangeSet.add(FULL_RANGE);\n                            delsRangeSet.add(FULL_RANGE);\n                            schema.indexes.forEach(idx => getRangeSet(idx.name).add(FULL_RANGE));\n                        }\n                        return table.mutate(req).then((res) => {\n                            if (keys && (req.type === 'add' || req.type === 'put')) {\n                                pkRangeSet.addKeys(res.results);\n                                if (indexesWithAutoIncPK) {\n                                    indexesWithAutoIncPK.forEach(idx => {\n                                        const idxVals = req.values.map(v => idx.extractKey(v));\n                                        const pkPos = idx.keyPath.findIndex(prop => prop === primaryKey.keyPath);\n                                        res.results.forEach(pk => idxVals[pkPos] = pk);\n                                        getRangeSet(idx.name).addKeys(idxVals);\n                                    });\n                                }\n                            }\n                            trans.mutatedParts = extendObservabilitySet(trans.mutatedParts || {}, mutatedParts);\n                            return res;\n                        });\n                    },\n                };\n                const getRange = ({ query: { index, range }, }) => [\n                    index,\n                    new RangeSet(range.lower ?? core.MIN_KEY, range.upper ?? core.MAX_KEY),\n                ];\n                const readSubscribers = {\n                    get: (req) => [primaryKey, new RangeSet(req.key)],\n                    getMany: (req) => [primaryKey, new RangeSet().addKeys(req.keys)],\n                    count: getRange,\n                    query: getRange,\n                    openCursor: getRange,\n                };\n                keys(readSubscribers).forEach((method) => {\n                    tableClone[method] = function (req) {\n                        const { subscr } = PSD;\n                        const isLiveQuery = !!subscr;\n                        let cachable = isCachableContext(PSD, table) && isCachableRequest(method, req);\n                        const obsSet = cachable\n                            ? req.obsSet = {}\n                            : subscr;\n                        if (isLiveQuery) {\n                            const getRangeSet = (indexName) => {\n                                const part = `idb://${dbName}/${tableName}/${indexName}`;\n                                return (obsSet[part] ||\n                                    (obsSet[part] = new RangeSet()));\n                            };\n                            const pkRangeSet = getRangeSet(\"\");\n                            const delsRangeSet = getRangeSet(\":dels\");\n                            const [queriedIndex, queriedRanges] = readSubscribers[method](req);\n                            if (method === 'query' && queriedIndex.isPrimaryKey && !req.values) {\n                                delsRangeSet.add(queriedRanges);\n                            }\n                            else {\n                                getRangeSet(queriedIndex.name || \"\").add(queriedRanges);\n                            }\n                            if (!queriedIndex.isPrimaryKey) {\n                                if (method === \"count\") {\n                                    delsRangeSet.add(FULL_RANGE);\n                                }\n                                else {\n                                    const keysPromise = method === \"query\" &&\n                                        outbound &&\n                                        req.values &&\n                                        table.query({\n                                            ...req,\n                                            values: false,\n                                        });\n                                    return table[method].apply(this, arguments).then((res) => {\n                                        if (method === \"query\") {\n                                            if (outbound && req.values) {\n                                                return keysPromise.then(({ result: resultingKeys }) => {\n                                                    pkRangeSet.addKeys(resultingKeys);\n                                                    return res;\n                                                });\n                                            }\n                                            const pKeys = req.values\n                                                ? res.result.map(extractKey)\n                                                : res.result;\n                                            if (req.values) {\n                                                pkRangeSet.addKeys(pKeys);\n                                            }\n                                            else {\n                                                delsRangeSet.addKeys(pKeys);\n                                            }\n                                        }\n                                        else if (method === \"openCursor\") {\n                                            const cursor = res;\n                                            const wantValues = req.values;\n                                            return (cursor &&\n                                                Object.create(cursor, {\n                                                    key: {\n                                                        get() {\n                                                            delsRangeSet.addKey(cursor.primaryKey);\n                                                            return cursor.key;\n                                                        },\n                                                    },\n                                                    primaryKey: {\n                                                        get() {\n                                                            const pkey = cursor.primaryKey;\n                                                            delsRangeSet.addKey(pkey);\n                                                            return pkey;\n                                                        },\n                                                    },\n                                                    value: {\n                                                        get() {\n                                                            wantValues && pkRangeSet.addKey(cursor.primaryKey);\n                                                            return cursor.value;\n                                                        },\n                                                    },\n                                                }));\n                                        }\n                                        return res;\n                                    });\n                                }\n                            }\n                        }\n                        return table[method].apply(this, arguments);\n                    };\n                });\n                return tableClone;\n            },\n        };\n    },\n};\nfunction trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs) {\n    function addAffectedIndex(ix) {\n        const rangeSet = getRangeSet(ix.name || \"\");\n        function extractKey(obj) {\n            return obj != null ? ix.extractKey(obj) : null;\n        }\n        const addKeyOrKeys = (key) => ix.multiEntry && isArray(key)\n            ? key.forEach(key => rangeSet.addKey(key))\n            : rangeSet.addKey(key);\n        (oldObjs || newObjs).forEach((_, i) => {\n            const oldKey = oldObjs && extractKey(oldObjs[i]);\n            const newKey = newObjs && extractKey(newObjs[i]);\n            if (cmp(oldKey, newKey) !== 0) {\n                if (oldKey != null)\n                    addKeyOrKeys(oldKey);\n                if (newKey != null)\n                    addKeyOrKeys(newKey);\n            }\n        });\n    }\n    schema.indexes.forEach(addAffectedIndex);\n}\n\nfunction adjustOptimisticFromFailures(tblCache, req, res) {\n    if (res.numFailures === 0)\n        return req;\n    if (req.type === 'deleteRange') {\n        return null;\n    }\n    const numBulkOps = req.keys\n        ? req.keys.length\n        : 'values' in req && req.values\n            ? req.values.length\n            : 1;\n    if (res.numFailures === numBulkOps) {\n        return null;\n    }\n    const clone = { ...req };\n    if (isArray(clone.keys)) {\n        clone.keys = clone.keys.filter((_, i) => !(i in res.failures));\n    }\n    if ('values' in clone && isArray(clone.values)) {\n        clone.values = clone.values.filter((_, i) => !(i in res.failures));\n    }\n    return clone;\n}\n\nfunction isAboveLower(key, range) {\n    return range.lower === undefined\n        ? true\n        : range.lowerOpen\n            ? cmp(key, range.lower) > 0\n            : cmp(key, range.lower) >= 0;\n}\nfunction isBelowUpper(key, range) {\n    return range.upper === undefined\n        ? true\n        : range.upperOpen\n            ? cmp(key, range.upper) < 0\n            : cmp(key, range.upper) <= 0;\n}\nfunction isWithinRange(key, range) {\n    return isAboveLower(key, range) && isBelowUpper(key, range);\n}\n\nfunction applyOptimisticOps(result, req, ops, table, cacheEntry, immutable) {\n    if (!ops || ops.length === 0)\n        return result;\n    const index = req.query.index;\n    const { multiEntry } = index;\n    const queryRange = req.query.range;\n    const primaryKey = table.schema.primaryKey;\n    const extractPrimKey = primaryKey.extractKey;\n    const extractIndex = index.extractKey;\n    const extractLowLevelIndex = (index.lowLevelIndex || index).extractKey;\n    let finalResult = ops.reduce((result, op) => {\n        let modifedResult = result;\n        const includedValues = [];\n        if (op.type === 'add' || op.type === 'put') {\n            const includedPKs = new RangeSet();\n            for (let i = op.values.length - 1; i >= 0; --i) {\n                const value = op.values[i];\n                const pk = extractPrimKey(value);\n                if (includedPKs.hasKey(pk))\n                    continue;\n                const key = extractIndex(value);\n                if (multiEntry && isArray(key)\n                    ? key.some((k) => isWithinRange(k, queryRange))\n                    : isWithinRange(key, queryRange)) {\n                    includedPKs.addKey(pk);\n                    includedValues.push(value);\n                }\n            }\n        }\n        switch (op.type) {\n            case 'add':\n                modifedResult = result.concat(req.values\n                    ? includedValues\n                    : includedValues.map((v) => extractPrimKey(v)));\n                break;\n            case 'put':\n                const keySet = new RangeSet().addKeys(op.values.map((v) => extractPrimKey(v)));\n                modifedResult = result\n                    .filter(\n                (item) => !keySet.hasKey(req.values ? extractPrimKey(item) : item))\n                    .concat(\n                req.values\n                    ? includedValues\n                    : includedValues.map((v) => extractPrimKey(v)));\n                break;\n            case 'delete':\n                const keysToDelete = new RangeSet().addKeys(op.keys);\n                modifedResult = result.filter((item) => !keysToDelete.hasKey(req.values ? extractPrimKey(item) : item));\n                break;\n            case 'deleteRange':\n                const range = op.range;\n                modifedResult = result.filter((item) => !isWithinRange(extractPrimKey(item), range));\n                break;\n        }\n        return modifedResult;\n    }, result);\n    if (finalResult === result)\n        return result;\n    finalResult.sort((a, b) => cmp(extractLowLevelIndex(a), extractLowLevelIndex(b)) ||\n        cmp(extractPrimKey(a), extractPrimKey(b)));\n    if (req.limit && req.limit < Infinity) {\n        if (finalResult.length > req.limit) {\n            finalResult.length = req.limit;\n        }\n        else if (result.length === req.limit && finalResult.length < req.limit) {\n            cacheEntry.dirty = true;\n        }\n    }\n    return immutable ? Object.freeze(finalResult) : finalResult;\n}\n\nfunction areRangesEqual(r1, r2) {\n    return (cmp(r1.lower, r2.lower) === 0 &&\n        cmp(r1.upper, r2.upper) === 0 &&\n        !!r1.lowerOpen === !!r2.lowerOpen &&\n        !!r1.upperOpen === !!r2.upperOpen);\n}\n\nfunction compareLowers(lower1, lower2, lowerOpen1, lowerOpen2) {\n    if (lower1 === undefined)\n        return lower2 !== undefined ? -1 : 0;\n    if (lower2 === undefined)\n        return 1;\n    const c = cmp(lower1, lower2);\n    if (c === 0) {\n        if (lowerOpen1 && lowerOpen2)\n            return 0;\n        if (lowerOpen1)\n            return 1;\n        if (lowerOpen2)\n            return -1;\n    }\n    return c;\n}\nfunction compareUppers(upper1, upper2, upperOpen1, upperOpen2) {\n    if (upper1 === undefined)\n        return upper2 !== undefined ? 1 : 0;\n    if (upper2 === undefined)\n        return -1;\n    const c = cmp(upper1, upper2);\n    if (c === 0) {\n        if (upperOpen1 && upperOpen2)\n            return 0;\n        if (upperOpen1)\n            return -1;\n        if (upperOpen2)\n            return 1;\n    }\n    return c;\n}\nfunction isSuperRange(r1, r2) {\n    return (compareLowers(r1.lower, r2.lower, r1.lowerOpen, r2.lowerOpen) <= 0 &&\n        compareUppers(r1.upper, r2.upper, r1.upperOpen, r2.upperOpen) >= 0);\n}\n\nfunction findCompatibleQuery(dbName, tableName, type, req) {\n    const tblCache = cache[`idb://${dbName}/${tableName}`];\n    if (!tblCache)\n        return [];\n    const queries = tblCache.queries[type];\n    if (!queries)\n        return [null, false, tblCache, null];\n    const indexName = req.query ? req.query.index.name : null;\n    const entries = queries[indexName || ''];\n    if (!entries)\n        return [null, false, tblCache, null];\n    switch (type) {\n        case 'query':\n            const equalEntry = entries.find((entry) => entry.req.limit === req.limit &&\n                entry.req.values === req.values &&\n                areRangesEqual(entry.req.query.range, req.query.range));\n            if (equalEntry)\n                return [\n                    equalEntry,\n                    true,\n                    tblCache,\n                    entries,\n                ];\n            const superEntry = entries.find((entry) => {\n                const limit = 'limit' in entry.req ? entry.req.limit : Infinity;\n                return (limit >= req.limit &&\n                    (req.values ? entry.req.values : true) &&\n                    isSuperRange(entry.req.query.range, req.query.range));\n            });\n            return [superEntry, false, tblCache, entries];\n        case 'count':\n            const countQuery = entries.find((entry) => areRangesEqual(entry.req.query.range, req.query.range));\n            return [countQuery, !!countQuery, tblCache, entries];\n    }\n}\n\nfunction subscribeToCacheEntry(cacheEntry, container, requery, signal) {\n    cacheEntry.subscribers.add(requery);\n    signal.addEventListener(\"abort\", () => {\n        cacheEntry.subscribers.delete(requery);\n        if (cacheEntry.subscribers.size === 0) {\n            enqueForDeletion(cacheEntry, container);\n        }\n    });\n}\nfunction enqueForDeletion(cacheEntry, container) {\n    setTimeout(() => {\n        if (cacheEntry.subscribers.size === 0) {\n            delArrayItem(container, cacheEntry);\n        }\n    }, 3000);\n}\n\nconst cacheMiddleware = {\n    stack: 'dbcore',\n    level: 0,\n    name: 'Cache',\n    create: (core) => {\n        const dbName = core.schema.name;\n        const coreMW = {\n            ...core,\n            transaction: (stores, mode, options) => {\n                const idbtrans = core.transaction(stores, mode, options);\n                if (mode === 'readwrite') {\n                    const ac = new AbortController();\n                    const { signal } = ac;\n                    const endTransaction = (wasCommitted) => () => {\n                        ac.abort();\n                        if (mode === 'readwrite') {\n                            const affectedSubscribers = new Set();\n                            for (const storeName of stores) {\n                                const tblCache = cache[`idb://${dbName}/${storeName}`];\n                                if (tblCache) {\n                                    const table = core.table(storeName);\n                                    const ops = tblCache.optimisticOps.filter((op) => op.trans === idbtrans);\n                                    if (idbtrans._explicit && wasCommitted && idbtrans.mutatedParts) {\n                                        for (const entries of Object.values(tblCache.queries.query)) {\n                                            for (const entry of entries.slice()) {\n                                                if (obsSetsOverlap(entry.obsSet, idbtrans.mutatedParts)) {\n                                                    delArrayItem(entries, entry);\n                                                    entry.subscribers.forEach((requery) => affectedSubscribers.add(requery));\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else if (ops.length > 0) {\n                                        tblCache.optimisticOps = tblCache.optimisticOps.filter((op) => op.trans !== idbtrans);\n                                        for (const entries of Object.values(tblCache.queries.query)) {\n                                            for (const entry of entries.slice()) {\n                                                if (entry.res != null &&\n                                                    idbtrans.mutatedParts\n) {\n                                                    if (wasCommitted && !entry.dirty) {\n                                                        const freezeResults = Object.isFrozen(entry.res);\n                                                        const modRes = applyOptimisticOps(entry.res, entry.req, ops, table, entry, freezeResults);\n                                                        if (entry.dirty) {\n                                                            delArrayItem(entries, entry);\n                                                            entry.subscribers.forEach((requery) => affectedSubscribers.add(requery));\n                                                        }\n                                                        else if (modRes !== entry.res) {\n                                                            entry.res = modRes;\n                                                            entry.promise = DexiePromise.resolve({ result: modRes });\n                                                        }\n                                                    }\n                                                    else {\n                                                        if (entry.dirty) {\n                                                            delArrayItem(entries, entry);\n                                                        }\n                                                        entry.subscribers.forEach((requery) => affectedSubscribers.add(requery));\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            affectedSubscribers.forEach((requery) => requery());\n                        }\n                    };\n                    idbtrans.addEventListener('abort', endTransaction(false), {\n                        signal,\n                    });\n                    idbtrans.addEventListener('error', endTransaction(false), {\n                        signal,\n                    });\n                    idbtrans.addEventListener('complete', endTransaction(true), {\n                        signal,\n                    });\n                }\n                return idbtrans;\n            },\n            table(tableName) {\n                const downTable = core.table(tableName);\n                const primKey = downTable.schema.primaryKey;\n                const tableMW = {\n                    ...downTable,\n                    mutate(req) {\n                        const trans = PSD.trans;\n                        if (primKey.outbound ||\n                            trans.db._options.cache === 'disabled' ||\n                            trans.explicit\n                        ) {\n                            return downTable.mutate(req);\n                        }\n                        const tblCache = cache[`idb://${dbName}/${tableName}`];\n                        if (!tblCache)\n                            return downTable.mutate(req);\n                        const promise = downTable.mutate(req);\n                        if ((req.type === 'add' || req.type === 'put') && (req.values.length >= 50 || getEffectiveKeys(primKey, req).some(key => key == null))) {\n                            promise.then((res) => {\n                                const reqWithResolvedKeys = {\n                                    ...req,\n                                    values: req.values.map((value, i) => {\n                                        const valueWithKey = primKey.keyPath?.includes('.')\n                                            ? deepClone(value)\n                                            : {\n                                                ...value,\n                                            };\n                                        setByKeyPath(valueWithKey, primKey.keyPath, res.results[i]);\n                                        return valueWithKey;\n                                    })\n                                };\n                                const adjustedReq = adjustOptimisticFromFailures(tblCache, reqWithResolvedKeys, res);\n                                tblCache.optimisticOps.push(adjustedReq);\n                                queueMicrotask(() => req.mutatedParts && signalSubscribersLazily(req.mutatedParts));\n                            });\n                        }\n                        else {\n                            tblCache.optimisticOps.push(req);\n                            req.mutatedParts && signalSubscribersLazily(req.mutatedParts);\n                            promise.then((res) => {\n                                if (res.numFailures > 0) {\n                                    delArrayItem(tblCache.optimisticOps, req);\n                                    const adjustedReq = adjustOptimisticFromFailures(tblCache, req, res);\n                                    if (adjustedReq) {\n                                        tblCache.optimisticOps.push(adjustedReq);\n                                    }\n                                    req.mutatedParts && signalSubscribersLazily(req.mutatedParts);\n                                }\n                            });\n                            promise.catch(() => {\n                                delArrayItem(tblCache.optimisticOps, req);\n                                req.mutatedParts && signalSubscribersLazily(req.mutatedParts);\n                            });\n                        }\n                        return promise;\n                    },\n                    query(req) {\n                        if (!isCachableContext(PSD, downTable) || !isCachableRequest(\"query\", req))\n                            return downTable.query(req);\n                        const freezeResults = PSD.trans?.db._options.cache === 'immutable';\n                        const { requery, signal } = PSD;\n                        let [cacheEntry, exactMatch, tblCache, container] = findCompatibleQuery(dbName, tableName, 'query', req);\n                        if (cacheEntry && exactMatch) {\n                            cacheEntry.obsSet = req.obsSet;\n                        }\n                        else {\n                            const promise = downTable.query(req).then((res) => {\n                                const result = res.result;\n                                if (cacheEntry)\n                                    cacheEntry.res = result;\n                                if (freezeResults) {\n                                    for (let i = 0, l = result.length; i < l; ++i) {\n                                        Object.freeze(result[i]);\n                                    }\n                                    Object.freeze(result);\n                                }\n                                else {\n                                    res.result = deepClone(result);\n                                }\n                                return res;\n                            }).catch(error => {\n                                if (container && cacheEntry)\n                                    delArrayItem(container, cacheEntry);\n                                return Promise.reject(error);\n                            });\n                            cacheEntry = {\n                                obsSet: req.obsSet,\n                                promise,\n                                subscribers: new Set(),\n                                type: 'query',\n                                req,\n                                dirty: false,\n                            };\n                            if (container) {\n                                container.push(cacheEntry);\n                            }\n                            else {\n                                container = [cacheEntry];\n                                if (!tblCache) {\n                                    tblCache = cache[`idb://${dbName}/${tableName}`] = {\n                                        queries: {\n                                            query: {},\n                                            count: {},\n                                        },\n                                        objs: new Map(),\n                                        optimisticOps: [],\n                                        unsignaledParts: {}\n                                    };\n                                }\n                                tblCache.queries.query[req.query.index.name || ''] = container;\n                            }\n                        }\n                        subscribeToCacheEntry(cacheEntry, container, requery, signal);\n                        return cacheEntry.promise.then((res) => {\n                            return {\n                                result: applyOptimisticOps(res.result, req, tblCache?.optimisticOps, downTable, cacheEntry, freezeResults),\n                            };\n                        });\n                    },\n                };\n                return tableMW;\n            },\n        };\n        return coreMW;\n    },\n};\n\nfunction vipify(target, vipDb) {\n    return new Proxy(target, {\n        get(target, prop, receiver) {\n            if (prop === 'db')\n                return vipDb;\n            return Reflect.get(target, prop, receiver);\n        }\n    });\n}\n\nclass Dexie$1 {\n    constructor(name, options) {\n        this._middlewares = {};\n        this.verno = 0;\n        const deps = Dexie$1.dependencies;\n        this._options = options = {\n            addons: Dexie$1.addons,\n            autoOpen: true,\n            indexedDB: deps.indexedDB,\n            IDBKeyRange: deps.IDBKeyRange,\n            cache: 'cloned',\n            ...options\n        };\n        this._deps = {\n            indexedDB: options.indexedDB,\n            IDBKeyRange: options.IDBKeyRange\n        };\n        const { addons, } = options;\n        this._dbSchema = {};\n        this._versions = [];\n        this._storeNames = [];\n        this._allTables = {};\n        this.idbdb = null;\n        this._novip = this;\n        const state = {\n            dbOpenError: null,\n            isBeingOpened: false,\n            onReadyBeingFired: null,\n            openComplete: false,\n            dbReadyResolve: nop,\n            dbReadyPromise: null,\n            cancelOpen: nop,\n            openCanceller: null,\n            autoSchema: true,\n            PR1398_maxLoop: 3,\n            autoOpen: options.autoOpen,\n        };\n        state.dbReadyPromise = new DexiePromise(resolve => {\n            state.dbReadyResolve = resolve;\n        });\n        state.openCanceller = new DexiePromise((_, reject) => {\n            state.cancelOpen = reject;\n        });\n        this._state = state;\n        this.name = name;\n        this.on = Events(this, \"populate\", \"blocked\", \"versionchange\", \"close\", { ready: [promisableChain, nop] });\n        this.on.ready.subscribe = override(this.on.ready.subscribe, subscribe => {\n            return (subscriber, bSticky) => {\n                Dexie$1.vip(() => {\n                    const state = this._state;\n                    if (state.openComplete) {\n                        if (!state.dbOpenError)\n                            DexiePromise.resolve().then(subscriber);\n                        if (bSticky)\n                            subscribe(subscriber);\n                    }\n                    else if (state.onReadyBeingFired) {\n                        state.onReadyBeingFired.push(subscriber);\n                        if (bSticky)\n                            subscribe(subscriber);\n                    }\n                    else {\n                        subscribe(subscriber);\n                        const db = this;\n                        if (!bSticky)\n                            subscribe(function unsubscribe() {\n                                db.on.ready.unsubscribe(subscriber);\n                                db.on.ready.unsubscribe(unsubscribe);\n                            });\n                    }\n                });\n            };\n        });\n        this.Collection = createCollectionConstructor(this);\n        this.Table = createTableConstructor(this);\n        this.Transaction = createTransactionConstructor(this);\n        this.Version = createVersionConstructor(this);\n        this.WhereClause = createWhereClauseConstructor(this);\n        this.on(\"versionchange\", ev => {\n            if (ev.newVersion > 0)\n                console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`);\n            else\n                console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`);\n            this.close({ disableAutoOpen: false });\n        });\n        this.on(\"blocked\", ev => {\n            if (!ev.newVersion || ev.newVersion < ev.oldVersion)\n                console.warn(`Dexie.delete('${this.name}') was blocked`);\n            else\n                console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${ev.oldVersion / 10}`);\n        });\n        this._maxKey = getMaxKey(options.IDBKeyRange);\n        this._createTransaction = (mode, storeNames, dbschema, parentTransaction) => new this.Transaction(mode, storeNames, dbschema, this._options.chromeTransactionDurability, parentTransaction);\n        this._fireOnBlocked = ev => {\n            this.on(\"blocked\").fire(ev);\n            connections\n                .filter(c => c.name === this.name && c !== this && !c._state.vcFired)\n                .map(c => c.on(\"versionchange\").fire(ev));\n        };\n        this.use(cacheExistingValuesMiddleware);\n        this.use(cacheMiddleware);\n        this.use(observabilityMiddleware);\n        this.use(virtualIndexMiddleware);\n        this.use(hooksMiddleware);\n        const vipDB = new Proxy(this, {\n            get: (_, prop, receiver) => {\n                if (prop === '_vip')\n                    return true;\n                if (prop === 'table')\n                    return (tableName) => vipify(this.table(tableName), vipDB);\n                const rv = Reflect.get(_, prop, receiver);\n                if (rv instanceof Table)\n                    return vipify(rv, vipDB);\n                if (prop === 'tables')\n                    return rv.map(t => vipify(t, vipDB));\n                if (prop === '_createTransaction')\n                    return function () {\n                        const tx = rv.apply(this, arguments);\n                        return vipify(tx, vipDB);\n                    };\n                return rv;\n            }\n        });\n        this.vip = vipDB;\n        addons.forEach(addon => addon(this));\n    }\n    version(versionNumber) {\n        if (isNaN(versionNumber) || versionNumber < 0.1)\n            throw new exceptions.Type(`Given version is not a positive number`);\n        versionNumber = Math.round(versionNumber * 10) / 10;\n        if (this.idbdb || this._state.isBeingOpened)\n            throw new exceptions.Schema(\"Cannot add version when database is open\");\n        this.verno = Math.max(this.verno, versionNumber);\n        const versions = this._versions;\n        var versionInstance = versions.filter(v => v._cfg.version === versionNumber)[0];\n        if (versionInstance)\n            return versionInstance;\n        versionInstance = new this.Version(versionNumber);\n        versions.push(versionInstance);\n        versions.sort(lowerVersionFirst);\n        versionInstance.stores({});\n        this._state.autoSchema = false;\n        return versionInstance;\n    }\n    _whenReady(fn) {\n        return (this.idbdb && (this._state.openComplete || PSD.letThrough || this._vip)) ? fn() : new DexiePromise((resolve, reject) => {\n            if (this._state.openComplete) {\n                return reject(new exceptions.DatabaseClosed(this._state.dbOpenError));\n            }\n            if (!this._state.isBeingOpened) {\n                if (!this._state.autoOpen) {\n                    reject(new exceptions.DatabaseClosed());\n                    return;\n                }\n                this.open().catch(nop);\n            }\n            this._state.dbReadyPromise.then(resolve, reject);\n        }).then(fn);\n    }\n    use({ stack, create, level, name }) {\n        if (name)\n            this.unuse({ stack, name });\n        const middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);\n        middlewares.push({ stack, create, level: level == null ? 10 : level, name });\n        middlewares.sort((a, b) => a.level - b.level);\n        return this;\n    }\n    unuse({ stack, name, create }) {\n        if (stack && this._middlewares[stack]) {\n            this._middlewares[stack] = this._middlewares[stack].filter(mw => create ? mw.create !== create :\n                name ? mw.name !== name :\n                    false);\n        }\n        return this;\n    }\n    open() {\n        return usePSD(globalPSD,\n        () => dexieOpen(this));\n    }\n    _close() {\n        const state = this._state;\n        const idx = connections.indexOf(this);\n        if (idx >= 0)\n            connections.splice(idx, 1);\n        if (this.idbdb) {\n            try {\n                this.idbdb.close();\n            }\n            catch (e) { }\n            this.idbdb = null;\n        }\n        if (!state.isBeingOpened) {\n            state.dbReadyPromise = new DexiePromise(resolve => {\n                state.dbReadyResolve = resolve;\n            });\n            state.openCanceller = new DexiePromise((_, reject) => {\n                state.cancelOpen = reject;\n            });\n        }\n    }\n    close({ disableAutoOpen } = { disableAutoOpen: true }) {\n        const state = this._state;\n        if (disableAutoOpen) {\n            if (state.isBeingOpened) {\n                state.cancelOpen(new exceptions.DatabaseClosed());\n            }\n            this._close();\n            state.autoOpen = false;\n            state.dbOpenError = new exceptions.DatabaseClosed();\n        }\n        else {\n            this._close();\n            state.autoOpen = this._options.autoOpen ||\n                state.isBeingOpened;\n            state.openComplete = false;\n            state.dbOpenError = null;\n        }\n    }\n    delete(closeOptions = { disableAutoOpen: true }) {\n        const hasInvalidArguments = arguments.length > 0 && typeof arguments[0] !== 'object';\n        const state = this._state;\n        return new DexiePromise((resolve, reject) => {\n            const doDelete = () => {\n                this.close(closeOptions);\n                var req = this._deps.indexedDB.deleteDatabase(this.name);\n                req.onsuccess = wrap(() => {\n                    _onDatabaseDeleted(this._deps, this.name);\n                    resolve();\n                });\n                req.onerror = eventRejectHandler(reject);\n                req.onblocked = this._fireOnBlocked;\n            };\n            if (hasInvalidArguments)\n                throw new exceptions.InvalidArgument(\"Invalid closeOptions argument to db.delete()\");\n            if (state.isBeingOpened) {\n                state.dbReadyPromise.then(doDelete);\n            }\n            else {\n                doDelete();\n            }\n        });\n    }\n    backendDB() {\n        return this.idbdb;\n    }\n    isOpen() {\n        return this.idbdb !== null;\n    }\n    hasBeenClosed() {\n        const dbOpenError = this._state.dbOpenError;\n        return dbOpenError && (dbOpenError.name === 'DatabaseClosed');\n    }\n    hasFailed() {\n        return this._state.dbOpenError !== null;\n    }\n    dynamicallyOpened() {\n        return this._state.autoSchema;\n    }\n    get tables() {\n        return keys(this._allTables).map(name => this._allTables[name]);\n    }\n    transaction() {\n        const args = extractTransactionArgs.apply(this, arguments);\n        return this._transaction.apply(this, args);\n    }\n    _transaction(mode, tables, scopeFunc) {\n        let parentTransaction = PSD.trans;\n        if (!parentTransaction || parentTransaction.db !== this || mode.indexOf('!') !== -1)\n            parentTransaction = null;\n        const onlyIfCompatible = mode.indexOf('?') !== -1;\n        mode = mode.replace('!', '').replace('?', '');\n        let idbMode, storeNames;\n        try {\n            storeNames = tables.map(table => {\n                var storeName = table instanceof this.Table ? table.name : table;\n                if (typeof storeName !== 'string')\n                    throw new TypeError(\"Invalid table argument to Dexie.transaction(). Only Table or String are allowed\");\n                return storeName;\n            });\n            if (mode == \"r\" || mode === READONLY)\n                idbMode = READONLY;\n            else if (mode == \"rw\" || mode == READWRITE)\n                idbMode = READWRITE;\n            else\n                throw new exceptions.InvalidArgument(\"Invalid transaction mode: \" + mode);\n            if (parentTransaction) {\n                if (parentTransaction.mode === READONLY && idbMode === READWRITE) {\n                    if (onlyIfCompatible) {\n                        parentTransaction = null;\n                    }\n                    else\n                        throw new exceptions.SubTransaction(\"Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY\");\n                }\n                if (parentTransaction) {\n                    storeNames.forEach(storeName => {\n                        if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {\n                            if (onlyIfCompatible) {\n                                parentTransaction = null;\n                            }\n                            else\n                                throw new exceptions.SubTransaction(\"Table \" + storeName +\n                                    \" not included in parent transaction.\");\n                        }\n                    });\n                }\n                if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {\n                    parentTransaction = null;\n                }\n            }\n        }\n        catch (e) {\n            return parentTransaction ?\n                parentTransaction._promise(null, (_, reject) => { reject(e); }) :\n                rejection(e);\n        }\n        const enterTransaction = enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);\n        return (parentTransaction ?\n            parentTransaction._promise(idbMode, enterTransaction, \"lock\") :\n            PSD.trans ?\n                usePSD(PSD.transless, () => this._whenReady(enterTransaction)) :\n                this._whenReady(enterTransaction));\n    }\n    table(tableName) {\n        if (!hasOwn(this._allTables, tableName)) {\n            throw new exceptions.InvalidTable(`Table ${tableName} does not exist`);\n        }\n        return this._allTables[tableName];\n    }\n}\n\nconst symbolObservable = typeof Symbol !== \"undefined\" && \"observable\" in Symbol\n    ? Symbol.observable\n    : \"@@observable\";\nclass Observable {\n    constructor(subscribe) {\n        this._subscribe = subscribe;\n    }\n    subscribe(x, error, complete) {\n        return this._subscribe(!x || typeof x === \"function\" ? { next: x, error, complete } : x);\n    }\n    [symbolObservable]() {\n        return this;\n    }\n}\n\nlet domDeps;\ntry {\n    domDeps = {\n        indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,\n        IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange\n    };\n}\ncatch (e) {\n    domDeps = { indexedDB: null, IDBKeyRange: null };\n}\n\nfunction liveQuery(querier) {\n    let hasValue = false;\n    let currentValue;\n    const observable = new Observable((observer) => {\n        const scopeFuncIsAsync = isAsyncFunction(querier);\n        function execute(ctx) {\n            const wasRootExec = beginMicroTickScope();\n            try {\n                if (scopeFuncIsAsync) {\n                    incrementExpectedAwaits();\n                }\n                let rv = newScope(querier, ctx);\n                if (scopeFuncIsAsync) {\n                    rv = rv.finally(decrementExpectedAwaits);\n                }\n                return rv;\n            }\n            finally {\n                wasRootExec && endMicroTickScope();\n            }\n        }\n        let closed = false;\n        let abortController;\n        let accumMuts = {};\n        let currentObs = {};\n        const subscription = {\n            get closed() {\n                return closed;\n            },\n            unsubscribe: () => {\n                if (closed)\n                    return;\n                closed = true;\n                if (abortController)\n                    abortController.abort();\n                if (startedListening)\n                    globalEvents.storagemutated.unsubscribe(mutationListener);\n            },\n        };\n        observer.start && observer.start(subscription);\n        let startedListening = false;\n        const doQuery = () => execInGlobalContext(_doQuery);\n        function shouldNotify() {\n            return obsSetsOverlap(currentObs, accumMuts);\n        }\n        const mutationListener = (parts) => {\n            extendObservabilitySet(accumMuts, parts);\n            if (shouldNotify()) {\n                doQuery();\n            }\n        };\n        const _doQuery = () => {\n            if (closed ||\n                !domDeps.indexedDB)\n             {\n                return;\n            }\n            accumMuts = {};\n            const subscr = {};\n            if (abortController)\n                abortController.abort();\n            abortController = new AbortController();\n            const ctx = {\n                subscr,\n                signal: abortController.signal,\n                requery: doQuery,\n                querier,\n                trans: null\n            };\n            const ret = execute(ctx);\n            Promise.resolve(ret).then((result) => {\n                hasValue = true;\n                currentValue = result;\n                if (closed || ctx.signal.aborted) {\n                    return;\n                }\n                accumMuts = {};\n                currentObs = subscr;\n                if (!objectIsEmpty(currentObs) && !startedListening) {\n                    globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, mutationListener);\n                    startedListening = true;\n                }\n                execInGlobalContext(() => !closed && observer.next && observer.next(result));\n            }, (err) => {\n                hasValue = false;\n                if (!['DatabaseClosedError', 'AbortError'].includes(err?.name)) {\n                    if (!closed)\n                        execInGlobalContext(() => {\n                            if (closed)\n                                return;\n                            observer.error && observer.error(err);\n                        });\n                }\n            });\n        };\n        setTimeout(doQuery, 0);\n        return subscription;\n    });\n    observable.hasValue = () => hasValue;\n    observable.getValue = () => currentValue;\n    return observable;\n}\n\nconst Dexie = Dexie$1;\nprops(Dexie, {\n    ...fullNameExceptions,\n    delete(databaseName) {\n        const db = new Dexie(databaseName, { addons: [] });\n        return db.delete();\n    },\n    exists(name) {\n        return new Dexie(name, { addons: [] }).open().then(db => {\n            db.close();\n            return true;\n        }).catch('NoSuchDatabaseError', () => false);\n    },\n    getDatabaseNames(cb) {\n        try {\n            return getDatabaseNames(Dexie.dependencies).then(cb);\n        }\n        catch {\n            return rejection(new exceptions.MissingAPI());\n        }\n    },\n    defineClass() {\n        function Class(content) {\n            extend(this, content);\n        }\n        return Class;\n    },\n    ignoreTransaction(scopeFunc) {\n        return PSD.trans ?\n            usePSD(PSD.transless, scopeFunc) :\n            scopeFunc();\n    },\n    vip,\n    async: function (generatorFn) {\n        return function () {\n            try {\n                var rv = awaitIterator(generatorFn.apply(this, arguments));\n                if (!rv || typeof rv.then !== 'function')\n                    return DexiePromise.resolve(rv);\n                return rv;\n            }\n            catch (e) {\n                return rejection(e);\n            }\n        };\n    },\n    spawn: function (generatorFn, args, thiz) {\n        try {\n            var rv = awaitIterator(generatorFn.apply(thiz, args || []));\n            if (!rv || typeof rv.then !== 'function')\n                return DexiePromise.resolve(rv);\n            return rv;\n        }\n        catch (e) {\n            return rejection(e);\n        }\n    },\n    currentTransaction: {\n        get: () => PSD.trans || null\n    },\n    waitFor: function (promiseOrFunction, optionalTimeout) {\n        const promise = DexiePromise.resolve(typeof promiseOrFunction === 'function' ?\n            Dexie.ignoreTransaction(promiseOrFunction) :\n            promiseOrFunction)\n            .timeout(optionalTimeout || 60000);\n        return PSD.trans ?\n            PSD.trans.waitFor(promise) :\n            promise;\n    },\n    Promise: DexiePromise,\n    debug: {\n        get: () => debug,\n        set: value => {\n            setDebug(value);\n        }\n    },\n    derive: derive,\n    extend: extend,\n    props: props,\n    override: override,\n    Events: Events,\n    on: globalEvents,\n    liveQuery,\n    extendObservabilitySet,\n    getByKeyPath: getByKeyPath,\n    setByKeyPath: setByKeyPath,\n    delByKeyPath: delByKeyPath,\n    shallowClone: shallowClone,\n    deepClone: deepClone,\n    getObjectDiff: getObjectDiff,\n    cmp,\n    asap: asap$1,\n    minKey: minKey,\n    addons: [],\n    connections: connections,\n    errnames: errnames,\n    dependencies: domDeps,\n    cache,\n    semVer: DEXIE_VERSION,\n    version: DEXIE_VERSION.split('.')\n        .map(n => parseInt(n))\n        .reduce((p, c, i) => p + (c / Math.pow(10, i * 2))),\n});\nDexie.maxKey = getMaxKey(Dexie.dependencies.IDBKeyRange);\n\nif (typeof dispatchEvent !== 'undefined' && typeof addEventListener !== 'undefined') {\n    globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, updatedParts => {\n        if (!propagatingLocally) {\n            let event;\n            event = new CustomEvent(STORAGE_MUTATED_DOM_EVENT_NAME, {\n                detail: updatedParts\n            });\n            propagatingLocally = true;\n            dispatchEvent(event);\n            propagatingLocally = false;\n        }\n    });\n    addEventListener(STORAGE_MUTATED_DOM_EVENT_NAME, ({ detail }) => {\n        if (!propagatingLocally) {\n            propagateLocally(detail);\n        }\n    });\n}\nfunction propagateLocally(updateParts) {\n    let wasMe = propagatingLocally;\n    try {\n        propagatingLocally = true;\n        globalEvents.storagemutated.fire(updateParts);\n        signalSubscribersNow(updateParts, true);\n    }\n    finally {\n        propagatingLocally = wasMe;\n    }\n}\nlet propagatingLocally = false;\n\nlet bc;\nlet createBC = () => { };\nif (typeof BroadcastChannel !== 'undefined') {\n    createBC = () => {\n        bc = new BroadcastChannel(STORAGE_MUTATED_DOM_EVENT_NAME);\n        bc.onmessage = ev => ev.data && propagateLocally(ev.data);\n    };\n    createBC();\n    if (typeof bc.unref === 'function') {\n        bc.unref();\n    }\n    globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, (changedParts) => {\n        if (!propagatingLocally) {\n            bc.postMessage(changedParts);\n        }\n    });\n}\n\nif (typeof addEventListener !== 'undefined') {\n    addEventListener('pagehide', (event) => {\n        if (!Dexie$1.disableBfCache && event.persisted) {\n            if (debug)\n                console.debug('Dexie: handling persisted pagehide');\n            bc?.close();\n            for (const db of connections) {\n                db.close({ disableAutoOpen: false });\n            }\n        }\n    });\n    addEventListener('pageshow', (event) => {\n        if (!Dexie$1.disableBfCache && event.persisted) {\n            if (debug)\n                console.debug('Dexie: handling persisted pageshow');\n            createBC();\n            propagateLocally({ all: new RangeSet(-Infinity, [[]]) });\n        }\n    });\n}\n\nfunction add(value) {\n    return new PropModification({ add: value });\n}\n\nfunction remove(value) {\n    return new PropModification({ remove: value });\n}\n\nfunction replacePrefix(a, b) {\n    return new PropModification({ replacePrefix: [a, b] });\n}\n\nDexiePromise.rejectionMapper = mapError;\nsetDebug(debug);\n\nexport { Dexie$1 as Dexie, Entity, PropModSymbol, PropModification, RangeSet, add, cmp, Dexie$1 as default, liveQuery, mergeRanges, rangesOverlap, remove, replacePrefix };\n//# sourceMappingURL=dexie.mjs.map\n", "type OptionInner<T> = { some: true; value: T } | { some: false };\r\n\r\ninterface OptionMatcher<T, O> {\r\n\tsome(value: T): O;\r\n\tnone(): O;\r\n}\r\n\r\nexport class Option<T> {\r\n\tprivate readonly inner: OptionInner<T>;\r\n\r\n\tprivate constructor(inner: OptionInner<T>) {\r\n\t\tthis.inner = inner;\r\n\t}\r\n\r\n\tpublic static Some<T>(value: T): Option<T> {\r\n\t\treturn new Option<T>({ some: true, value: value });\r\n\t}\r\n\r\n\tpublic static None<T, E>(): Option<T> {\r\n\t\treturn new Option<T>({ some: false });\r\n\t}\r\n\r\n\tpublic match<O>(matcher: OptionMatcher<T, O>): O {\r\n\t\tif (this.inner.some) {\r\n\t\t\treturn matcher.some(this.inner.value);\r\n\t\t}\r\n\t\treturn matcher.none();\r\n\t}\r\n\r\n\tpublic map<O>(fn: (_: T) => O): Option<O> {\r\n\t\treturn this.match({\r\n\t\t\tsome: (t) => Option.Some(fn(t)),\r\n\t\t\tnone: () => Option.None(),\r\n\t\t});\r\n\t}\r\n\r\n\tpublic andThen<O>(fn: (_: T) => Option<O>): Option<O> {\r\n\t\treturn this.match({\r\n\t\t\tsome: (t) => fn(t),\r\n\t\t\tnone: () => Option.None(),\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport const Some = <T>(value: T): Option<T> => {\r\n\treturn Option.Some(value);\r\n};\r\n\r\nexport const None = <T>(): Option<T> => {\r\n\treturn Option.None();\r\n};\r\n\r\ntype ResultInner<T, E> = { ok: true; value: T } | { ok: false; error: E };\r\n\r\ninterface ResultMatcher<T, E, O> {\r\n\tok(value: T): O;\r\n\terr(error: E): O;\r\n}\r\n\r\nexport class Result<T, E = Error> {\r\n\tprivate readonly inner: ResultInner<T, E>;\r\n\r\n\tprivate constructor(inner: ResultInner<T, E>) {\r\n\t\tthis.inner = inner;\r\n\t}\r\n\r\n\tpublic static Ok<T, E>(value: T): Result<T, E> {\r\n\t\treturn new Result<T, E>({ ok: true, value: value });\r\n\t}\r\n\r\n\tpublic static Err<T, E>(error: E): Result<T, E> {\r\n\t\treturn new Result<T, E>({ ok: false, error: error });\r\n\t}\r\n\r\n\tpublic isOk(): boolean {\r\n\t\treturn this.inner.ok;\r\n\t}\r\n\r\n\tpublic match<O>(matcher: ResultMatcher<T, E, O>): O {\r\n\t\tif (this.inner.ok) {\r\n\t\t\treturn matcher.ok(this.inner.value);\r\n\t\t}\r\n\t\treturn matcher.err(this.inner.error);\r\n\t}\r\n\r\n\tpublic map<O>(fn: (_: T) => O): Result<O, E> {\r\n\t\treturn this.match({\r\n\t\t\tok: (t) => Result.Ok(fn(t)),\r\n\t\t\terr: (e) => Result.Err(e),\r\n\t\t});\r\n\t}\r\n\r\n\tpublic mapErr<O>(fn: (_: E) => O): Result<T, O> {\r\n\t\treturn this.match({\r\n\t\t\tok: (t) => Result.Ok(t),\r\n\t\t\terr: (e) => Result.Err(fn(e)),\r\n\t\t});\r\n\t}\r\n\r\n\tpublic andThen<O>(fn: (_: T) => Result<O, E>): Result<O, E> {\r\n\t\treturn this.match({\r\n\t\t\tok: (t) => fn(t),\r\n\t\t\terr: (e) => Result.Err(e),\r\n\t\t});\r\n\t}\r\n\r\n\tpublic asOk(): Option<T> {\r\n\t\treturn this.match({\r\n\t\t\tok: (t) => Option.Some(t),\r\n\t\t\terr: (_) => Option.None(),\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport const Ok = <T, E = Error>(value: T): Result<T, E> => {\r\n\treturn Result.Ok(value);\r\n};\r\n\r\nexport const Err = <T, E = Error>(error: E): Result<T, E> => {\r\n\treturn Result.Err(error);\r\n};\r\n\r\nexport function to<\r\n\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\r\n\tT extends { readonly __tag: symbol; value: any } = {\r\n\t\treadonly __tag: unique symbol;\r\n\t\tvalue: never;\r\n\t},\r\n>(value: T[\"value\"]): T {\r\n\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\r\n\treturn value as any as T;\r\n}\r\n\r\nexport function from<\r\n\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\r\n\tT extends { readonly __tag: symbol; value: any },\r\n>(value: T): T[\"value\"] {\r\n\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\r\n\treturn value as any as T[\"value\"];\r\n}\r\n\r\nexport function arrayShuffle<T>(array: T[], seed: number): T[] {\r\n\tlet currentIndex = array.length;\r\n\tlet temporaryValue: T;\r\n\tlet randomIndex: number;\r\n\r\n\tconst random = (seed: number) => {\r\n\t\t// biome-ignore lint/style/noParameterAssign: <explanation>\r\n\t\tconst x = Math.sin(seed++) * 10000;\r\n\t\treturn x - Math.floor(x);\r\n\t};\r\n\r\n\t// While there remain elements to shuffle...\r\n\twhile (0 !== currentIndex) {\r\n\t\t// Pick a remaining element...\r\n\t\trandomIndex = Math.floor(random(seed) * currentIndex--);\r\n\r\n\t\t// And swap it with the current element.\r\n\t\ttemporaryValue = array[currentIndex];\r\n\t\tarray[currentIndex] = array[randomIndex];\r\n\t\tarray[randomIndex] = temporaryValue;\r\n\r\n\t\t// biome-ignore lint/style/noParameterAssign: <explanation>\r\n\t\t++seed;\r\n\t}\r\n\r\n\treturn array;\r\n}\r\n", "import Dexie, { type EntityTable } from \"../libraries/dexie\";\r\n\r\nimport { BookType } from \"../models/database\";\r\nimport type {\r\n\tBook,\r\n\tBookId,\r\n\tBookshelf,\r\n\tBookshelfId,\r\n\tUserBook,\r\n\tUserBookId,\r\n} from \"../models/database\";\r\n\r\nimport { arrayShuffle, Err, Ok, type Result, to } from \"../utils\";\r\n\r\nconst createBook = (\r\n\tuserId: string,\r\n\tbookId: string,\r\n\tcover: string,\r\n): UserBook => {\r\n\treturn {\r\n\t\tid: to<UserBookId>(userId),\r\n\t\tbook: {\r\n\t\t\tid: to<BookId>(bookId),\r\n\r\n\t\t\tcover: cover,\r\n\r\n\t\t\ttitle: \"\",\r\n\t\t\ttype: BookType.Paperback,\r\n\t\t\tpages: 0,\r\n\t\t\tdescription: \"\",\r\n\t\t\tpublished: new Date(),\r\n\t\t},\r\n\t\trating: 0,\r\n\t\tpurchased: new Date(),\r\n\t};\r\n};\r\n\r\n// biome-ignore format: Get way too nig to easily edit\r\nconst BOOKS: UserBook[] = [\r\n    createBook(\"ybw-djFeWs3vbQf25xECQ\", \"T62kQhbo_aIOeCpwHrQGi\", \"./public/0009276845-L.jpg\"),\r\n    createBook(\"LPJ8qsBpZ1y8P_rYIT9Gh\", \"_GxMZyg9UKMitNaR5Edv9\", \"./public/0009970034-L.jpg\"),\r\n    createBook(\"xOkcThsOnbJZunwyT7-WQ\", \"XCOIWR0WVVl3w-xU_7E1C\", \"./public/0010128852-L.jpg\"),\r\n    createBook(\"Z6DOq8S4Myv_3zARzpKqi\", \"Vy6o4DHiOD4oLsX0spCkB\", \"./public/0011865531-L.jpg\"),\r\n    createBook(\"YeastuskxRucUS6LcVGgM\", \"pCXbm02mtO-nLh4vSDLv7\", \"./public/0011918737-L.jpg\"),\r\n    createBook(\"5UsM88R9aWmu_99QE_txN\", \"p9uMVa7JPB8KHww4T23-y\", \"./public/0011922810-L.jpg\"),\r\n    createBook(\"B4co_lLhlipaaqJIOfd_q\", \"05R5JdXJnKCPXKXkhQ5kg\", \"./public/0012791623-L.jpg\"),\r\n    createBook(\"2_ngDyhiju9ICYcj74e9I\", \"c9Qid8p9zEPqx6F4SF4KE\", \"./public/0013070958-L.jpg\"),\r\n    createBook(\"77k448mgkXtvNt3ZAatR-\", \"tJjkqPq-S_Ps9IYBbxpcs\", \"./public/0013416640-L.jpg\"),\r\n    createBook(\"c_ge0A-VrqeUyAeIYwUUG\", \"4hauXlVpAPYklHr34ZIca\", \"./public/3002898-L.jpg\"),\r\n    createBook(\"X1i9K4u6PAQuKNnxPicjH\", \"k-BhTcS47DH67PC2MM9jB\", \"./public/4607078-L.jpg\"),\r\n    createBook(\"FaX5sR_EfK5fd6Rxp0r3H\", \"KiXRSYeIzMbMOAyKp0698\", \"./public/5654258-L.jpg\"),\r\n    createBook(\"WHHZAfI1iKOT34Bv67Aew\", \"BNYH3hfbZ6OioHWCjqrJp\", \"./public/573479-L.jpg\"),\r\n    createBook(\"8DcfoeHezAOv_RxhLiJCR\", \"UHOjdK4MZp9abgQMO3Evl\", \"./public/5742496-L.jpg\"),\r\n    createBook(\"B-a26--EClbZb2Q5lqfP7\", \"5oeIFqpV-5GcnKiBaUQQb\", \"./public/6136328-L.jpg\"),\r\n    createBook(\"Iv7BJCsfV7IGi_Wd6LGZX\", \"sut-OS24Emr1K3veiUVKo\", \"./public/7132786-L.jpg\"),\r\n    createBook(\"STfmfyurEOWITHNZ-WeJt\", \"3iJzTSfLDMY2_7LSTO2Sj\", \"./public/7943675-L.jpg\"),\r\n];\r\n\r\nconst database = new Dexie(\"sissix\") as Dexie & {\r\n\tbooks: EntityTable<Book, \"id\">;\r\n\tuserBooks: EntityTable<UserBook, \"id\">;\r\n\tbookshelves: EntityTable<Bookshelf, \"id\">;\r\n};\r\n\r\ndatabase.version(1).stores({\r\n\tbooks: \"++id\",\r\n\tuserBooks: \"++id\",\r\n\tbookshelves: \"++id\",\r\n});\r\n\r\nexport const getBookshelves = async (): Promise<Result<Bookshelf[]>> => {\r\n\treturn Ok([\r\n\t\t{\r\n\t\t\tid: to<BookshelfId>(\"1\"),\r\n\t\t\tname: \"Test Bookshelf\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: to<BookshelfId>(\"2\"),\r\n\t\t\tname: \"Test Bookshelf\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: to<BookshelfId>(\"3\"),\r\n\t\t\tname: \"Test Bookshelf\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: to<BookshelfId>(\"4\"),\r\n\t\t\tname: \"Test Bookshelf\",\r\n\t\t},\r\n\t]);\r\n};\r\n\r\nexport const getBooks = async (\r\n\tid: BookshelfId,\r\n): Promise<Result<UserBook[]>> => {\r\n\tif (id === to<BookshelfId>(\"1\")) {\r\n\t\treturn Ok(BOOKS);\r\n\t}\r\n\tif (id === to<BookshelfId>(\"2\")) {\r\n\t\treturn Ok(BOOKS);\r\n\t}\r\n\tif (id === to<BookshelfId>(\"3\")) {\r\n\t\treturn Ok(BOOKS);\r\n\t}\r\n\tif (id === to<BookshelfId>(\"4\")) {\r\n\t\treturn Ok(BOOKS);\r\n\t}\r\n\r\n\treturn Err(new Error(\"Method not implemented.\"));\r\n};\r\n", "/// <reference lib=\"webworker\" />\r\n\r\n// biome-ignore lint/complexity/noUselessEmptyExport: THis is needed to get service worker types working, thanks Typescript.\r\nexport type {};\r\ndeclare const self: ServiceWorkerGlobalScope;\r\n\r\nimport Path, { type TestMatch } from \"./libraries/path\";\r\n\r\nimport { getBookshelves, getBooks } from \"./database/worker\";\r\nimport { type Result, to } from \"./utils\";\r\n\r\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\r\ntype Handler<T extends Record<string, any> = Record<string, any>> = (request: Request, params: TestMatch<T>) => Promise<Response>;\r\n\r\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\r\ntype Route<T extends Record<string, any> = Record<string, any>> = [\r\n    Path<T>,\r\n    Handler<T>,\r\n];\r\n\r\nconst fetchHandler = (() => {\r\n    const responseApi = <T>(data: T) => {\r\n        return Response.json({ data: data }, { status: 200 });\r\n    };\r\n\r\n    const responseError = (status: number, code: string, message: string) => {\r\n        return Response.json({ code: code, message: message }, { status: status });\r\n    };\r\n\r\n    const responseNotFound = (message: string) => responseError(404, \"NOT_FOUND\", message);\r\n\r\n    const responseInternal = (message: string) => responseError(500, \"INTERNAL_SERVER_ERROR\", message);\r\n\r\n    const intoResponse = <T>(result: Result<T>) => result.match({\r\n        ok: (value) => responseApi(value),\r\n        err: (error) => responseInternal(error.message),\r\n    });\r\n\r\n    const bookshelves: Handler = async (request, _) => {\r\n        if (request.method === \"GET\") {\r\n            return intoResponse(await getBookshelves());\r\n        }\r\n\r\n        return responseNotFound(\"\");\r\n    };\r\n\r\n    const bookshelf: Handler = async (request, params) => {\r\n        if (params == null) {\r\n            return responseNotFound(\"\");\r\n        }\r\n\r\n        if (typeof(params.id) === \"string\") {\r\n            if (request.method === \"GET\") {\r\n                return intoResponse(await getBooks(to(params.id)));\r\n            }\r\n        }\r\n\r\n        return responseNotFound(\"\");\r\n    };\r\n\r\n    const handlers: Route[] = [\r\n        [\r\n            new Path(\"/api/bookshelves\"),\r\n            bookshelves,\r\n        ],\r\n        [\r\n            new Path(\"/api/bookshelves/:id\"),\r\n            bookshelf,\r\n        ],\r\n    ];\r\n\r\n    return async (request: Request): Promise<Response> => {\r\n        const url = new URL(request.url);\r\n\r\n        if (url.hostname === self.location.hostname) {\r\n            for (const [path, handler] of handlers) {\r\n                const parsed = path.test(url.pathname);\r\n                if (parsed == null) {\r\n                    continue;\r\n                }\r\n\r\n                return handler(request, parsed);\r\n            }\r\n        }\r\n\r\n        return fetch(request);\r\n    };\r\n})();\r\n\r\nself.addEventListener('activate', () => {\r\n    self.clients.claim();\r\n});\r\n\r\nself.addEventListener(\"fetch\", (event) => {\r\n    event.respondWith(fetchHandler(event.request));\r\n});\r\n\r\nself.addEventListener(\"install\", (_event) => {\r\n    self.skipWaiting();\r\n});\r\n\r\nself.addEventListener(\"message\", (_event) => {});\r\n"],
  "mappings": "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",
  "names": ["type", "DexieError", "type", "resolve", "reject", "props", "task", "trans", "keys", "i", "args", "Table", "count", "ctx", "Collection", "cmp", "direction", "addRange", "ranges", "WhereClause", "p", "Transaction", "db", "tables", "keyPath", "compound", "result", "req", "openCursor", "query", "ev", "hasGetAll", "indexedDB", "oldVersion", "Version", "to", "target", "primaryKey", "dxTrans", "cache", "key", "state"]
}
